{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/banner/user_actions_row/customize_dialog/palettes_list/palettes_list.jsx\";\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { animated, useTransition } from 'react-spring';\nimport { Typography } from '@wld/ui';\nimport { PaletteVisual } from '../palette_visual/palette_visual';\nimport { LoadingSpinner } from '../../../../commons/loading_spinner/loading_spinner';\nimport { buildShadedPalette } from './utils/build_shaded_palette';\nimport { palettes } from './utils/palettes';\nimport { PALETTES_LIST_TRANSITIONS_SPRING_PROPS } from './palettes_list_spring_props';\nimport { styles } from './palettes_list_styles';\nconst useStyles = createUseStyles(styles);\n\nconst PalettesListComponent = ({\n  value: currentPalette,\n  onChange,\n  classes: receivedClasses = {}\n}) => {\n  const classes = useStyles();\n  const containerReference = useRef();\n  const [itemsToShow, setItemsToShow] = useState(10);\n  const displayedPalettes = useMemo(() => palettes.slice(0, itemsToShow), [itemsToShow]);\n  const onSelectChanged = useCallback(value => () => {\n    const [primary, secondary, tertiary] = value;\n    return onChange({\n      primary: buildShadedPalette(primary),\n      secondary: buildShadedPalette(secondary),\n      tertiary: buildShadedPalette(tertiary)\n    });\n  }, []);\n  const setNextDisplayedPalettes = useCallback(() => {\n    setItemsToShow(itemsToShow + 10);\n  }, [itemsToShow, setItemsToShow]);\n  const transitions = useTransition(displayedPalettes, item => `palette_${item.join('_')}`, PALETTES_LIST_TRANSITIONS_SPRING_PROPS);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerReference,\n    id: `scrollable_${classes.container}`,\n    className: cn(classes.container, receivedClasses.container),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, currentPalette && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.selectedPaletteContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(PaletteVisual, {\n    palette: currentPalette,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    hasMore: itemsToShow < palettes.length,\n    loader: /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }),\n    pageStart: 0,\n    useWindow: false,\n    loadMore: setNextDisplayedPalettes,\n    getScrollParent: () => containerReference.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, transitions.map(({\n    item,\n    key,\n    props\n  }, paletteIndex) => /*#__PURE__*/React.createElement(animated.button, {\n    key: key,\n    type: \"button\",\n    className: classes.selectablePaletteContainer,\n    onClick: onSelectChanged(item),\n    style: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"dark\",\n    customClasses: {\n      container: classes.selectablePaletteIndex\n    },\n    variant: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, `${paletteIndex + 1}.`), /*#__PURE__*/React.createElement(PaletteVisual, {\n    classes: {\n      tooltipPopper: classes.tooltipPopper,\n      color: classes.paletteVisualColor\n    },\n    palette: ['primary', 'secondary', 'tertiary'].reduce((acc, keyName, index) => ({ ...acc,\n      [keyName]: {\n        500: item[index]\n      }\n    }), {}),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport const PalettesList = PalettesListComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/banner/user_actions_row/customize_dialog/palettes_list/palettes_list.jsx"],"names":["React","useCallback","useMemo","useRef","useState","cn","createUseStyles","InfiniteScroll","animated","useTransition","Typography","PaletteVisual","LoadingSpinner","buildShadedPalette","palettes","PALETTES_LIST_TRANSITIONS_SPRING_PROPS","styles","useStyles","PalettesListComponent","value","currentPalette","onChange","classes","receivedClasses","containerReference","itemsToShow","setItemsToShow","displayedPalettes","slice","onSelectChanged","primary","secondary","tertiary","setNextDisplayedPalettes","transitions","item","join","container","selectedPaletteContainer","divider","length","current","map","key","props","paletteIndex","selectablePaletteContainer","selectablePaletteIndex","tooltipPopper","color","paletteVisualColor","reduce","acc","keyName","index","PalettesList"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { animated, useTransition } from 'react-spring';\n\nimport { Typography } from '@wld/ui';\n\nimport { PaletteVisual } from '../palette_visual/palette_visual';\nimport { LoadingSpinner } from '../../../../commons/loading_spinner/loading_spinner';\n\nimport { buildShadedPalette } from './utils/build_shaded_palette';\n\nimport { palettes } from './utils/palettes';\n\nimport { PALETTES_LIST_TRANSITIONS_SPRING_PROPS } from './palettes_list_spring_props';\n\nimport { styles } from './palettes_list_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst PalettesListComponent = ({ value: currentPalette, onChange, classes: receivedClasses = {} }) => {\n    const classes = useStyles();\n    const containerReference = useRef();\n    const [itemsToShow, setItemsToShow] = useState(10);\n\n    const displayedPalettes = useMemo(() => palettes.slice(0, itemsToShow), [itemsToShow]);\n\n    const onSelectChanged = useCallback(\n        value => () => {\n            const [primary, secondary, tertiary] = value;\n            return onChange({\n                primary: buildShadedPalette(primary),\n                secondary: buildShadedPalette(secondary),\n                tertiary: buildShadedPalette(tertiary)\n            });\n        },\n        []\n    );\n\n    const setNextDisplayedPalettes = useCallback(() => {\n        setItemsToShow(itemsToShow + 10);\n    }, [itemsToShow, setItemsToShow]);\n\n    const transitions = useTransition(\n        displayedPalettes,\n        item => `palette_${item.join('_')}`,\n        PALETTES_LIST_TRANSITIONS_SPRING_PROPS\n    );\n\n    return (\n        <div\n            ref={containerReference}\n            id={`scrollable_${classes.container}`}\n            className={cn(classes.container, receivedClasses.container)}\n        >\n            {currentPalette && (\n                <div className={classes.selectedPaletteContainer}>\n                    <PaletteVisual palette={currentPalette} />\n                    <div className={classes.divider} />\n                </div>\n            )}\n            <InfiniteScroll\n                hasMore={itemsToShow < palettes.length}\n                loader={<LoadingSpinner />}\n                pageStart={0}\n                useWindow={false}\n                loadMore={setNextDisplayedPalettes}\n                getScrollParent={() => containerReference.current}\n            >\n                {transitions.map(({ item, key, props }, paletteIndex) => (\n                    <animated.button\n                        key={key}\n                        type=\"button\"\n                        className={classes.selectablePaletteContainer}\n                        onClick={onSelectChanged(item)}\n                        style={props}\n                    >\n                        <Typography\n                            color=\"dark\"\n                            customClasses={{\n                                container: classes.selectablePaletteIndex\n                            }}\n                            variant=\"h3\"\n                        >\n                            {`${paletteIndex + 1}.`}\n                        </Typography>\n                        <PaletteVisual\n                            classes={{\n                                tooltipPopper: classes.tooltipPopper,\n                                color: classes.paletteVisualColor\n                            }}\n                            palette={['primary', 'secondary', 'tertiary'].reduce(\n                                (acc, keyName, index) => ({\n                                    ...acc,\n                                    [keyName]: { 500: item[index] }\n                                }),\n                                {}\n                            )}\n                        />\n                    </animated.button>\n                ))}\n            </InfiniteScroll>\n        </div>\n    );\n};\n\nexport const PalettesList = PalettesListComponent;\n"]},"metadata":{},"sourceType":"module"}