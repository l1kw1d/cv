{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/copy_wrapper/copy_wrapper.jsx\";\nimport React, { useCallback, useState } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { FormattedMessage } from 'react-intl';\nimport { Portal, Snackbar } from '@material-ui/core';\n\nconst mergeOnClicks = (...fns) => (...args) => {\n  fns.forEach(fn => {\n    if (typeof fn === 'function') {\n      fn(args);\n    }\n  });\n};\n\nconst CopyWrapperComponent = ({\n  value,\n  children\n}) => {\n  const [showSnack, setShowSnack] = useState(false);\n  const handleCopyToClipboardClick = useCallback(() => {\n    copy(value);\n    setShowSnack(true);\n  }, [value]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, React.Children.map(children, child => React.cloneElement(child, { ...child.props,\n    onClick: mergeOnClicks(handleCopyToClipboardClick, child.props.onClick)\n  })), /*#__PURE__*/React.createElement(Portal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      horizontal: 'left',\n      vertical: 'bottom'\n    },\n    open: showSnack,\n    message: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Main.lang.copied\",\n      defaultMessage: \"Copied in your clipboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 30\n      }\n    }),\n    autoHideDuration: 5000,\n    onClose: () => setShowSnack(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport const CopyWrapper = CopyWrapperComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/copy_wrapper/copy_wrapper.jsx"],"names":["React","useCallback","useState","copy","FormattedMessage","Portal","Snackbar","mergeOnClicks","fns","args","forEach","fn","CopyWrapperComponent","value","children","showSnack","setShowSnack","handleCopyToClipboardClick","Children","map","child","cloneElement","props","onClick","horizontal","vertical","CopyWrapper"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,mBAAjC;;AAEA,MAAMC,aAAa,GAAG,CAAC,GAAGC,GAAJ,KAAY,CAAC,GAAGC,IAAJ,KAAa;AAC3CD,EAAAA,GAAG,CAACE,OAAJ,CAAYC,EAAE,IAAI;AACd,QAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC1BA,MAAAA,EAAE,CAACF,IAAD,CAAF;AACH;AACJ,GAJD;AAKH,CAND;;AAQA,MAAMG,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AAClD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMe,0BAA0B,GAAGhB,WAAW,CAAC,MAAM;AACjDE,IAAAA,IAAI,CAACU,KAAD,CAAJ;AACAG,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAH6C,EAG3C,CAACH,KAAD,CAH2C,CAA9C;AAKA,sBACI,0CACKb,KAAK,CAACkB,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,EAA6BM,KAAK,IAC/BpB,KAAK,CAACqB,YAAN,CAAmBD,KAAnB,EAA0B,EACtB,GAAGA,KAAK,CAACE,KADa;AAEtBC,IAAAA,OAAO,EAAEhB,aAAa,CAACU,0BAAD,EAA6BG,KAAK,CAACE,KAAN,CAAYC,OAAzC;AAFA,GAA1B,CADH,CADL,eAMI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AACI,IAAA,YAAY,EAAE;AAAEC,MAAAA,UAAU,EAAE,MAAd;AAAsBC,MAAAA,QAAQ,EAAE;AAAhC,KADlB;AAEI,IAAA,IAAI,EAAEV,SAFV;AAGI,IAAA,OAAO,eAAE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,kBAArB;AAAwC,MAAA,cAAc,EAAC,0BAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHb;AAII,IAAA,gBAAgB,EAAE,IAJtB;AAKI,IAAA,OAAO,EAAE,MAAMC,YAAY,CAAC,KAAD,CAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CANJ,CADJ;AAkBH,CA1BD;;AA4BA,OAAO,MAAMU,WAAW,GAAGd,oBAApB","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport copy from 'copy-to-clipboard';\nimport { FormattedMessage } from 'react-intl';\nimport { Portal, Snackbar } from '@material-ui/core';\n\nconst mergeOnClicks = (...fns) => (...args) => {\n    fns.forEach(fn => {\n        if (typeof fn === 'function') {\n            fn(args);\n        }\n    });\n};\n\nconst CopyWrapperComponent = ({ value, children }) => {\n    const [showSnack, setShowSnack] = useState(false);\n\n    const handleCopyToClipboardClick = useCallback(() => {\n        copy(value);\n        setShowSnack(true);\n    }, [value]);\n\n    return (\n        <>\n            {React.Children.map(children, child =>\n                React.cloneElement(child, {\n                    ...child.props,\n                    onClick: mergeOnClicks(handleCopyToClipboardClick, child.props.onClick)\n                }))}\n            <Portal>\n                <Snackbar\n                    anchorOrigin={{ horizontal: 'left', vertical: 'bottom' }}\n                    open={showSnack}\n                    message={<FormattedMessage id=\"Main.lang.copied\" defaultMessage=\"Copied in your clipboard\" />}\n                    autoHideDuration={5000}\n                    onClose={() => setShowSnack(false)}\n                />\n            </Portal>\n        </>\n    );\n};\n\nexport const CopyWrapper = CopyWrapperComponent;\n"]},"metadata":{},"sourceType":"module"}