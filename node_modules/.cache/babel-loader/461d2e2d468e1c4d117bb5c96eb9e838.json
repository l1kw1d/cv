{"ast":null,"code":"import * as yup from 'yup';\nconst isHex = yup.string().matches(/^#[0-9a-f]{3,6}$/i, 'Color shade must be written using the hex color syntax.');\nconst SHADES_SCHEMA = Object.freeze({ ...[50, 100, 150, 200, 250, 300, 350, 400, 450, 550, 600, 650, 700, 750, 800, 850, 900].reduce((acc, shade) => ({ ...acc,\n    [shade]: isHex.notRequired()\n  }), {}),\n  500: isHex.required()\n});\nconst isExistingColorInPalette = yup.string().test('is-existing-color-in-palette', args => `Color \\`${args.value}\\` must be present in palette.`, // eslint-disable-next-line func-names\nfunction (value) {\n  var _this$options, _this$options$context, _this$options$context2;\n\n  return Boolean(this === null || this === void 0 ? void 0 : (_this$options = this.options) === null || _this$options === void 0 ? void 0 : (_this$options$context = _this$options.context) === null || _this$options$context === void 0 ? void 0 : (_this$options$context2 = _this$options$context.palette) === null || _this$options$context2 === void 0 ? void 0 : _this$options$context2[value]);\n});\nconst CARD_VARIANT_SCHEMA = yup.object({\n  backgroundColor: isExistingColorInPalette.required(),\n  color: isExistingColorInPalette.required(),\n  backBackgroundColor: isExistingColorInPalette.required(),\n  backColor: isExistingColorInPalette.required()\n});\nexport const THEME_SCHEMA = yup.object({\n  palette: yup.lazy((colors = {}) => yup.object(Object.keys(colors).reduce((acc, name) => ({ ...acc,\n    [name]: yup.object({ ...SHADES_SCHEMA,\n      contrastDefaultColor: yup.string().required()\n    })\n  }), {}))),\n  miscellaneous: yup.object({\n    backgroundColor: isHex.required(),\n    color: isHex.required(),\n    spacing: yup.number().required(),\n    fontFamily: yup.array().of(yup.string())\n  }),\n  sizes: yup.object({\n    small: yup.string().required(),\n    medium: yup.string().required()\n  }),\n  components: yup.object({\n    banner: yup.object({\n      overlayColor: isExistingColorInPalette.required(),\n      imageSource: yup.string().required()\n    }),\n    cards: yup.object({\n      height: yup.number().required(),\n      width: yup.number().required(),\n      borderRadius: yup.number().required(),\n      default: CARD_VARIANT_SCHEMA,\n      variants: yup.array().of(CARD_VARIANT_SCHEMA).required()\n    })\n  })\n});","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/utils/styles/theme/theme_schema.js"],"names":["yup","isHex","string","matches","SHADES_SCHEMA","Object","freeze","reduce","acc","shade","notRequired","required","isExistingColorInPalette","test","args","value","Boolean","options","context","palette","CARD_VARIANT_SCHEMA","object","backgroundColor","color","backBackgroundColor","backColor","THEME_SCHEMA","lazy","colors","keys","name","contrastDefaultColor","miscellaneous","spacing","number","fontFamily","array","of","sizes","small","medium","components","banner","overlayColor","imageSource","cards","height","width","borderRadius","default","variants"],"mappings":"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","sourcesContent":["import * as yup from 'yup';\n\nconst isHex = yup.string().matches(/^#[0-9a-f]{3,6}$/i, 'Color shade must be written using the hex color syntax.');\n\nconst SHADES_SCHEMA = Object.freeze({\n    ...[50, 100, 150, 200, 250, 300, 350, 400, 450, 550, 600, 650, 700, 750, 800, 850, 900].reduce(\n        (acc, shade) => ({ ...acc, [shade]: isHex.notRequired() }),\n        {}\n    ),\n    500: isHex.required()\n});\n\nconst isExistingColorInPalette = yup.string().test(\n    'is-existing-color-in-palette',\n    args => `Color \\`${args.value}\\` must be present in palette.`,\n    // eslint-disable-next-line func-names\n    function(value) {\n        return Boolean(this?.options?.context?.palette?.[value]);\n    }\n);\n\nconst CARD_VARIANT_SCHEMA = yup.object({\n    backgroundColor: isExistingColorInPalette.required(),\n    color: isExistingColorInPalette.required(),\n    backBackgroundColor: isExistingColorInPalette.required(),\n    backColor: isExistingColorInPalette.required()\n});\n\nexport const THEME_SCHEMA = yup.object({\n    palette: yup.lazy((colors = {}) =>\n        yup.object(\n            Object.keys(colors).reduce(\n                (acc, name) => ({\n                    ...acc,\n                    [name]: yup.object({\n                        ...SHADES_SCHEMA,\n                        contrastDefaultColor: yup.string().required()\n                    })\n                }),\n                {}\n            )\n        )),\n    miscellaneous: yup.object({\n        backgroundColor: isHex.required(),\n        color: isHex.required(),\n        spacing: yup.number().required(),\n        fontFamily: yup.array().of(yup.string())\n    }),\n    sizes: yup.object({\n        small: yup.string().required(),\n        medium: yup.string().required()\n    }),\n    components: yup.object({\n        banner: yup.object({\n            overlayColor: isExistingColorInPalette.required(),\n            imageSource: yup.string().required()\n        }),\n        cards: yup.object({\n            height: yup.number().required(),\n            width: yup.number().required(),\n            borderRadius: yup.number().required(),\n            default: CARD_VARIANT_SCHEMA,\n            variants: yup\n                .array()\n                .of(CARD_VARIANT_SCHEMA)\n                .required()\n        })\n    })\n});\n"]},"metadata":{},"sourceType":"module"}