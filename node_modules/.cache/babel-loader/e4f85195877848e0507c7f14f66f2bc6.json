{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/dream_job/dream_job_edit_dialog/dream_job_card_edit_dialog.jsx\";\nimport React, { useCallback, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFormikContext } from 'formik';\nimport uuid from 'uuid/v4';\nimport { ListItem } from '@wld/ui';\nimport { EditDialog } from '../../../../commons/edit_dialog/edit_dialog';\nimport { EditDialogField } from '../../../../commons/edit_dialog_field/edit_dialog_field';\nimport { CheckboxGroup } from '../../../../commons/checkbox_group/checkbox_group';\nimport { CONTRACT_TYPES } from '../../../../../utils/enums/contract_types/contract_types';\nimport { Select } from '../../../../commons/select/select';\nimport { JobPerks } from '../../../../../utils/enums/job_perks/job_perks_utils';\nimport { JobIssues } from '../../../../../utils/enums/job_issues/job_issues_utils';\nimport { SalaryField } from './salary_field/salary_field';\nimport { PerksField } from './perks_field/perks_field';\nimport { CurrentJobIssuesField } from './current_job_issues_field/current_job_issues_field';\nimport { LocationPlacesField } from './location_places_field/location_places_field';\nimport { REMOTE_FREQUENCY } from '../../../../../utils/enums/remote/remote_utils';\nimport { remoteSelectTranslations } from '../../../../../utils/enums/remote/remote_filter_translations';\nimport { contractTypesTranslations } from '../../../../../utils/enums/contract_types/contract_types_translations';\nimport { styles } from './dream_job_card_edit_dialog_styles';\nconst useStyles = createUseStyles(styles);\nconst checkboxGroupPerks = Object.values(JobPerks).filter(perk => perk !== JobPerks.OTHER);\nconst checkboxGroupCurrentJobIssues = Object.values(JobIssues).filter(key => key !== JobIssues.OTHER);\nconst DEFAULT_OBJECT = {};\n\nconst DreamJobCardEditDialogComponent = ({\n  open,\n  onClose,\n  data,\n  onEdit,\n  validationSchema,\n  isEditing\n}) => {\n  const {\n    formatMessage\n  } = useIntl();\n  const validationSchemaToPass = useMemo(() => validationSchema(formatMessage), [validationSchema]);\n  return /*#__PURE__*/React.createElement(EditDialog, {\n    open: open,\n    onClose: onClose,\n    data: data,\n    onEdit: onEdit,\n    isEditing: isEditing,\n    validationSchema: validationSchemaToPass,\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"DreamJob.editDialog.title\",\n      defaultMessage: \"Your dream job information\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, helpers => /*#__PURE__*/React.createElement(Content, {\n    helpers: helpers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }));\n};\n\nconst Content = ({\n  helpers: {\n    handleValueChange\n  }\n}) => {\n  var _values$perks, _values$currentJobIss;\n\n  const {\n    formatMessage\n  } = useIntl();\n  const classes = useStyles();\n  const {\n    values,\n    errors,\n    handleChange\n  } = useFormikContext();\n  const {\n    averageDailyRate,\n    places,\n    salary,\n    remoteFrequency,\n    contractTypes\n  } = values;\n  const perks = (_values$perks = values.perks) !== null && _values$perks !== void 0 ? _values$perks : DEFAULT_OBJECT;\n  const currentJobIssues = (_values$currentJobIss = values.currentJobIssues) !== null && _values$currentJobIss !== void 0 ? _values$currentJobIss : DEFAULT_OBJECT;\n  const addPlace = useCallback(place => handleValueChange('places')(places.concat({ ...place,\n    id: uuid()\n  })), [places]);\n  const removePlace = useCallback(id => () => handleValueChange('places')(places.filter(place => place.id !== id)), [places]);\n  const onChangePerks = useCallback(newPerks => handleValueChange('perks')({ ...newPerks.reduce((acc, perk) => {\n      acc[perk] = true;\n      return acc;\n    }, {}),\n    [JobPerks.OTHER]: perks[JobPerks.OTHER]\n  }), [perks]);\n  const onChangeCurrentJobIssues = useCallback(newCurrentJobIssues => handleValueChange('currentJobIssues')({ ...newCurrentJobIssues.reduce((acc, issue) => {\n      acc[issue] = true;\n      return acc;\n    }, {}),\n    [JobIssues.OTHER]: currentJobIssues[JobIssues.OTHER]\n  }), [currentJobIssues]);\n  const checkedPerks = useMemo(() => Object.entries(perks || {}).filter(([, value]) => value === true).map(([perk]) => perk), [perks]);\n  const checkedCurrentJobIssues = useMemo(() => Object.entries(currentJobIssues || {}).filter(([, value]) => value === true).map(([issue]) => issue), [currentJobIssues]);\n  const toggleOtherPerk = useCallback(() => handleValueChange('perks')({ ...perks,\n    [JobPerks.OTHER]: perks[JobPerks.OTHER] !== null ? null : ''\n  }), [perks]);\n  const toggleOtherCurrentJobIssue = useCallback(() => handleValueChange('currentJobIssues')({ ...currentJobIssues,\n    [JobIssues.OTHER]: currentJobIssues[JobIssues.OTHER] !== null ? null : ''\n  }), [currentJobIssues]);\n  const otherPerk = useMemo(() => {\n    var _perks$JobPerks$OTHER;\n\n    return (_perks$JobPerks$OTHER = perks[JobPerks.OTHER]) !== null && _perks$JobPerks$OTHER !== void 0 ? _perks$JobPerks$OTHER : null;\n  }, [perks]);\n  const otherCurrentJobIssue = useMemo(() => {\n    var _currentJobIssues$Job;\n\n    return (_currentJobIssues$Job = currentJobIssues[JobIssues.OTHER]) !== null && _currentJobIssues$Job !== void 0 ? _currentJobIssues$Job : null;\n  }, [currentJobIssues]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(LocationPlacesField, {\n    error: errors === null || errors === void 0 ? void 0 : errors.places,\n    places: places,\n    addPlace: addPlace,\n    removePlace: removePlace,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PerksField, {\n    error: errors === null || errors === void 0 ? void 0 : errors.perks,\n    checkboxGroupPerks: checkboxGroupPerks,\n    checkedPerks: checkedPerks,\n    onChange: onChangePerks,\n    toggleOtherPerk: toggleOtherPerk,\n    otherPerk: otherPerk,\n    handleChange: handleChange,\n    perks: perks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EditDialogField, {\n    error: errors.remoteFrequency,\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"DreamJob.editDialog.remoteFrequency.title\",\n      defaultMessage: \"Do you want to work remotely?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    fullWidth: true,\n    value: remoteFrequency,\n    onChange: handleChange('remoteFrequency'),\n    textFieldProps: {\n      variant: 'flat'\n    },\n    textFieldIconProps: {\n      className: classes.selectIcon\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, Object.values(REMOTE_FREQUENCY).map((elemValue, index) => /*#__PURE__*/React.createElement(ListItem, {\n    key: `remote_frequency_${elemValue}_${index}`,\n    value: elemValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }\n  }, formatMessage(remoteSelectTranslations[elemValue]))))), /*#__PURE__*/React.createElement(EditDialogField, {\n    error: errors.contractTypes,\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"DreamJob.editDialog.contractTypes.title\",\n      defaultMessage: \"What contract types are you currently looking for?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxGroup, {\n    values: CONTRACT_TYPES,\n    translations: contractTypesTranslations,\n    value: contractTypes,\n    name: \"contractTypes\",\n    variant: \"outlined\",\n    onChange: handleValueChange('contractTypes'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(SalaryField, {\n    salary: salary,\n    contractTypes: contractTypes,\n    averageDailyRate: averageDailyRate,\n    errors: errors,\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CurrentJobIssuesField, {\n    error: errors === null || errors === void 0 ? void 0 : errors.currentJobIssues,\n    checkboxGroupCurrentJobIssues: checkboxGroupCurrentJobIssues,\n    checkedCurrentJobIssues: checkedCurrentJobIssues,\n    onChange: onChangeCurrentJobIssues,\n    toggleOtherCurrentJobIssue: toggleOtherCurrentJobIssue,\n    otherCurrentJobIssue: otherCurrentJobIssue,\n    handleChange: handleChange,\n    currentJobIssues: currentJobIssues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport const DreamJobCardEditDialog = DreamJobCardEditDialogComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/dream_job/dream_job_edit_dialog/dream_job_card_edit_dialog.jsx"],"names":["React","useCallback","useMemo","createUseStyles","FormattedMessage","useIntl","useFormikContext","uuid","ListItem","EditDialog","EditDialogField","CheckboxGroup","CONTRACT_TYPES","Select","JobPerks","JobIssues","SalaryField","PerksField","CurrentJobIssuesField","LocationPlacesField","REMOTE_FREQUENCY","remoteSelectTranslations","contractTypesTranslations","styles","useStyles","checkboxGroupPerks","Object","values","filter","perk","OTHER","checkboxGroupCurrentJobIssues","key","DEFAULT_OBJECT","DreamJobCardEditDialogComponent","open","onClose","data","onEdit","validationSchema","isEditing","formatMessage","validationSchemaToPass","helpers","Content","handleValueChange","classes","errors","handleChange","averageDailyRate","places","salary","remoteFrequency","contractTypes","perks","currentJobIssues","addPlace","place","concat","id","removePlace","onChangePerks","newPerks","reduce","acc","onChangeCurrentJobIssues","newCurrentJobIssues","issue","checkedPerks","entries","value","map","checkedCurrentJobIssues","toggleOtherPerk","toggleOtherCurrentJobIssue","otherPerk","otherCurrentJobIssue","variant","className","selectIcon","elemValue","index","DreamJobCardEditDialog"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFormikContext } from 'formik';\nimport uuid from 'uuid/v4';\n\nimport { ListItem } from '@wld/ui';\n\nimport { EditDialog } from '../../../../commons/edit_dialog/edit_dialog';\nimport { EditDialogField } from '../../../../commons/edit_dialog_field/edit_dialog_field';\nimport { CheckboxGroup } from '../../../../commons/checkbox_group/checkbox_group';\n\nimport { CONTRACT_TYPES } from '../../../../../utils/enums/contract_types/contract_types';\n\nimport { Select } from '../../../../commons/select/select';\nimport { JobPerks } from '../../../../../utils/enums/job_perks/job_perks_utils';\nimport { JobIssues } from '../../../../../utils/enums/job_issues/job_issues_utils';\nimport { SalaryField } from './salary_field/salary_field';\n\nimport { PerksField } from './perks_field/perks_field';\nimport { CurrentJobIssuesField } from './current_job_issues_field/current_job_issues_field';\nimport { LocationPlacesField } from './location_places_field/location_places_field';\n\nimport { REMOTE_FREQUENCY } from '../../../../../utils/enums/remote/remote_utils';\nimport { remoteSelectTranslations } from '../../../../../utils/enums/remote/remote_filter_translations';\nimport { contractTypesTranslations } from '../../../../../utils/enums/contract_types/contract_types_translations';\n\nimport { styles } from './dream_job_card_edit_dialog_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst checkboxGroupPerks = Object.values(JobPerks).filter(perk => perk !== JobPerks.OTHER);\nconst checkboxGroupCurrentJobIssues = Object.values(JobIssues).filter(key => key !== JobIssues.OTHER);\n\nconst DEFAULT_OBJECT = {};\n\nconst DreamJobCardEditDialogComponent = ({ open, onClose, data, onEdit, validationSchema, isEditing }) => {\n    const { formatMessage } = useIntl();\n    const validationSchemaToPass = useMemo(() => validationSchema(formatMessage), [validationSchema]);\n\n    return (\n        <EditDialog\n            open={open}\n            onClose={onClose}\n            data={data}\n            onEdit={onEdit}\n            isEditing={isEditing}\n            validationSchema={validationSchemaToPass}\n            title={<FormattedMessage id=\"DreamJob.editDialog.title\" defaultMessage=\"Your dream job information\" />}\n        >\n            {helpers => <Content helpers={helpers} />}\n        </EditDialog>\n    );\n};\n\nconst Content = ({ helpers: { handleValueChange } }) => {\n    const { formatMessage } = useIntl();\n    const classes = useStyles();\n    const { values, errors, handleChange } = useFormikContext();\n    const { averageDailyRate, places, salary, remoteFrequency, contractTypes } = values;\n\n    const perks = values.perks ?? DEFAULT_OBJECT;\n    const currentJobIssues = values.currentJobIssues ?? DEFAULT_OBJECT;\n\n    const addPlace = useCallback(place => handleValueChange('places')(places.concat({ ...place, id: uuid() })), [\n        places\n    ]);\n\n    const removePlace = useCallback(id => () => handleValueChange('places')(places.filter(place => place.id !== id)), [\n        places\n    ]);\n\n    const onChangePerks = useCallback(\n        newPerks =>\n            handleValueChange('perks')({\n                ...newPerks.reduce((acc, perk) => {\n                    acc[perk] = true;\n                    return acc;\n                }, {}),\n                [JobPerks.OTHER]: perks[JobPerks.OTHER]\n            }),\n        [perks]\n    );\n\n    const onChangeCurrentJobIssues = useCallback(\n        newCurrentJobIssues =>\n            handleValueChange('currentJobIssues')({\n                ...newCurrentJobIssues.reduce((acc, issue) => {\n                    acc[issue] = true;\n                    return acc;\n                }, {}),\n                [JobIssues.OTHER]: currentJobIssues[JobIssues.OTHER]\n            }),\n        [currentJobIssues]\n    );\n\n    const checkedPerks = useMemo(\n        () =>\n            Object.entries(perks || {})\n                .filter(([, value]) => value === true)\n                .map(([perk]) => perk),\n        [perks]\n    );\n\n    const checkedCurrentJobIssues = useMemo(\n        () =>\n            Object.entries(currentJobIssues || {})\n                .filter(([, value]) => value === true)\n                .map(([issue]) => issue),\n        [currentJobIssues]\n    );\n\n    const toggleOtherPerk = useCallback(\n        () =>\n            handleValueChange('perks')({\n                ...perks,\n                [JobPerks.OTHER]: perks[JobPerks.OTHER] !== null ? null : ''\n            }),\n        [perks]\n    );\n\n    const toggleOtherCurrentJobIssue = useCallback(\n        () =>\n            handleValueChange('currentJobIssues')({\n                ...currentJobIssues,\n                [JobIssues.OTHER]: currentJobIssues[JobIssues.OTHER] !== null ? null : ''\n            }),\n        [currentJobIssues]\n    );\n\n    const otherPerk = useMemo(() => perks[JobPerks.OTHER] ?? null, [perks]);\n    const otherCurrentJobIssue = useMemo(() => currentJobIssues[JobIssues.OTHER] ?? null, [currentJobIssues]);\n    return (\n        <>\n            <LocationPlacesField error={errors?.places} places={places} addPlace={addPlace} removePlace={removePlace} />\n            <PerksField\n                error={errors?.perks}\n                checkboxGroupPerks={checkboxGroupPerks}\n                checkedPerks={checkedPerks}\n                onChange={onChangePerks}\n                toggleOtherPerk={toggleOtherPerk}\n                otherPerk={otherPerk}\n                handleChange={handleChange}\n                perks={perks}\n            />\n            <EditDialogField\n                error={errors.remoteFrequency}\n                title={\n                    <FormattedMessage\n                        id=\"DreamJob.editDialog.remoteFrequency.title\"\n                        defaultMessage=\"Do you want to work remotely?\"\n                    />\n                }\n            >\n                <Select\n                    fullWidth\n                    value={remoteFrequency}\n                    onChange={handleChange('remoteFrequency')}\n                    textFieldProps={{ variant: 'flat' }}\n                    textFieldIconProps={{ className: classes.selectIcon }}\n                >\n                    {Object.values(REMOTE_FREQUENCY).map((elemValue, index) => (\n                        <ListItem key={`remote_frequency_${elemValue}_${index}`} value={elemValue}>\n                            {formatMessage(remoteSelectTranslations[elemValue])}\n                        </ListItem>\n                    ))}\n                </Select>\n            </EditDialogField>\n            <EditDialogField\n                error={errors.contractTypes}\n                title={\n                    <FormattedMessage\n                        id=\"DreamJob.editDialog.contractTypes.title\"\n                        defaultMessage=\"What contract types are you currently looking for?\"\n                    />\n                }\n            >\n                <CheckboxGroup\n                    values={CONTRACT_TYPES}\n                    translations={contractTypesTranslations}\n                    value={contractTypes}\n                    name=\"contractTypes\"\n                    variant=\"outlined\"\n                    onChange={handleValueChange('contractTypes')}\n                />\n            </EditDialogField>\n            <SalaryField\n                salary={salary}\n                contractTypes={contractTypes}\n                averageDailyRate={averageDailyRate}\n                errors={errors}\n                handleChange={handleChange}\n            />\n            <CurrentJobIssuesField\n                error={errors?.currentJobIssues}\n                checkboxGroupCurrentJobIssues={checkboxGroupCurrentJobIssues}\n                checkedCurrentJobIssues={checkedCurrentJobIssues}\n                onChange={onChangeCurrentJobIssues}\n                toggleOtherCurrentJobIssue={toggleOtherCurrentJobIssue}\n                otherCurrentJobIssue={otherCurrentJobIssue}\n                handleChange={handleChange}\n                currentJobIssues={currentJobIssues}\n            />\n        </>\n    );\n};\n\nexport const DreamJobCardEditDialog = DreamJobCardEditDialogComponent;\n"]},"metadata":{},"sourceType":"module"}