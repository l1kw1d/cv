{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/search_gif_dialog/search_gifs_dialog.jsx\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { useDebounce } from 'use-debounce';\nimport { Dialog, DialogActions, DialogContent } from '@material-ui/core';\nimport { Button, TextField, Tooltip } from '@wld/ui';\nimport poweredByGiphy from '../../../assets/images/Poweredby_100px-White_VertText.png';\nimport { DialogTitle } from '../dialog/dialog_title/dialog_title';\nimport { LoadingSpinner } from '../loading_spinner/loading_spinner';\nimport { useGiphyResults } from '../../hooks/giphy/use_giphy_results';\nimport { styles } from './search_gifs_dialog_styles';\nconst useStyles = createUseStyles(styles);\n\nconst SearchGifsDialogComponent = ({\n  open,\n  onClose,\n  onSelect\n}) => {\n  const classes = useStyles();\n  const [query, setQuery] = useState('');\n  const [debouncedQuery] = useDebounce(query, 500);\n  const handleInputChange = useCallback(event => setQuery(event.target.value), []);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    classes: {\n      paper: classes.paper\n    },\n    open: open,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    classes: {\n      root: classes.title\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Gifs.searchdialog.title\",\n    defaultMessage: \"Search gifs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: poweredByGiphy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(DialogContent, {\n    classes: {\n      root: classes.content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    customClasses: {\n      container: classes.textField\n    },\n    fullWidth: true,\n    onChange: handleInputChange,\n    value: query,\n    variant: \"flat\",\n    placeholder: \"Burrito, development, etc...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Results, {\n    query: query,\n    debouncedQuery: debouncedQuery,\n    onSelect: onSelect,\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Main.lang.close\",\n    defaultMessage: \"Close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst Results = ({\n  query,\n  debouncedQuery,\n  onSelect,\n  classes\n}) => {\n  const {\n    gifs,\n    loading: loadingResults\n  } = useGiphyResults(debouncedQuery, 0, 3 * 3);\n  const loading = useMemo(() => loadingResults || query && query !== debouncedQuery, [query, debouncedQuery, loadingResults]);\n  const handleClick = useCallback((url, id, title) => () => {\n    if (typeof onSelect !== 'function') {\n      return;\n    }\n\n    onSelect({\n      url,\n      id,\n      title,\n      query\n    });\n  }, [onSelect, query]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, loading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }), !loading && gifs && debouncedQuery && gifs.map(({\n    id,\n    url,\n    title\n  }) => /*#__PURE__*/React.createElement(Tooltip, {\n    key: `giphy_item_${id}`,\n    title: \"Select this gif\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    key: `result_${id}`,\n    type: \"button\",\n    className: classes.imageContainer,\n    onClick: handleClick(url, id, title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.image,\n    src: url,\n    alt: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  })))));\n};\n\nexport const SearchGifsDialog = SearchGifsDialogComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/search_gif_dialog/search_gifs_dialog.jsx"],"names":["React","useCallback","useMemo","useState","FormattedMessage","createUseStyles","useDebounce","Dialog","DialogActions","DialogContent","Button","TextField","Tooltip","poweredByGiphy","DialogTitle","LoadingSpinner","useGiphyResults","styles","useStyles","SearchGifsDialogComponent","open","onClose","onSelect","classes","query","setQuery","debouncedQuery","handleInputChange","event","target","value","paper","root","title","content","container","textField","Results","gifs","loading","loadingResults","handleClick","url","id","results","map","imageContainer","image","SearchGifsDialog"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { useDebounce } from 'use-debounce';\n\nimport { Dialog, DialogActions, DialogContent } from '@material-ui/core';\nimport { Button, TextField, Tooltip } from '@wld/ui';\n\nimport poweredByGiphy from '../../../assets/images/Poweredby_100px-White_VertText.png';\nimport { DialogTitle } from '../dialog/dialog_title/dialog_title';\nimport { LoadingSpinner } from '../loading_spinner/loading_spinner';\n\nimport { useGiphyResults } from '../../hooks/giphy/use_giphy_results';\nimport { styles } from './search_gifs_dialog_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst SearchGifsDialogComponent = ({ open, onClose, onSelect }) => {\n    const classes = useStyles();\n    const [query, setQuery] = useState('');\n    const [debouncedQuery] = useDebounce(query, 500);\n\n    const handleInputChange = useCallback(event => setQuery(event.target.value), []);\n\n    return (\n        <Dialog\n            classes={{\n                paper: classes.paper\n            }}\n            open={open}\n            onClose={onClose}\n        >\n            <DialogTitle classes={{ root: classes.title }}>\n                <FormattedMessage id=\"Gifs.searchdialog.title\" defaultMessage=\"Search gifs\" />\n                <img src={poweredByGiphy} />\n            </DialogTitle>\n            <DialogContent\n                classes={{\n                    root: classes.content\n                }}\n            >\n                <TextField\n                    customClasses={{ container: classes.textField }}\n                    fullWidth\n                    onChange={handleInputChange}\n                    value={query}\n                    variant=\"flat\"\n                    placeholder=\"Burrito, development, etc...\"\n                />\n                <Results query={query} debouncedQuery={debouncedQuery} onSelect={onSelect} classes={classes} />\n            </DialogContent>\n            <DialogActions>\n                <Button size=\"small\" onClick={onClose}>\n                    <FormattedMessage id=\"Main.lang.close\" defaultMessage=\"Close\" />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nconst Results = ({ query, debouncedQuery, onSelect, classes }) => {\n    const { gifs, loading: loadingResults } = useGiphyResults(debouncedQuery, 0, 3 * 3);\n\n    const loading = useMemo(() => loadingResults || (query && query !== debouncedQuery), [\n        query,\n        debouncedQuery,\n        loadingResults\n    ]);\n\n    const handleClick = useCallback(\n        (url, id, title) => () => {\n            if (typeof onSelect !== 'function') {\n                return;\n            }\n            onSelect({ url, id, title, query });\n        },\n        [onSelect, query]\n    );\n\n    return (\n        <div className={classes.results}>\n            {loading && <LoadingSpinner />}\n            {!loading &&\n                gifs &&\n                debouncedQuery &&\n                gifs.map(({ id, url, title }) => (\n                    <Tooltip key={`giphy_item_${id}`} title=\"Select this gif\">\n                        <button\n                            key={`result_${id}`}\n                            type=\"button\"\n                            className={classes.imageContainer}\n                            onClick={handleClick(url, id, title)}\n                        >\n                            <img className={classes.image} src={url} alt={title} />\n                        </button>\n                    </Tooltip>\n                ))}\n        </div>\n    );\n};\n\nexport const SearchGifsDialog = SearchGifsDialogComponent;\n"]},"metadata":{},"sourceType":"module"}