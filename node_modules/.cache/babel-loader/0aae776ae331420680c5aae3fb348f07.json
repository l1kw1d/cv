{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/projects/project_dialog/project_dialog_content_images/project_dialog_content_images.jsx\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\nimport Carousel, { Modal, ModalGateway } from 'react-images';\nimport { ProjectDialogContentImage } from './project_dialog_content_image/project_dialog_content_image';\nimport { ProjectDialogContentAddImage } from './project_dialog_content_add_image/project_dialog_content_add_image';\nimport { PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_SPRING_PROPS } from './project_dialog_content_images_transitions_spring_props';\nimport { styles } from './project_dialog_content_images_styles';\nimport { useCardVariant } from '../../../../../hooks/profile_card_hooks/use_card_variant';\nimport { getColorsFromCardVariant, getHexFromPaletteColor } from '../../../../../../utils/styles/styles_utils';\nimport { hashCode } from '../../../../../../utils/string_utils';\nconst useStyles = createUseStyles(styles);\n\nconst ProjectDialogContentImagesComponent = ({\n  images = [],\n  isEditing\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [variant] = useCardVariant();\n  const [modalCarouselIndex, setModelCarouselIndex] = useState(null);\n  const views = useMemo(() => images.map(({\n    name,\n    url\n  }) => ({\n    caption: name,\n    src: url\n  })), [images]);\n  const handleImageClick = useCallback(index => () => {\n    if (isEditing) {\n      return;\n    }\n\n    setModelCarouselIndex(index);\n  }, [isEditing]);\n  const handleModalClose = useCallback(() => setModelCarouselIndex(null), []);\n  const transitions = useTransition(images, ({\n    url\n  }, index) => `project_image_${index}_${hashCode(url)}`, { ...PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_SPRING_PROPS,\n    ...(isEditing && {\n      immediate: true,\n      trail: 0\n    })\n  });\n  const navButtonStyles = useCallback(base => ({ ...base,\n    backgroundColor: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).backgroundColor),\n    boxShadow: '0 1px 6px rgba(0, 0, 0, 0.18)',\n    color: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).color),\n    '&:hover, &:active': {\n      backgroundColor: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).backgroundColor),\n      opacity: 1\n    },\n    '&:active': {\n      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.14)',\n      transform: 'scale(0.96)'\n    }\n  }), [theme, variant]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, isEditing && /*#__PURE__*/React.createElement(ProjectDialogContentAddImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 27\n    }\n  }), transitions.map(({\n    item,\n    key,\n    props\n  }, index) => /*#__PURE__*/React.createElement(ProjectDialogContentImage, {\n    key: key,\n    component: isEditing ? animated.button : animated.div,\n    style: props,\n    url: item.url,\n    name: item.name,\n    handleImageClick: handleImageClick(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(ModalGateway, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, modalCarouselIndex !== null && /*#__PURE__*/React.createElement(Modal, {\n    onClose: handleModalClose,\n    styles: {\n      blanket: base => ({ ...base,\n        zIndex: 2100\n      }),\n      positioner: base => ({ ...base,\n        zIndex: 2110\n      }),\n      dialog: base => ({ ...base,\n        zIndex: 2120,\n        fontFamily: 'Avenir Next'\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Carousel, {\n    views: views,\n    currentIndex: modalCarouselIndex,\n    styles: {\n      navigationNext: navButtonStyles,\n      navigationPrev: navButtonStyles\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport const ProjectDialogContentImages = ProjectDialogContentImagesComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/projects/project_dialog/project_dialog_content_images/project_dialog_content_images.jsx"],"names":["React","useCallback","useMemo","useState","createUseStyles","useTheme","animated","useTransition","Carousel","Modal","ModalGateway","ProjectDialogContentImage","ProjectDialogContentAddImage","PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_SPRING_PROPS","styles","useCardVariant","getColorsFromCardVariant","getHexFromPaletteColor","hashCode","useStyles","ProjectDialogContentImagesComponent","images","isEditing","classes","theme","variant","modalCarouselIndex","setModelCarouselIndex","views","map","name","url","caption","src","handleImageClick","index","handleModalClose","transitions","immediate","trail","navButtonStyles","base","backgroundColor","boxShadow","color","opacity","transform","container","item","key","props","button","div","blanket","zIndex","positioner","dialog","fontFamily","navigationNext","navigationPrev","ProjectDialogContentImages"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,QAAtC,QAAsD,OAAtD;AAEA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,WAA1C;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,cAAxC;AACA,OAAOC,QAAP,IAAmBC,KAAnB,EAA0BC,YAA1B,QAA8C,cAA9C;AAEA,SAASC,yBAAT,QAA0C,6DAA1C;AACA,SAASC,4BAAT,QAA6C,qEAA7C;AAEA,SAASC,sDAAT,QAAuE,0DAAvE;AAEA,SAASC,MAAT,QAAuB,wCAAvB;AACA,SAASC,cAAT,QAA+B,0DAA/B;AACA,SAASC,wBAAT,EAAmCC,sBAAnC,QAAiE,6CAAjE;AACA,SAASC,QAAT,QAAyB,sCAAzB;AAEA,MAAMC,SAAS,GAAGf,eAAe,CAACU,MAAD,CAAjC;;AAEA,MAAMM,mCAAmC,GAAG,CAAC;AAAEC,EAAAA,MAAM,GAAG,EAAX;AAAeC,EAAAA;AAAf,CAAD,KAAgC;AACxE,QAAMC,OAAO,GAAGJ,SAAS,EAAzB;AACA,QAAMK,KAAK,GAAGnB,QAAQ,EAAtB;AACA,QAAM,CAACoB,OAAD,IAAYV,cAAc,EAAhC;AACA,QAAM,CAACW,kBAAD,EAAqBC,qBAArB,IAA8CxB,QAAQ,CAAC,IAAD,CAA5D;AAEA,QAAMyB,KAAK,GAAG1B,OAAO,CAAC,MAAMmB,MAAM,CAACQ,GAAP,CAAW,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,MAAoB;AAAEC,IAAAA,OAAO,EAAEF,IAAX;AAAiBG,IAAAA,GAAG,EAAEF;AAAtB,GAApB,CAAX,CAAP,EAAqE,CAACV,MAAD,CAArE,CAArB;AAEA,QAAMa,gBAAgB,GAAGjC,WAAW,CAChCkC,KAAK,IAAI,MAAM;AACX,QAAIb,SAAJ,EAAe;AACX;AACH;;AACDK,IAAAA,qBAAqB,CAACQ,KAAD,CAArB;AACH,GAN+B,EAOhC,CAACb,SAAD,CAPgC,CAApC;AAUA,QAAMc,gBAAgB,GAAGnC,WAAW,CAAC,MAAM0B,qBAAqB,CAAC,IAAD,CAA5B,EAAoC,EAApC,CAApC;AAEA,QAAMU,WAAW,GAAG9B,aAAa,CAACc,MAAD,EAAS,CAAC;AAAEU,IAAAA;AAAF,GAAD,EAAUI,KAAV,KAAqB,iBAAgBA,KAAM,IAAGjB,QAAQ,CAACa,GAAD,CAAM,EAArE,EAAwE,EACrG,GAAGlB,sDADkG;AAErG,QAAIS,SAAS,IAAI;AACbgB,MAAAA,SAAS,EAAE,IADE;AAEbC,MAAAA,KAAK,EAAE;AAFM,KAAjB;AAFqG,GAAxE,CAAjC;AAQA,QAAMC,eAAe,GAAGvC,WAAW,CAC/BwC,IAAI,KAAK,EACL,GAAGA,IADE;AAELC,IAAAA,eAAe,EAAEzB,sBAAsB,CAACO,KAAD,EAAQR,wBAAwB,CAACQ,KAAD,EAAQC,OAAR,CAAxB,CAAyCiB,eAAjD,CAFlC;AAGLC,IAAAA,SAAS,EAAE,+BAHN;AAILC,IAAAA,KAAK,EAAE3B,sBAAsB,CAACO,KAAD,EAAQR,wBAAwB,CAACQ,KAAD,EAAQC,OAAR,CAAxB,CAAyCmB,KAAjD,CAJxB;AAKL,yBAAqB;AACjBF,MAAAA,eAAe,EAAEzB,sBAAsB,CACnCO,KADmC,EAEnCR,wBAAwB,CAACQ,KAAD,EAAQC,OAAR,CAAxB,CAAyCiB,eAFN,CADtB;AAKjBG,MAAAA,OAAO,EAAE;AALQ,KALhB;AAYL,gBAAY;AACRF,MAAAA,SAAS,EAAE,+BADH;AAERG,MAAAA,SAAS,EAAE;AAFH;AAZP,GAAL,CAD2B,EAkB/B,CAACtB,KAAD,EAAQC,OAAR,CAlB+B,CAAnC;AAqBA,sBACI;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACwB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKzB,SAAS,iBAAI,oBAAC,4BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlB,EAEKe,WAAW,CAACR,GAAZ,CAAgB,CAAC;AAAEmB,IAAAA,IAAF;AAAQC,IAAAA,GAAR;AAAaC,IAAAA;AAAb,GAAD,EAAuBf,KAAvB,kBACb,oBAAC,yBAAD;AACI,IAAA,GAAG,EAAEc,GADT;AAEI,IAAA,SAAS,EAAE3B,SAAS,GAAGhB,QAAQ,CAAC6C,MAAZ,GAAqB7C,QAAQ,CAAC8C,GAFtD;AAGI,IAAA,KAAK,EAAEF,KAHX;AAII,IAAA,GAAG,EAAEF,IAAI,CAACjB,GAJd;AAKI,IAAA,IAAI,EAAEiB,IAAI,CAAClB,IALf;AAMI,IAAA,gBAAgB,EAAEI,gBAAgB,CAACC,KAAD,CANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAFL,eAYI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,kBAAkB,KAAK,IAAvB,iBACG,oBAAC,KAAD;AACI,IAAA,OAAO,EAAEU,gBADb;AAEI,IAAA,MAAM,EAAE;AACJiB,MAAAA,OAAO,EAAEZ,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWa,QAAAA,MAAM,EAAE;AAAnB,OAAL,CADT;AAEJC,MAAAA,UAAU,EAAEd,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWa,QAAAA,MAAM,EAAE;AAAnB,OAAL,CAFZ;AAGJE,MAAAA,MAAM,EAAEf,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWa,QAAAA,MAAM,EAAE,IAAnB;AAAyBG,QAAAA,UAAU,EAAE;AAArC,OAAL;AAHR,KAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQI,oBAAC,QAAD;AACI,IAAA,KAAK,EAAE7B,KADX;AAEI,IAAA,YAAY,EAAEF,kBAFlB;AAGI,IAAA,MAAM,EAAE;AACJgC,MAAAA,cAAc,EAAElB,eADZ;AAEJmB,MAAAA,cAAc,EAAEnB;AAFZ,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CAFR,CAZJ,CADJ;AAoCH,CArFD;;AAuFA,OAAO,MAAMoB,0BAA0B,GAAGxC,mCAAnC","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\n\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\nimport Carousel, { Modal, ModalGateway } from 'react-images';\n\nimport { ProjectDialogContentImage } from './project_dialog_content_image/project_dialog_content_image';\nimport { ProjectDialogContentAddImage } from './project_dialog_content_add_image/project_dialog_content_add_image';\n\nimport { PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_SPRING_PROPS } from './project_dialog_content_images_transitions_spring_props';\n\nimport { styles } from './project_dialog_content_images_styles';\nimport { useCardVariant } from '../../../../../hooks/profile_card_hooks/use_card_variant';\nimport { getColorsFromCardVariant, getHexFromPaletteColor } from '../../../../../../utils/styles/styles_utils';\nimport { hashCode } from '../../../../../../utils/string_utils';\n\nconst useStyles = createUseStyles(styles);\n\nconst ProjectDialogContentImagesComponent = ({ images = [], isEditing }) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [variant] = useCardVariant();\n    const [modalCarouselIndex, setModelCarouselIndex] = useState(null);\n\n    const views = useMemo(() => images.map(({ name, url }) => ({ caption: name, src: url })), [images]);\n\n    const handleImageClick = useCallback(\n        index => () => {\n            if (isEditing) {\n                return;\n            }\n            setModelCarouselIndex(index);\n        },\n        [isEditing]\n    );\n\n    const handleModalClose = useCallback(() => setModelCarouselIndex(null), []);\n\n    const transitions = useTransition(images, ({ url }, index) => `project_image_${index}_${hashCode(url)}`, {\n        ...PROJECT_DIALOG_CONTENT_IMAGES_TRANSITIONS_SPRING_PROPS,\n        ...(isEditing && {\n            immediate: true,\n            trail: 0\n        })\n    });\n\n    const navButtonStyles = useCallback(\n        base => ({\n            ...base,\n            backgroundColor: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).backgroundColor),\n            boxShadow: '0 1px 6px rgba(0, 0, 0, 0.18)',\n            color: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).color),\n            '&:hover, &:active': {\n                backgroundColor: getHexFromPaletteColor(\n                    theme,\n                    getColorsFromCardVariant(theme, variant).backgroundColor\n                ),\n                opacity: 1\n            },\n            '&:active': {\n                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.14)',\n                transform: 'scale(0.96)'\n            }\n        }),\n        [theme, variant]\n    );\n\n    return (\n        <div className={classes.container}>\n            {isEditing && <ProjectDialogContentAddImage />}\n            {transitions.map(({ item, key, props }, index) => (\n                <ProjectDialogContentImage\n                    key={key}\n                    component={isEditing ? animated.button : animated.div}\n                    style={props}\n                    url={item.url}\n                    name={item.name}\n                    handleImageClick={handleImageClick(index)}\n                />\n            ))}\n            <ModalGateway>\n                {modalCarouselIndex !== null && (\n                    <Modal\n                        onClose={handleModalClose}\n                        styles={{\n                            blanket: base => ({ ...base, zIndex: 2100 }),\n                            positioner: base => ({ ...base, zIndex: 2110 }),\n                            dialog: base => ({ ...base, zIndex: 2120, fontFamily: 'Avenir Next' })\n                        }}\n                    >\n                        <Carousel\n                            views={views}\n                            currentIndex={modalCarouselIndex}\n                            styles={{\n                                navigationNext: navButtonStyles,\n                                navigationPrev: navButtonStyles\n                            }}\n                        />\n                    </Modal>\n                )}\n            </ModalGateway>\n        </div>\n    );\n};\n\nexport const ProjectDialogContentImages = ProjectDialogContentImagesComponent;\n"]},"metadata":{},"sourceType":"module"}