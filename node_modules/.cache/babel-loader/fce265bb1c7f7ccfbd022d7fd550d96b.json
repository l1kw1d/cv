{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/fields/contract_types/contract_types.jsx\";\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport capitalize from 'lodash';\nimport translations from './contract_types_translations';\nexport const ContractType = ({\n  contractTypes = []\n}) => {\n  const {\n    formatMessage\n  } = useIntl();\n  const contracts = [...contractTypes];\n  const lastContract = contracts.pop();\n\n  if (!lastContract) {\n    return null;\n  }\n\n  if (contracts.length <= 1) {\n    return /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Basics.Back.WorkContract.single\",\n      defaultMessage: 'Looking for a {contractType} contract',\n      values: {\n        contractType: capitalize(formatMessage(translations[lastContract] || translations.unknown))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Basics.Back.WorkContract.multi\",\n    defaultMessage: 'Looking for a {contracts} or {lastContract} contract',\n    values: {\n      lastContract: formatMessage(translations[lastContract]),\n      contracts: contracts.map(key => capitalize(formatMessage(translations[key] || translations.unknown))).join(', ')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  });\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/fields/contract_types/contract_types.jsx"],"names":["React","FormattedMessage","useIntl","capitalize","translations","ContractType","contractTypes","formatMessage","contracts","lastContract","pop","length","contractType","unknown","map","key","join"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,YAA1C;AACA,OAAOC,UAAP,MAAuB,QAAvB;AAEA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,aAAa,GAAG;AAAlB,CAAD,KAA4B;AACpD,QAAM;AAAEC,IAAAA;AAAF,MAAoBL,OAAO,EAAjC;AAEA,QAAMM,SAAS,GAAG,CAAC,GAAGF,aAAJ,CAAlB;AACA,QAAMG,YAAY,GAAGD,SAAS,CAACE,GAAV,EAArB;;AACA,MAAI,CAACD,YAAL,EAAmB;AACf,WAAO,IAAP;AACH;;AAED,MAAID,SAAS,CAACG,MAAV,IAAoB,CAAxB,EAA2B;AACvB,wBACI,oBAAC,gBAAD;AACI,MAAA,EAAE,EAAC,iCADP;AAEI,MAAA,cAAc,EAAE,uCAFpB;AAGI,MAAA,MAAM,EAAE;AAAEC,QAAAA,YAAY,EAAET,UAAU,CAACI,aAAa,CAACH,YAAY,CAACK,YAAD,CAAZ,IAA8BL,YAAY,CAACS,OAA5C,CAAd;AAA1B,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AACD,sBACI,oBAAC,gBAAD;AACI,IAAA,EAAE,EAAC,gCADP;AAEI,IAAA,cAAc,EAAE,sDAFpB;AAGI,IAAA,MAAM,EAAE;AACJJ,MAAAA,YAAY,EAAEF,aAAa,CAACH,YAAY,CAACK,YAAD,CAAb,CADvB;AAEJD,MAAAA,SAAS,EAAEA,SAAS,CACfM,GADM,CACFC,GAAG,IAAIZ,UAAU,CAACI,aAAa,CAACH,YAAY,CAACW,GAAD,CAAZ,IAAqBX,YAAY,CAACS,OAAnC,CAAd,CADf,EAENG,IAFM,CAED,IAFC;AAFP,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAYH,CA9BM","sourcesContent":["import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport capitalize from 'lodash';\n\nimport translations from './contract_types_translations';\n\nexport const ContractType = ({ contractTypes = [] }) => {\n    const { formatMessage } = useIntl();\n\n    const contracts = [...contractTypes];\n    const lastContract = contracts.pop();\n    if (!lastContract) {\n        return null;\n    }\n\n    if (contracts.length <= 1) {\n        return (\n            <FormattedMessage\n                id=\"Basics.Back.WorkContract.single\"\n                defaultMessage={'Looking for a {contractType} contract'}\n                values={{ contractType: capitalize(formatMessage(translations[lastContract] || translations.unknown)) }}\n            />\n        );\n    }\n    return (\n        <FormattedMessage\n            id=\"Basics.Back.WorkContract.multi\"\n            defaultMessage={'Looking for a {contracts} or {lastContract} contract'}\n            values={{\n                lastContract: formatMessage(translations[lastContract]),\n                contracts: contracts\n                    .map(key => capitalize(formatMessage(translations[key] || translations.unknown)))\n                    .join(', ')\n            }}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}