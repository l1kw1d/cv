{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/languages/languages_card.jsx\";\nimport React, { useCallback, useContext, useMemo } from 'react';\nimport { ProfileCard } from '../../../commons/profile_card/profile_card';\nimport { LanguagesFront } from './languages_front/languages_front';\nimport { LanguagesBack } from './languages_back/languages_back';\nimport { mapLanguagesFromJsonResume, mapLanguagesToJsonResume } from './data/mapping';\nimport { LanguagesCardEditDialog } from './languages_edit_dialog/languages_card_edit_dialog';\nimport { LanguageValidator, validateLanguagesComplete } from './data/validator';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { SIDES } from '../../../commons/profile_card/profile_card_side/side';\nimport { useMode } from '../../../hooks/use_mode';\n\nconst LanguagesCardComponent = ({\n  variant,\n  side\n}) => {\n  const [mode] = useMode();\n  const {\n    data,\n    isEditing,\n    onEdit\n  } = useContext(DeveloperProfileContext);\n  const mappedData = useMemo(() => mapLanguagesFromJsonResume(data), [data]);\n  const onDialogEdited = useCallback(editedData => {\n    onEdit(mapLanguagesToJsonResume(editedData));\n  }, [onEdit]);\n  const isComplete = useMemo(() => validateLanguagesComplete(mappedData), [mappedData]);\n  const currentSide = useMemo(() => {\n    if (!isComplete && !isEditing) {\n      return SIDES.FRONT;\n    }\n\n    return side;\n  }, [side, isComplete, isEditing]);\n\n  if (!isComplete && mode !== 'edit') {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ProfileCard, {\n    kind: \"languages\",\n    isEditingProfile: isEditing,\n    isComplete: isComplete,\n    data: mappedData,\n    sides: {\n      front: props => /*#__PURE__*/React.createElement(LanguagesFront, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 33\n        }\n      })),\n      back: props => /*#__PURE__*/React.createElement(LanguagesBack, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 32\n        }\n      }))\n    },\n    variant: variant,\n    side: currentSide,\n    editDialog: {\n      component: LanguagesCardEditDialog,\n      validationSchema: LanguageValidator,\n      onEdit: onDialogEdited\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  });\n};\n\nexport const LanguagesCard = LanguagesCardComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/languages/languages_card.jsx"],"names":["React","useCallback","useContext","useMemo","ProfileCard","LanguagesFront","LanguagesBack","mapLanguagesFromJsonResume","mapLanguagesToJsonResume","LanguagesCardEditDialog","LanguageValidator","validateLanguagesComplete","DeveloperProfileContext","SIDES","useMode","LanguagesCardComponent","variant","side","mode","data","isEditing","onEdit","mappedData","onDialogEdited","editedData","isComplete","currentSide","FRONT","front","props","back","component","validationSchema","LanguagesCard"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,OAAzC,QAAwD,OAAxD;AACA,SAASC,WAAT,QAA4B,4CAA5B;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,0BAAT,EAAqCC,wBAArC,QAAqE,gBAArE;AACA,SAASC,uBAAT,QAAwC,oDAAxC;AACA,SAASC,iBAAT,EAA4BC,yBAA5B,QAA6D,kBAA7D;AACA,SAASC,uBAAT,QAAwC,oCAAxC;AACA,SAASC,KAAT,QAAsB,sDAAtB;AACA,SAASC,OAAT,QAAwB,yBAAxB;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuB;AAClD,QAAM,CAACC,IAAD,IAASJ,OAAO,EAAtB;AACA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,MAA8BnB,UAAU,CAACU,uBAAD,CAA9C;AACA,QAAMU,UAAU,GAAGnB,OAAO,CAAC,MAAMI,0BAA0B,CAACY,IAAD,CAAjC,EAAyC,CAACA,IAAD,CAAzC,CAA1B;AAEA,QAAMI,cAAc,GAAGtB,WAAW,CAC9BuB,UAAU,IAAI;AACVH,IAAAA,MAAM,CAACb,wBAAwB,CAACgB,UAAD,CAAzB,CAAN;AACH,GAH6B,EAI9B,CAACH,MAAD,CAJ8B,CAAlC;AAOA,QAAMI,UAAU,GAAGtB,OAAO,CAAC,MAAMQ,yBAAyB,CAACW,UAAD,CAAhC,EAA8C,CAACA,UAAD,CAA9C,CAA1B;AAEA,QAAMI,WAAW,GAAGvB,OAAO,CAAC,MAAM;AAC9B,QAAI,CAACsB,UAAD,IAAe,CAACL,SAApB,EAA+B;AAC3B,aAAOP,KAAK,CAACc,KAAb;AACH;;AACD,WAAOV,IAAP;AACH,GAL0B,EAKxB,CAACA,IAAD,EAAOQ,UAAP,EAAmBL,SAAnB,CALwB,CAA3B;;AAOA,MAAI,CAACK,UAAD,IAAeP,IAAI,KAAK,MAA5B,EAAoC;AAChC,WAAO,IAAP;AACH;;AACD,sBACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,WADT;AAEI,IAAA,gBAAgB,EAAEE,SAFtB;AAGI,IAAA,UAAU,EAAEK,UAHhB;AAII,IAAA,IAAI,EAAEH,UAJV;AAKI,IAAA,KAAK,EAAE;AACHM,MAAAA,KAAK,EAAEC,KAAK,iBAAI,oBAAC,cAAD,oBAAoBA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADb;AAEHC,MAAAA,IAAI,EAAED,KAAK,iBAAI,oBAAC,aAAD,oBAAmBA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFZ,KALX;AASI,IAAA,OAAO,EAAEb,OATb;AAUI,IAAA,IAAI,EAAEU,WAVV;AAWI,IAAA,UAAU,EAAE;AACRK,MAAAA,SAAS,EAAEtB,uBADH;AAERuB,MAAAA,gBAAgB,EAAEtB,iBAFV;AAGRW,MAAAA,MAAM,EAAEE;AAHA,KAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAmBH,CA3CD;;AA6CA,OAAO,MAAMU,aAAa,GAAGlB,sBAAtB","sourcesContent":["import React, { useCallback, useContext, useMemo } from 'react';\nimport { ProfileCard } from '../../../commons/profile_card/profile_card';\nimport { LanguagesFront } from './languages_front/languages_front';\nimport { LanguagesBack } from './languages_back/languages_back';\nimport { mapLanguagesFromJsonResume, mapLanguagesToJsonResume } from './data/mapping';\nimport { LanguagesCardEditDialog } from './languages_edit_dialog/languages_card_edit_dialog';\nimport { LanguageValidator, validateLanguagesComplete } from './data/validator';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { SIDES } from '../../../commons/profile_card/profile_card_side/side';\nimport { useMode } from '../../../hooks/use_mode';\n\nconst LanguagesCardComponent = ({ variant, side }) => {\n    const [mode] = useMode();\n    const { data, isEditing, onEdit } = useContext(DeveloperProfileContext);\n    const mappedData = useMemo(() => mapLanguagesFromJsonResume(data), [data]);\n\n    const onDialogEdited = useCallback(\n        editedData => {\n            onEdit(mapLanguagesToJsonResume(editedData));\n        },\n        [onEdit]\n    );\n\n    const isComplete = useMemo(() => validateLanguagesComplete(mappedData), [mappedData]);\n\n    const currentSide = useMemo(() => {\n        if (!isComplete && !isEditing) {\n            return SIDES.FRONT;\n        }\n        return side;\n    }, [side, isComplete, isEditing]);\n\n    if (!isComplete && mode !== 'edit') {\n        return null;\n    }\n    return (\n        <ProfileCard\n            kind=\"languages\"\n            isEditingProfile={isEditing}\n            isComplete={isComplete}\n            data={mappedData}\n            sides={{\n                front: props => <LanguagesFront {...props} />,\n                back: props => <LanguagesBack {...props} />\n            }}\n            variant={variant}\n            side={currentSide}\n            editDialog={{\n                component: LanguagesCardEditDialog,\n                validationSchema: LanguageValidator,\n                onEdit: onDialogEdited\n            }}\n        />\n    );\n};\n\nexport const LanguagesCard = LanguagesCardComponent;\n"]},"metadata":{},"sourceType":"module"}