{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/gifs/gifs_edit_dialog/gifs_edit_form/gifs_edit_form.jsx\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { useFormikContext } from 'formik';\nimport keyBy from 'lodash/keyBy';\nimport capitalize from 'lodash/capitalize';\nimport omit from 'lodash/omit';\nimport uuid from 'uuid/v4';\nimport { arrayMove } from 'react-sortable-hoc';\nimport useMediaQuery from '@material-ui/core/useMediaQuery/useMediaQuery';\nimport { Typography } from '@wld/ui';\nimport { SearchGifsDialog } from '../../../../../commons/search_gif_dialog/search_gifs_dialog';\nimport { AddButtonDashed } from '../../../../../commons/add_button_dashed/add_button_dashed';\nimport { GifsSortableCards } from './gifs_sortable_cards/gifs_sortable_cards';\nimport { styles } from './gifs_edit_form_styles';\nconst useStyles = createUseStyles(styles);\n\nconst GifsEditFormComponent = ({\n  helpers: {\n    handleValueChange\n  }\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`);\n  const classes = useStyles();\n  const {\n    values: {\n      interests\n    },\n    errors: validationErrors\n  } = useFormikContext();\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const removeSelectedIndex = useCallback(() => setSelectedIndex(null), []);\n  const {\n    interests: errors\n  } = validationErrors || {};\n  const keyedValues = useMemo(() => keyBy(interests, ({\n    id\n  }) => id), [JSON.stringify(interests)]);\n  const interestChanged = useCallback((interestIndex, field, value) => {\n    handleValueChange(`interests[${interestIndex}].${field}`)(value);\n  }, []);\n  const interestDeleted = useCallback(id => {\n    handleValueChange('interests')(Object.values(omit(keyedValues, id)));\n  }, [JSON.stringify(keyedValues), JSON.stringify(interests)]);\n  const addInterest = useCallback(() => {\n    const id = uuid();\n    handleValueChange('interests')(interests.concat({\n      index: interests.length,\n      id\n    }));\n    setSelectedIndex(interests.length);\n  }, [JSON.stringify(interests)]);\n  const move = useCallback(({\n    oldIndex,\n    newIndex\n  }) => {\n    handleValueChange('interests')(arrayMove(interests, oldIndex, newIndex).map((data, index) => ({ ...data,\n      index\n    })));\n  }, [interests]);\n  const globalError = typeof errors === 'string' && errors;\n  const handleGifSelection = useCallback(({\n    url,\n    query\n  }) => {\n    interestChanged(selectedIndex, 'name', capitalize(query));\n    interestChanged(selectedIndex, 'gifUrl', url);\n    removeSelectedIndex();\n  }, [interestChanged, selectedIndex]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SearchGifsDialog, {\n    open: Boolean(selectedIndex !== null),\n    onClose: removeSelectedIndex,\n    onSelect: handleGifSelection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), globalError && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    variant: \"h4\",\n    component: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, globalError), isMobile && /*#__PURE__*/React.createElement(AddButtonDashed, {\n    classes: {\n      container: classes.addButtonDashed\n    },\n    onClick: addInterest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(GifsSortableCards, {\n    items: interests,\n    interestDeleted: interestDeleted,\n    interestChanged: interestChanged,\n    errors: errors,\n    onSortEnd: move,\n    setSelectedIndex: setSelectedIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), !isMobile && /*#__PURE__*/React.createElement(AddButtonDashed, {\n    classes: {\n      container: classes.addButtonDashed\n    },\n    onClick: addInterest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport const GifsEditForm = GifsEditFormComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/gifs/gifs_edit_dialog/gifs_edit_form/gifs_edit_form.jsx"],"names":["React","useCallback","useMemo","useState","createUseStyles","useTheme","useFormikContext","keyBy","capitalize","omit","uuid","arrayMove","useMediaQuery","Typography","SearchGifsDialog","AddButtonDashed","GifsSortableCards","styles","useStyles","GifsEditFormComponent","helpers","handleValueChange","theme","isMobile","screenSizes","small","classes","values","interests","errors","validationErrors","selectedIndex","setSelectedIndex","removeSelectedIndex","keyedValues","id","JSON","stringify","interestChanged","interestIndex","field","value","interestDeleted","Object","addInterest","concat","index","length","move","oldIndex","newIndex","map","data","globalError","handleGifSelection","url","query","Boolean","container","addButtonDashed","GifsEditForm"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\n\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { useFormikContext } from 'formik';\nimport keyBy from 'lodash/keyBy';\nimport capitalize from 'lodash/capitalize';\n\nimport omit from 'lodash/omit';\nimport uuid from 'uuid/v4';\nimport { arrayMove } from 'react-sortable-hoc';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery/useMediaQuery';\nimport { Typography } from '@wld/ui';\n\nimport { SearchGifsDialog } from '../../../../../commons/search_gif_dialog/search_gifs_dialog';\nimport { AddButtonDashed } from '../../../../../commons/add_button_dashed/add_button_dashed';\nimport { GifsSortableCards } from './gifs_sortable_cards/gifs_sortable_cards';\n\nimport { styles } from './gifs_edit_form_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst GifsEditFormComponent = ({ helpers: { handleValueChange } }) => {\n    const theme = useTheme();\n    const isMobile = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`);\n    const classes = useStyles();\n    const {\n        values: { interests },\n        errors: validationErrors\n    } = useFormikContext();\n\n    const [selectedIndex, setSelectedIndex] = useState(null);\n    const removeSelectedIndex = useCallback(() => setSelectedIndex(null), []);\n\n    const { interests: errors } = validationErrors || {};\n\n    const keyedValues = useMemo(() => keyBy(interests, ({ id }) => id), [JSON.stringify(interests)]);\n\n    const interestChanged = useCallback((interestIndex, field, value) => {\n        handleValueChange(`interests[${interestIndex}].${field}`)(value);\n    }, []);\n\n    const interestDeleted = useCallback(\n        id => {\n            handleValueChange('interests')(Object.values(omit(keyedValues, id)));\n        },\n        [JSON.stringify(keyedValues), JSON.stringify(interests)]\n    );\n\n    const addInterest = useCallback(() => {\n        const id = uuid();\n        handleValueChange('interests')(\n            interests.concat({\n                index: interests.length,\n                id\n            })\n        );\n\n        setSelectedIndex(interests.length);\n    }, [JSON.stringify(interests)]);\n\n    const move = useCallback(\n        ({ oldIndex, newIndex }) => {\n            handleValueChange('interests')(\n                arrayMove(interests, oldIndex, newIndex).map((data, index) => ({ ...data, index }))\n            );\n        },\n        [interests]\n    );\n\n    const globalError = typeof errors === 'string' && errors;\n\n    const handleGifSelection = useCallback(\n        ({ url, query }) => {\n            interestChanged(selectedIndex, 'name', capitalize(query));\n            interestChanged(selectedIndex, 'gifUrl', url);\n            removeSelectedIndex();\n        },\n        [interestChanged, selectedIndex]\n    );\n\n    return (\n        <>\n            <SearchGifsDialog\n                open={Boolean(selectedIndex !== null)}\n                onClose={removeSelectedIndex}\n                onSelect={handleGifSelection}\n            />\n            {globalError && (\n                <Typography color=\"danger\" variant=\"h4\" component=\"h4\">\n                    {globalError}\n                </Typography>\n            )}\n            {isMobile && (\n                <AddButtonDashed\n                    classes={{\n                        container: classes.addButtonDashed\n                    }}\n                    onClick={addInterest}\n                />\n            )}\n            <GifsSortableCards\n                items={interests}\n                interestDeleted={interestDeleted}\n                interestChanged={interestChanged}\n                errors={errors}\n                onSortEnd={move}\n                setSelectedIndex={setSelectedIndex}\n            />\n            {!isMobile && (\n                <AddButtonDashed\n                    classes={{\n                        container: classes.addButtonDashed\n                    }}\n                    onClick={addInterest}\n                />\n            )}\n        </>\n    );\n};\n\nexport const GifsEditForm = GifsEditFormComponent;\n"]},"metadata":{},"sourceType":"module"}