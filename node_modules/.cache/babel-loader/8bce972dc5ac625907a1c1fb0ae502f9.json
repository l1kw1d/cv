{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/edit_dialog/edit_dialog.jsx\";\nimport React, { useCallback } from 'react';\nimport cn from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { Formik, useFormikContext } from 'formik';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { Button, Tooltip } from '@wld/ui';\nimport { Dialog, DialogActions, DialogContent } from '@material-ui/core';\nimport { DialogTitle } from '../dialog/dialog_title/dialog_title';\nimport { styles } from './edit_dialog_styles';\nconst useStyles = createUseStyles(styles);\n\nconst EditDialogComponent = ({\n  open,\n  onClose,\n  fullScreen,\n  data,\n  onEdit,\n  children,\n  title = '✏️',\n  validationSchema,\n  isEditing,\n  classes: receivedClasses = {}\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    fullScreen: fullScreen || isMobile,\n    classes: {\n      paper: cn(classes.paper, receivedClasses.paper, fullScreen && classes.fullScreen)\n    },\n    open: open,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    validateOnChange: false,\n    initialValues: data,\n    onSubmit: newValues => onEdit(newValues),\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TitleContent, {\n    title: title,\n    fullScreen: fullScreen,\n    isMobile: isMobile,\n    onClose: onClose,\n    classes: classes,\n    receivedClasses: receivedClasses,\n    isEditing: isEditing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, children)));\n};\n\nconst TitleContent = ({\n  title,\n  fullScreen,\n  isMobile,\n  onClose,\n  children,\n  classes,\n  receivedClasses,\n  isEditing\n}) => {\n  const {\n    handleSubmit,\n    setFieldValue,\n    values\n  } = useFormikContext();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.titleContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, title), fullScreen && !isMobile && /*#__PURE__*/React.createElement(Actions, {\n    fullScreen: true,\n    onClose: onClose,\n    handleSubmit: handleSubmit,\n    classes: classes,\n    receivedClasses: receivedClasses,\n    isEditing: isEditing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Content, {\n    onClose: onClose,\n    handleSubmit: handleSubmit,\n    setFieldValue: setFieldValue,\n    values: values,\n    fullScreen: fullScreen,\n    isMobile: isMobile,\n    classes: classes,\n    receivedClasses: receivedClasses,\n    isEditing: isEditing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, children));\n};\n\nconst Content = ({\n  children,\n  onClose,\n  handleSubmit,\n  setFieldValue,\n  values,\n  fullScreen,\n  isMobile,\n  classes,\n  receivedClasses,\n  isEditing\n}) => {\n  const handleValueChange = useCallback(name => value => {\n    console.log(`[Edit Dialog] Setting field ${name} to value.`, {\n      value\n    });\n    return setFieldValue(name, value);\n  }, [setFieldValue]);\n  const toggleValue = useCallback(name => () => setFieldValue(name, !values[name]), [setFieldValue, values]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DialogContent, {\n    classes: {\n      root: cn(classes.content, receivedClasses.content)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, children({\n    handleValueChange,\n    toggleValue,\n    fullScreen,\n    isMobile\n  })), (!fullScreen || isMobile) && /*#__PURE__*/React.createElement(Actions, {\n    onClose: onClose,\n    handleSubmit: handleSubmit,\n    classes: classes,\n    receivedClasses: receivedClasses,\n    isEditing: isEditing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }));\n};\n\nconst Actions = ({\n  onClose,\n  handleSubmit,\n  fullScreen,\n  classes,\n  receivedClasses,\n  isEditing\n}) => /*#__PURE__*/React.createElement(DialogActions, {\n  classes: {\n    root: cn(classes.actions, receivedClasses.actions)\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Tooltip, {\n  title: /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"EditDialog.close.tooltip\",\n    defaultMessage: \"Any modification won't be saved!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 20\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  size: \"small\",\n  onClick: onClose,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(FormattedMessage, {\n  id: \"Main.lang.close\",\n  defaultMessage: \"Close\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 17\n  }\n}))), isEditing && /*#__PURE__*/React.createElement(Button, {\n  variant: fullScreen ? 'contained' : 'text',\n  type: \"submit\",\n  size: \"small\",\n  color: \"primary\",\n  onClick: handleSubmit,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(FormattedMessage, {\n  id: \"Main.lang.save\",\n  defaultMessage: \"Save\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 17\n  }\n})));\n\nexport const EditDialog = EditDialogComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/edit_dialog/edit_dialog.jsx"],"names":["React","useCallback","cn","FormattedMessage","createUseStyles","useTheme","Formik","useFormikContext","useMediaQuery","Button","Tooltip","Dialog","DialogActions","DialogContent","DialogTitle","styles","useStyles","EditDialogComponent","open","onClose","fullScreen","data","onEdit","children","title","validationSchema","isEditing","classes","receivedClasses","theme","isMobile","screenSizes","small","paper","newValues","TitleContent","handleSubmit","setFieldValue","values","titleContainer","Content","handleValueChange","name","value","console","log","toggleValue","root","content","Actions","actions","EditDialog"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\n\nimport cn from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { Formik, useFormikContext } from 'formik';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { Button, Tooltip } from '@wld/ui';\n\nimport { Dialog, DialogActions, DialogContent } from '@material-ui/core';\n\nimport { DialogTitle } from '../dialog/dialog_title/dialog_title';\n\nimport { styles } from './edit_dialog_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst EditDialogComponent = ({\n    open,\n    onClose,\n    fullScreen,\n    data,\n    onEdit,\n    children,\n    title = '✏️',\n    validationSchema,\n    isEditing,\n    classes: receivedClasses = {}\n}) => {\n    const classes = useStyles();\n    const theme = useTheme();\n    const isMobile = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`);\n\n    return (\n        <Dialog\n            fullScreen={fullScreen || isMobile}\n            classes={{\n                paper: cn(classes.paper, receivedClasses.paper, fullScreen && classes.fullScreen)\n            }}\n            open={open}\n            onClose={onClose}\n        >\n            <Formik\n                validateOnChange={false}\n                initialValues={data}\n                onSubmit={newValues => onEdit(newValues)}\n                validationSchema={validationSchema}\n            >\n                <TitleContent\n                    title={title}\n                    fullScreen={fullScreen}\n                    isMobile={isMobile}\n                    onClose={onClose}\n                    classes={classes}\n                    receivedClasses={receivedClasses}\n                    isEditing={isEditing}\n                >\n                    {children}\n                </TitleContent>\n            </Formik>\n        </Dialog>\n    );\n};\n\nconst TitleContent = ({ title, fullScreen, isMobile, onClose, children, classes, receivedClasses, isEditing }) => {\n    const { handleSubmit, setFieldValue, values } = useFormikContext();\n    return (\n        <>\n            <div className={classes.titleContainer}>\n                <DialogTitle>{title}</DialogTitle>\n                {fullScreen && !isMobile && (\n                    <Actions\n                        fullScreen\n                        onClose={onClose}\n                        handleSubmit={handleSubmit}\n                        classes={classes}\n                        receivedClasses={receivedClasses}\n                        isEditing={isEditing}\n                    />\n                )}\n            </div>\n            <Content\n                onClose={onClose}\n                handleSubmit={handleSubmit}\n                setFieldValue={setFieldValue}\n                values={values}\n                fullScreen={fullScreen}\n                isMobile={isMobile}\n                classes={classes}\n                receivedClasses={receivedClasses}\n                isEditing={isEditing}\n            >\n                {children}\n            </Content>\n        </>\n    );\n};\n\nconst Content = ({\n    children,\n    onClose,\n    handleSubmit,\n    setFieldValue,\n    values,\n    fullScreen,\n    isMobile,\n    classes,\n    receivedClasses,\n    isEditing\n}) => {\n    const handleValueChange = useCallback(\n        name => value => {\n            console.log(`[Edit Dialog] Setting field ${name} to value.`, { value });\n            return setFieldValue(name, value);\n        },\n        [setFieldValue]\n    );\n    const toggleValue = useCallback(name => () => setFieldValue(name, !values[name]), [setFieldValue, values]);\n\n    return (\n        <>\n            <DialogContent\n                classes={{\n                    root: cn(classes.content, receivedClasses.content)\n                }}\n            >\n                {children({ handleValueChange, toggleValue, fullScreen, isMobile })}\n            </DialogContent>\n            {(!fullScreen || isMobile) && (\n                <Actions\n                    onClose={onClose}\n                    handleSubmit={handleSubmit}\n                    classes={classes}\n                    receivedClasses={receivedClasses}\n                    isEditing={isEditing}\n                />\n            )}\n        </>\n    );\n};\n\nconst Actions = ({ onClose, handleSubmit, fullScreen, classes, receivedClasses, isEditing }) => (\n    <DialogActions\n        classes={{\n            root: cn(classes.actions, receivedClasses.actions)\n        }}\n    >\n        <Tooltip\n            title={<FormattedMessage id=\"EditDialog.close.tooltip\" defaultMessage=\"Any modification won't be saved!\" />}\n        >\n            <Button size=\"small\" onClick={onClose}>\n                <FormattedMessage id=\"Main.lang.close\" defaultMessage=\"Close\" />\n            </Button>\n        </Tooltip>\n        {isEditing && (\n            <Button\n                variant={fullScreen ? 'contained' : 'text'}\n                type=\"submit\"\n                size=\"small\"\n                color=\"primary\"\n                onClick={handleSubmit}\n            >\n                <FormattedMessage id=\"Main.lang.save\" defaultMessage=\"Save\" />\n            </Button>\n        )}\n    </DialogActions>\n);\n\nexport const EditDialog = EditDialogComponent;\n"]},"metadata":{},"sourceType":"module"}