{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/experiences/experiences_card.jsx\";\nimport React, { useCallback, useContext, useMemo } from 'react';\nimport { ProfileCard } from '../../../commons/profile_card/profile_card';\nimport { ExperiencesFront } from './experiences_front/experiences_front';\nimport { ExperiencesBack } from './experiences_back/experiences_back';\nimport { ExperiencesEditDialog } from './experiences_edit_dialog/experiences_edit_dialog';\nimport { validateWorkComplete, WorkValidator } from './data/validator';\nimport { mapWorkFromJsonResume, mapWorkToJsonResume } from './data/mapping';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { SIDES } from '../../../commons/profile_card/profile_card_side/side';\nimport { useMode } from '../../../hooks/use_mode';\n\nconst ExperiencesCardComponent = ({\n  variant,\n  side\n}) => {\n  const [mode] = useMode();\n  const {\n    data,\n    onEdit,\n    isEditing\n  } = useContext(DeveloperProfileContext);\n  const mappedData = useMemo(() => mapWorkFromJsonResume(data), [data]);\n  const onDialogEdited = useCallback(editedData => onEdit(mapWorkToJsonResume(editedData)), [onEdit]);\n  const isComplete = useMemo(() => validateWorkComplete(mappedData), [mappedData]);\n  const currentSide = useMemo(() => {\n    if (!isComplete && !isEditing) {\n      return SIDES.FRONT;\n    }\n\n    return side;\n  }, [side, isComplete, isEditing]);\n\n  if (!isComplete && mode !== 'edit') {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ProfileCard, {\n    kind: \"experience\",\n    isEditingProfile: isEditing,\n    isComplete: isComplete,\n    data: mappedData,\n    sides: {\n      front: props => /*#__PURE__*/React.createElement(ExperiencesFront, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 33\n        }\n      })),\n      back: props => /*#__PURE__*/React.createElement(ExperiencesBack, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 32\n        }\n      }))\n    },\n    editDialog: {\n      component: ExperiencesEditDialog,\n      validationSchema: WorkValidator,\n      onEdit: onDialogEdited\n    },\n    variant: variant,\n    side: currentSide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  });\n};\n\nexport const ExperiencesCard = ExperiencesCardComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/experiences/experiences_card.jsx"],"names":["React","useCallback","useContext","useMemo","ProfileCard","ExperiencesFront","ExperiencesBack","ExperiencesEditDialog","validateWorkComplete","WorkValidator","mapWorkFromJsonResume","mapWorkToJsonResume","DeveloperProfileContext","SIDES","useMode","ExperiencesCardComponent","variant","side","mode","data","onEdit","isEditing","mappedData","onDialogEdited","editedData","isComplete","currentSide","FRONT","front","props","back","component","validationSchema","ExperiencesCard"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,OAAzC,QAAwD,OAAxD;AAEA,SAASC,WAAT,QAA4B,4CAA5B;AACA,SAASC,gBAAT,QAAiC,uCAAjC;AACA,SAASC,eAAT,QAAgC,qCAAhC;AACA,SAASC,qBAAT,QAAsC,mDAAtC;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,kBAApD;AAEA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,gBAA3D;AACA,SAASC,uBAAT,QAAwC,oCAAxC;AACA,SAASC,KAAT,QAAsB,sDAAtB;AACA,SAASC,OAAT,QAAwB,yBAAxB;;AAEA,MAAMC,wBAAwB,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuB;AACpD,QAAM,CAACC,IAAD,IAASJ,OAAO,EAAtB;AACA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,MAA8BnB,UAAU,CAACU,uBAAD,CAA9C;AAEA,QAAMU,UAAU,GAAGnB,OAAO,CAAC,MAAMO,qBAAqB,CAACS,IAAD,CAA5B,EAAoC,CAACA,IAAD,CAApC,CAA1B;AAEA,QAAMI,cAAc,GAAGtB,WAAW,CAACuB,UAAU,IAAIJ,MAAM,CAACT,mBAAmB,CAACa,UAAD,CAApB,CAArB,EAAwD,CAACJ,MAAD,CAAxD,CAAlC;AAEA,QAAMK,UAAU,GAAGtB,OAAO,CAAC,MAAMK,oBAAoB,CAACc,UAAD,CAA3B,EAAyC,CAACA,UAAD,CAAzC,CAA1B;AAEA,QAAMI,WAAW,GAAGvB,OAAO,CAAC,MAAM;AAC9B,QAAI,CAACsB,UAAD,IAAe,CAACJ,SAApB,EAA+B;AAC3B,aAAOR,KAAK,CAACc,KAAb;AACH;;AACD,WAAOV,IAAP;AACH,GAL0B,EAKxB,CAACA,IAAD,EAAOQ,UAAP,EAAmBJ,SAAnB,CALwB,CAA3B;;AAOA,MAAI,CAACI,UAAD,IAAeP,IAAI,KAAK,MAA5B,EAAoC;AAChC,WAAO,IAAP;AACH;;AACD,sBACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,YADT;AAEI,IAAA,gBAAgB,EAAEG,SAFtB;AAGI,IAAA,UAAU,EAAEI,UAHhB;AAII,IAAA,IAAI,EAAEH,UAJV;AAKI,IAAA,KAAK,EAAE;AACHM,MAAAA,KAAK,EAAEC,KAAK,iBAAI,oBAAC,gBAAD,oBAAsBA,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADb;AAEHC,MAAAA,IAAI,EAAED,KAAK,iBAAI,oBAAC,eAAD,oBAAqBA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFZ,KALX;AASI,IAAA,UAAU,EAAE;AACRE,MAAAA,SAAS,EAAExB,qBADH;AAERyB,MAAAA,gBAAgB,EAAEvB,aAFV;AAGRW,MAAAA,MAAM,EAAEG;AAHA,KAThB;AAcI,IAAA,OAAO,EAAEP,OAdb;AAeI,IAAA,IAAI,EAAEU,WAfV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAmBH,CAvCD;;AAyCA,OAAO,MAAMO,eAAe,GAAGlB,wBAAxB","sourcesContent":["import React, { useCallback, useContext, useMemo } from 'react';\n\nimport { ProfileCard } from '../../../commons/profile_card/profile_card';\nimport { ExperiencesFront } from './experiences_front/experiences_front';\nimport { ExperiencesBack } from './experiences_back/experiences_back';\nimport { ExperiencesEditDialog } from './experiences_edit_dialog/experiences_edit_dialog';\nimport { validateWorkComplete, WorkValidator } from './data/validator';\n\nimport { mapWorkFromJsonResume, mapWorkToJsonResume } from './data/mapping';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { SIDES } from '../../../commons/profile_card/profile_card_side/side';\nimport { useMode } from '../../../hooks/use_mode';\n\nconst ExperiencesCardComponent = ({ variant, side }) => {\n    const [mode] = useMode();\n    const { data, onEdit, isEditing } = useContext(DeveloperProfileContext);\n\n    const mappedData = useMemo(() => mapWorkFromJsonResume(data), [data]);\n\n    const onDialogEdited = useCallback(editedData => onEdit(mapWorkToJsonResume(editedData)), [onEdit]);\n\n    const isComplete = useMemo(() => validateWorkComplete(mappedData), [mappedData]);\n\n    const currentSide = useMemo(() => {\n        if (!isComplete && !isEditing) {\n            return SIDES.FRONT;\n        }\n        return side;\n    }, [side, isComplete, isEditing]);\n\n    if (!isComplete && mode !== 'edit') {\n        return null;\n    }\n    return (\n        <ProfileCard\n            kind=\"experience\"\n            isEditingProfile={isEditing}\n            isComplete={isComplete}\n            data={mappedData}\n            sides={{\n                front: props => <ExperiencesFront {...props} />,\n                back: props => <ExperiencesBack {...props} />\n            }}\n            editDialog={{\n                component: ExperiencesEditDialog,\n                validationSchema: WorkValidator,\n                onEdit: onDialogEdited\n            }}\n            variant={variant}\n            side={currentSide}\n        />\n    );\n};\n\nexport const ExperiencesCard = ExperiencesCardComponent;\n"]},"metadata":{},"sourceType":"module"}