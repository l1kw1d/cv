{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/projects/project_dialog/project_dialog_content_images/project_dialog_content_image/project_dialog_content_image.jsx\";\nimport React, { useCallback } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\nimport { useFormikContext } from 'formik';\nimport { Tooltip } from '@wld/ui';\nimport { useIsEditing } from '../../../../../../hooks/use_is_editing';\nimport { useOpenerState } from '../../../../../../hooks/use_opener_state';\nimport { ReactComponent as DeleteIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../../../assets/icons/trash.svg\";\nimport { PROJECT_DIALOG_CONTENT_IMAGE_EDIT_LAYER_SPRING_PROPS } from './project_dialog_content_image_edit_layer_spring_props';\nimport { styles } from './project_dialog_content_image_styles';\nconst useStyles = createUseStyles(styles);\n\nconst ProjectDialogContentImageComponent = ({\n  component: Component = 'div',\n  url,\n  name,\n  style,\n  handleImageClick\n}) => {\n  const classes = useStyles();\n  const [isEditing] = useIsEditing();\n  const [showEditLayer, eventsHandlerElementProps] = useOpenerState();\n  const editLayerTransitions = useTransition(showEditLayer, item => `${item ? 'visible' : 'invisible'}_edit_layer`, PROJECT_DIALOG_CONTENT_IMAGE_EDIT_LAYER_SPRING_PROPS);\n  return /*#__PURE__*/React.createElement(Component, Object.assign({\n    className: classes.container,\n    style: style\n  }, isEditing && eventsHandlerElementProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Image, {\n    url: url,\n    name: name,\n    handleImageClick: handleImageClick,\n    isEditing: isEditing,\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), editLayerTransitions.map(({\n    item,\n    key,\n    props\n  }) => item && /*#__PURE__*/React.createElement(EditLayer, {\n    key: key,\n    style: props,\n    classes: classes,\n    url: url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 51\n    }\n  })));\n};\n\nconst Image = ({\n  url,\n  name,\n  handleImageClick,\n  isEditing,\n  classes\n}) => {\n  if (!isEditing) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: classes.button,\n      type: \"button\",\n      onClick: handleImageClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: classes.image,\n      src: url,\n      alt: `Project ${name}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.image,\n    src: url,\n    alt: `Project ${name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }\n  });\n};\n\nconst EditLayer = ({\n  style,\n  classes,\n  url\n}) => {\n  const {\n    setFieldValue,\n    values\n  } = useFormikContext();\n  const deleteImage = useCallback(() => {\n    setFieldValue('images', values.images.filter(({\n      url: urlToKeep\n    }) => url !== urlToKeep));\n  }, [setFieldValue, values.images]);\n  return /*#__PURE__*/React.createElement(animated.div, {\n    className: classes.editLayer,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Supprimer cette image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.deleteButton,\n    type: \"button\",\n    onClick: deleteImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    className: classes.deleteIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport const ProjectDialogContentImage = ProjectDialogContentImageComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/projects/project_dialog/project_dialog_content_images/project_dialog_content_image/project_dialog_content_image.jsx"],"names":["React","useCallback","createUseStyles","animated","useTransition","useFormikContext","Tooltip","useIsEditing","useOpenerState","PROJECT_DIALOG_CONTENT_IMAGE_EDIT_LAYER_SPRING_PROPS","styles","useStyles","ProjectDialogContentImageComponent","component","Component","url","name","style","handleImageClick","classes","isEditing","showEditLayer","eventsHandlerElementProps","editLayerTransitions","item","container","map","key","props","Image","button","image","EditLayer","setFieldValue","values","deleteImage","images","filter","urlToKeep","editLayer","deleteButton","deleteIcon","ProjectDialogContentImage"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\n\nimport { createUseStyles } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\n\nimport { useFormikContext } from 'formik';\nimport { Tooltip } from '@wld/ui';\n\nimport { useIsEditing } from '../../../../../../hooks/use_is_editing';\nimport { useOpenerState } from '../../../../../../hooks/use_opener_state';\n\nimport { ReactComponent as DeleteIcon } from '../../../../../../../assets/icons/trash.svg';\n\nimport { PROJECT_DIALOG_CONTENT_IMAGE_EDIT_LAYER_SPRING_PROPS } from './project_dialog_content_image_edit_layer_spring_props';\nimport { styles } from './project_dialog_content_image_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst ProjectDialogContentImageComponent = ({ component: Component = 'div', url, name, style, handleImageClick }) => {\n    const classes = useStyles();\n    const [isEditing] = useIsEditing();\n\n    const [showEditLayer, eventsHandlerElementProps] = useOpenerState();\n\n    const editLayerTransitions = useTransition(\n        showEditLayer,\n        item => `${item ? 'visible' : 'invisible'}_edit_layer`,\n        PROJECT_DIALOG_CONTENT_IMAGE_EDIT_LAYER_SPRING_PROPS\n    );\n\n    return (\n        <Component className={classes.container} style={style} {...(isEditing && eventsHandlerElementProps)}>\n            <Image url={url} name={name} handleImageClick={handleImageClick} isEditing={isEditing} classes={classes} />\n            {editLayerTransitions.map(\n                ({ item, key, props }) => item && <EditLayer key={key} style={props} classes={classes} url={url} />\n            )}\n        </Component>\n    );\n};\n\nconst Image = ({ url, name, handleImageClick, isEditing, classes }) => {\n    if (!isEditing) {\n        return (\n            <button className={classes.button} type=\"button\" onClick={handleImageClick}>\n                <img className={classes.image} src={url} alt={`Project ${name}`} />\n            </button>\n        );\n    }\n    return <img className={classes.image} src={url} alt={`Project ${name}`} />;\n};\n\nconst EditLayer = ({ style, classes, url }) => {\n    const { setFieldValue, values } = useFormikContext();\n\n    const deleteImage = useCallback(() => {\n        setFieldValue(\n            'images',\n            values.images.filter(({ url: urlToKeep }) => url !== urlToKeep)\n        );\n    }, [setFieldValue, values.images]);\n\n    return (\n        <animated.div className={classes.editLayer} style={style}>\n            <Tooltip title=\"Supprimer cette image\">\n                <button className={classes.deleteButton} type=\"button\" onClick={deleteImage}>\n                    <DeleteIcon className={classes.deleteIcon} />\n                </button>\n            </Tooltip>\n        </animated.div>\n    );\n};\n\nexport const ProjectDialogContentImage = ProjectDialogContentImageComponent;\n"]},"metadata":{},"sourceType":"module"}