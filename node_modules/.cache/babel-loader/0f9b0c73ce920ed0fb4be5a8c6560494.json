{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/dream_job/dream_job_edit_dialog/perks_field/perks_field.jsx\";\nimport React from 'react';\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { TextField, Typography } from '@wld/ui';\nimport { CheckboxGroup } from '../../../../../commons/checkbox_group/checkbox_group';\nimport { CheckboxField } from '../../../../../commons/checkbox_field/checkbox_group';\nimport { JobPerks } from '../../../../../../utils/enums/job_perks/job_perks_utils';\nimport { EditDialogField } from '../../../../../commons/edit_dialog_field/edit_dialog_field';\nimport { jobPerksTranslations } from '../../../../../../utils/enums/job_perks/job_perks_translations';\nimport { PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_SPRING_PROPS } from './perks_field_transitions_spring_props';\nimport { styles } from './perks_field_styles';\nconst useStyles = createUseStyles(styles);\n\nconst PerksFieldComponent = ({\n  error,\n  checkboxGroupPerks,\n  checkedPerks,\n  onChange,\n  toggleOtherPerk,\n  otherPerk,\n  handleChange,\n  perks\n}) => {\n  const classes = useStyles();\n  const {\n    formatMessage\n  } = useIntl();\n  const transitions = useTransition(otherPerk !== null, item => `other_field_${item ? 'visible' : 'invisible'}`, { ...PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_SPRING_PROPS,\n    unique: true\n  });\n  return /*#__PURE__*/React.createElement(EditDialogField, {\n    error: error,\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"DreamJob.editDialog.perks.title\",\n      defaultMessage: \"What perks are important to you ?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxGroup, {\n    rows: 2,\n    values: checkboxGroupPerks,\n    translations: jobPerksTranslations,\n    value: checkedPerks,\n    name: \"perks\",\n    variant: \"outlined\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.othersCheckbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxField, {\n    title: /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 28\n      }\n    }, formatMessage(jobPerksTranslations.others)),\n    onClick: toggleOtherPerk,\n    checked: otherPerk !== null,\n    variant: \"outlined\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  })), transitions.map(({\n    item,\n    key,\n    props\n  }) => item && /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    key: key,\n    containerElement: animated.div,\n    customClasses: {\n      container: cn(classes.textField, classes.otherTextField)\n    },\n    onChange: handleChange,\n    name: `perks[${JobPerks.OTHER}]`,\n    value: perks[JobPerks.OTHER],\n    variant: \"flat\",\n    containerProps: {\n      style: props\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  })));\n};\n\nexport const PerksField = PerksFieldComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/dream_job/dream_job_edit_dialog/perks_field/perks_field.jsx"],"names":["React","cn","createUseStyles","animated","useTransition","FormattedMessage","useIntl","TextField","Typography","CheckboxGroup","CheckboxField","JobPerks","EditDialogField","jobPerksTranslations","PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_SPRING_PROPS","styles","useStyles","PerksFieldComponent","error","checkboxGroupPerks","checkedPerks","onChange","toggleOtherPerk","otherPerk","handleChange","perks","classes","formatMessage","transitions","item","unique","othersCheckbox","others","map","key","props","div","container","textField","otherTextField","OTHER","style","PerksField"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { TextField, Typography } from '@wld/ui';\nimport { CheckboxGroup } from '../../../../../commons/checkbox_group/checkbox_group';\nimport { CheckboxField } from '../../../../../commons/checkbox_field/checkbox_group';\nimport { JobPerks } from '../../../../../../utils/enums/job_perks/job_perks_utils';\nimport { EditDialogField } from '../../../../../commons/edit_dialog_field/edit_dialog_field';\n\nimport { jobPerksTranslations } from '../../../../../../utils/enums/job_perks/job_perks_translations';\n\nimport { PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_SPRING_PROPS } from './perks_field_transitions_spring_props';\n\nimport { styles } from './perks_field_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst PerksFieldComponent = ({\n    error,\n    checkboxGroupPerks,\n    checkedPerks,\n    onChange,\n    toggleOtherPerk,\n    otherPerk,\n    handleChange,\n    perks\n}) => {\n    const classes = useStyles();\n    const { formatMessage } = useIntl();\n\n    const transitions = useTransition(otherPerk !== null, item => `other_field_${item ? 'visible' : 'invisible'}`, {\n        ...PERKS_FIELD_OTHER_TEXTFIELD_TRANSITIONS_SPRING_PROPS,\n        unique: true\n    });\n\n    return (\n        <EditDialogField\n            error={error}\n            title={\n                <FormattedMessage\n                    id=\"DreamJob.editDialog.perks.title\"\n                    defaultMessage=\"What perks are important to you ?\"\n                />\n            }\n        >\n            <CheckboxGroup\n                rows={2}\n                values={checkboxGroupPerks}\n                translations={jobPerksTranslations}\n                value={checkedPerks}\n                name=\"perks\"\n                variant=\"outlined\"\n                onChange={onChange}\n            />\n            <div className={classes.othersCheckbox}>\n                <CheckboxField\n                    title={<Typography>{formatMessage(jobPerksTranslations.others)}</Typography>}\n                    onClick={toggleOtherPerk}\n                    checked={otherPerk !== null}\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                />\n            </div>\n            {transitions.map(\n                ({ item, key, props }) =>\n                    item && (\n                        <TextField\n                            fullWidth\n                            key={key}\n                            containerElement={animated.div}\n                            customClasses={{ container: cn(classes.textField, classes.otherTextField) }}\n                            onChange={handleChange}\n                            name={`perks[${JobPerks.OTHER}]`}\n                            value={perks[JobPerks.OTHER]}\n                            variant=\"flat\"\n                            containerProps={{ style: props }}\n                        />\n                    )\n            )}\n        </EditDialogField>\n    );\n};\n\nexport const PerksField = PerksFieldComponent;\n"]},"metadata":{},"sourceType":"module"}