{"ast":null,"code":"import get from 'lodash/get';\n\nconst hexToRgb = hex => {\n  let c;\n\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split('');\n\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n\n    c = `0x${c.join('')}`; // eslint-disable-next-line no-bitwise\n\n    return [c >> 16 & 255, c >> 8 & 255, c & 255];\n  }\n\n  throw new Error('Bad Hex');\n};\n\nconst THEME_TRANSFORMS = Object.freeze({\n  palette: colors => Object.entries(colors).reduce((colorsAcc, [colorName, shades]) => {\n    const colorAccumulator = colorsAcc;\n    colorAccumulator[colorName] = { ...shades,\n      rgbShades: Object.entries(shades).reduce((shadesAcc, [shade, shadeValue]) => {\n        if (Number.isNaN(parseInt(shade, 10))) {\n          return shadesAcc;\n        }\n\n        const shadesAccumulator = shadesAcc;\n        shadesAccumulator[shade] = hexToRgb(shadeValue);\n        return shadesAccumulator;\n      }, {})\n    };\n    return colorAccumulator;\n  }, {})\n});\nexport const transformTheme = theme => Object.entries(THEME_TRANSFORMS).reduce((acc, [path, transform]) => {\n  acc[path] = transform(get(theme, path));\n  return acc;\n}, theme);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/utils/styles/theme/theme_transforms.js"],"names":["get","hexToRgb","hex","c","test","substring","split","length","join","Error","THEME_TRANSFORMS","Object","freeze","palette","colors","entries","reduce","colorsAcc","colorName","shades","colorAccumulator","rgbShades","shadesAcc","shade","shadeValue","Number","isNaN","parseInt","shadesAccumulator","transformTheme","theme","acc","path","transform"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;;AAEA,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AACpB,MAAIC,CAAJ;;AACA,MAAI,2BAA2BC,IAA3B,CAAgCF,GAAhC,CAAJ,EAA0C;AACtCC,IAAAA,CAAC,GAAGD,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,EAAvB,CAAJ;;AACA,QAAIH,CAAC,CAACI,MAAF,KAAa,CAAjB,EAAoB;AAChBJ,MAAAA,CAAC,GAAG,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,EAAmBA,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EAA+BA,CAAC,CAAC,CAAD,CAAhC,CAAJ;AACH;;AACDA,IAAAA,CAAC,GAAI,KAAIA,CAAC,CAACK,IAAF,CAAO,EAAP,CAAW,EAApB,CALsC,CAMtC;;AACA,WAAO,CAAEL,CAAC,IAAI,EAAN,GAAY,GAAb,EAAmBA,CAAC,IAAI,CAAN,GAAW,GAA7B,EAAkCA,CAAC,GAAG,GAAtC,CAAP;AACH;;AACD,QAAM,IAAIM,KAAJ,CAAU,SAAV,CAAN;AACH,CAZD;;AAcA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc;AACnCC,EAAAA,OAAO,EAAEC,MAAM,IACXH,MAAM,CAACI,OAAP,CAAeD,MAAf,EAAuBE,MAAvB,CAA8B,CAACC,SAAD,EAAY,CAACC,SAAD,EAAYC,MAAZ,CAAZ,KAAoC;AAC9D,UAAMC,gBAAgB,GAAGH,SAAzB;AACAG,IAAAA,gBAAgB,CAACF,SAAD,CAAhB,GAA8B,EAC1B,GAAGC,MADuB;AAE1BE,MAAAA,SAAS,EAAEV,MAAM,CAACI,OAAP,CAAeI,MAAf,EAAuBH,MAAvB,CAA8B,CAACM,SAAD,EAAY,CAACC,KAAD,EAAQC,UAAR,CAAZ,KAAoC;AACzE,YAAIC,MAAM,CAACC,KAAP,CAAaC,QAAQ,CAACJ,KAAD,EAAQ,EAAR,CAArB,CAAJ,EAAuC;AACnC,iBAAOD,SAAP;AACH;;AACD,cAAMM,iBAAiB,GAAGN,SAA1B;AACAM,QAAAA,iBAAiB,CAACL,KAAD,CAAjB,GAA2BtB,QAAQ,CAACuB,UAAD,CAAnC;AACA,eAAOI,iBAAP;AACH,OAPU,EAOR,EAPQ;AAFe,KAA9B;AAWA,WAAOR,gBAAP;AACH,GAdD,EAcG,EAdH;AAF+B,CAAd,CAAzB;AAmBA,OAAO,MAAMS,cAAc,GAAGC,KAAK,IAC/BnB,MAAM,CAACI,OAAP,CAAeL,gBAAf,EAAiCM,MAAjC,CAAwC,CAACe,GAAD,EAAM,CAACC,IAAD,EAAOC,SAAP,CAAN,KAA4B;AAChEF,EAAAA,GAAG,CAACC,IAAD,CAAH,GAAYC,SAAS,CAACjC,GAAG,CAAC8B,KAAD,EAAQE,IAAR,CAAJ,CAArB;AACA,SAAOD,GAAP;AACH,CAHD,EAGGD,KAHH,CADG","sourcesContent":["import get from 'lodash/get';\n\nconst hexToRgb = hex => {\n    let c;\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        c = hex.substring(1).split('');\n        if (c.length === 3) {\n            c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n        }\n        c = `0x${c.join('')}`;\n        // eslint-disable-next-line no-bitwise\n        return [(c >> 16) & 255, (c >> 8) & 255, c & 255];\n    }\n    throw new Error('Bad Hex');\n};\n\nconst THEME_TRANSFORMS = Object.freeze({\n    palette: colors =>\n        Object.entries(colors).reduce((colorsAcc, [colorName, shades]) => {\n            const colorAccumulator = colorsAcc;\n            colorAccumulator[colorName] = {\n                ...shades,\n                rgbShades: Object.entries(shades).reduce((shadesAcc, [shade, shadeValue]) => {\n                    if (Number.isNaN(parseInt(shade, 10))) {\n                        return shadesAcc;\n                    }\n                    const shadesAccumulator = shadesAcc;\n                    shadesAccumulator[shade] = hexToRgb(shadeValue);\n                    return shadesAccumulator;\n                }, {})\n            };\n            return colorAccumulator;\n        }, {})\n});\n\nexport const transformTheme = theme =>\n    Object.entries(THEME_TRANSFORMS).reduce((acc, [path, transform]) => {\n        acc[path] = transform(get(theme, path));\n        return acc;\n    }, theme);\n"]},"metadata":{},"sourceType":"module"}