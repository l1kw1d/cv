{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/location_field/location_field.jsx\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { useIntl } from 'react-intl';\nimport { List, ListItem, PopperCard, TextField, Typography } from '@wld/ui';\nimport { useGoogleMapsPredictions } from '../../hooks/location/use_google_maps_predictions';\nimport { styles } from './location_field_style';\nimport { translations } from './location_field_translations';\nconst useStyles = createUseStyles(styles);\n\nconst LocationFieldComponent = ({\n  variant,\n  onLocationSelected,\n  value,\n  clearOnSelect,\n  onChange,\n  fullWidth,\n  classes: receivedClasses = {}\n}) => {\n  const classes = useStyles();\n  const {\n    locale,\n    formatMessage\n  } = useIntl();\n  const inputRef = useRef();\n  const [input, setInput] = useState(value);\n  const [preventBlur, setPreventBlur] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const {\n    predictions\n  } = useGoogleMapsPredictions(input);\n  useEffect(() => {\n    setInput(value);\n  }, [value]);\n  const clear = useCallback(() => setInput(''), []);\n  const handleChange = useCallback(event => {\n    setInput(event.target.value);\n\n    if (typeof onChange === 'function') {\n      event.persist();\n      onChange(event);\n    }\n  }, [onChange, onLocationSelected]);\n  const onPredictionSelected = useCallback((placeId, description) => {\n    if (typeof onLocationSelected === 'function') {\n      onLocationSelected({\n        name: description,\n        placeId,\n        locale\n      });\n    }\n\n    setIsFocused(false);\n    setInput('');\n  }, [locale, onLocationSelected]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cn(classes.container, receivedClasses.container),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: fullWidth,\n    className: classes.input,\n    onClick: e => e.target && e.target.select && e.target.select(),\n    value: input,\n    onChange: handleChange,\n    placeholder: formatMessage(translations.placeholder),\n    onBlur: () => {\n      if (!preventBlur) {\n        setIsFocused(false);\n      }\n    },\n    onFocus: () => setIsFocused(true),\n    variant: variant || 'outlined',\n    label: formatMessage(translations.title),\n    containerRef: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), isFocused && /*#__PURE__*/React.createElement(PredictionsList, Object.assign({\n    setPreventBlur: setPreventBlur,\n    input: inputRef.current\n  }, {\n    predictions,\n    classes,\n    onPredictionSelected,\n    locale,\n    setIsFocused,\n    setInput,\n    clear,\n    clearOnSelect\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  })));\n};\n\nconst PredictionsList = ({\n  predictions = [],\n  setPreventBlur,\n  input,\n  onPredictionSelected,\n  classes,\n  setInput\n}) => {\n  const onMouseUp = useCallback(() => {\n    setPreventBlur(false);\n\n    if (input && input.focus) {\n      input.focus();\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(PopperCard, {\n    open: true,\n    anchorElement: input,\n    customClasses: {\n      popper: classes.popperCard\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, predictions.filter(item => item).map(({\n    description,\n    place_id: placeId\n  }) => /*#__PURE__*/React.createElement(ListItem, {\n    key: `prediction_${placeId}`,\n    onMouseDown: () => setPreventBlur(true),\n    onMouseUp: onMouseUp,\n    onClick: () => {\n      if (!placeId) {\n        return;\n      }\n\n      setInput(description);\n      onPredictionSelected(placeId, description);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, description || '')))));\n};\n\nexport const LocationField = LocationFieldComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/location_field/location_field.jsx"],"names":["React","useCallback","useEffect","useRef","useState","cn","createUseStyles","useIntl","List","ListItem","PopperCard","TextField","Typography","useGoogleMapsPredictions","styles","translations","useStyles","LocationFieldComponent","variant","onLocationSelected","value","clearOnSelect","onChange","fullWidth","classes","receivedClasses","locale","formatMessage","inputRef","input","setInput","preventBlur","setPreventBlur","isFocused","setIsFocused","predictions","clear","handleChange","event","target","persist","onPredictionSelected","placeId","description","name","container","e","select","placeholder","title","current","PredictionsList","onMouseUp","focus","popper","popperCard","filter","item","map","place_id","LocationField"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { useIntl } from 'react-intl';\n\nimport { List, ListItem, PopperCard, TextField, Typography } from '@wld/ui';\n\nimport { useGoogleMapsPredictions } from '../../hooks/location/use_google_maps_predictions';\n\nimport { styles } from './location_field_style';\nimport { translations } from './location_field_translations';\n\nconst useStyles = createUseStyles(styles);\n\nconst LocationFieldComponent = ({\n    variant,\n    onLocationSelected,\n    value,\n    clearOnSelect,\n    onChange,\n    fullWidth,\n    classes: receivedClasses = {}\n}) => {\n    const classes = useStyles();\n    const { locale, formatMessage } = useIntl();\n    const inputRef = useRef();\n    const [input, setInput] = useState(value);\n    const [preventBlur, setPreventBlur] = useState(false);\n    const [isFocused, setIsFocused] = useState(false);\n    const { predictions } = useGoogleMapsPredictions(input);\n\n    useEffect(() => {\n        setInput(value);\n    }, [value]);\n\n    const clear = useCallback(() => setInput(''), []);\n\n    const handleChange = useCallback(\n        event => {\n            setInput(event.target.value);\n            if (typeof onChange === 'function') {\n                event.persist();\n                onChange(event);\n            }\n        },\n        [onChange, onLocationSelected]\n    );\n\n    const onPredictionSelected = useCallback(\n        (placeId, description) => {\n            if (typeof onLocationSelected === 'function') {\n                onLocationSelected({ name: description, placeId, locale });\n            }\n            setIsFocused(false);\n            setInput('');\n        },\n        [locale, onLocationSelected]\n    );\n\n    return (\n        <div className={cn(classes.container, receivedClasses.container)}>\n            <TextField\n                fullWidth={fullWidth}\n                className={classes.input}\n                onClick={e => e.target && e.target.select && e.target.select()}\n                value={input}\n                onChange={handleChange}\n                placeholder={formatMessage(translations.placeholder)}\n                onBlur={() => {\n                    if (!preventBlur) {\n                        setIsFocused(false);\n                    }\n                }}\n                onFocus={() => setIsFocused(true)}\n                variant={variant || 'outlined'}\n                label={formatMessage(translations.title)}\n                containerRef={inputRef}\n            />\n            {isFocused && (\n                <PredictionsList\n                    setPreventBlur={setPreventBlur}\n                    input={inputRef.current}\n                    {...{\n                        predictions,\n                        classes,\n                        onPredictionSelected,\n                        locale,\n                        setIsFocused,\n                        setInput,\n                        clear,\n                        clearOnSelect\n                    }}\n                />\n            )}\n        </div>\n    );\n};\n\nconst PredictionsList = ({ predictions = [], setPreventBlur, input, onPredictionSelected, classes, setInput }) => {\n    const onMouseUp = useCallback(() => {\n        setPreventBlur(false);\n        if (input && input.focus) {\n            input.focus();\n        }\n    }, []);\n    return (\n        <PopperCard\n            open\n            anchorElement={input}\n            customClasses={{\n                popper: classes.popperCard\n            }}\n        >\n            <List>\n                {predictions\n                    .filter(item => item)\n                    .map(({ description, place_id: placeId }) => (\n                        <ListItem\n                            key={`prediction_${placeId}`}\n                            onMouseDown={() => setPreventBlur(true)}\n                            onMouseUp={onMouseUp}\n                            onClick={() => {\n                                if (!placeId) {\n                                    return;\n                                }\n                                setInput(description);\n                                onPredictionSelected(placeId, description);\n                            }}\n                        >\n                            <Typography>{description || ''}</Typography>\n                        </ListItem>\n                    ))}\n            </List>\n        </PopperCard>\n    );\n};\n\nexport const LocationField = LocationFieldComponent;\n"]},"metadata":{},"sourceType":"module"}