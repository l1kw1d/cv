{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/soundtrack/soundtrack_back/soundtrack_back.jsx\";\nimport React, { memo, useCallback, useMemo, useState } from 'react';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, useSpring, useTransition } from 'react-spring';\nimport { CenterContentContainer } from '../../../../commons/center_content_container/center_content_container';\nimport { LoadingSpinner } from '../../../../commons/loading_spinner/loading_spinner';\nimport { LOADING_SPINNER_TRANSITIONS } from './soundtrack_back_loading_spinner_transitions';\nimport { getColorsFromCardVariant } from '../../../../../utils/styles/styles_utils';\nimport { useCardVariant } from '../../../../hooks/profile_card_hooks/use_card_variant';\nimport { styles } from './soundtrack_back_styles';\nimport { NoSoundTrack } from './no_soundtrack/no_soundtrack';\nconst useStyles = createUseStyles(styles);\n\nconst SoundtrackBackComponent = ({\n  data,\n  handleAddButtonClick\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(CenterContentContainer, {\n    customClasses: {\n      container: classes.container\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Content, Object.assign({\n    data,\n    handleAddButtonClick,\n    classes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  })));\n};\n\nconst Content = ({\n  data,\n  handleAddButtonClick,\n  classes\n}) => {\n  const theme = useTheme();\n  const [variant] = useCardVariant();\n  const {\n    components: {\n      cards: {\n        height,\n        width\n      }\n    }\n  } = theme;\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const color = useMemo(() => getColorsFromCardVariant(theme, variant).color, [theme, variant]);\n  const handleLoad = useCallback(() => setHasLoaded(true), []);\n  const iframeSpringProps = useSpring({\n    opacity: hasLoaded ? 1 : 0\n  });\n  const loadingSpinnerTransitions = useTransition(hasLoaded, item => `${item ? 'invisible' : 'visible'}_loading_soundtrack_spinner`, { ...LOADING_SPINNER_TRANSITIONS,\n    unique: true\n  });\n\n  if (!(data === null || data === void 0 ? void 0 : data.embedUrl)) {\n    return /*#__PURE__*/React.createElement(NoSoundTrack, Object.assign({\n      handleAddButtonClick\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 16\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.loadingSpinnerContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, loadingSpinnerTransitions.map(({\n    item,\n    key,\n    props\n  }) => !item && /*#__PURE__*/React.createElement(animated.span, {\n    key: key,\n    className: classes.loadingSpinnerChild,\n    style: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(animated.iframe, {\n    className: classes.iframe,\n    title: \"Soundtrack\",\n    src: data.embedUrl,\n    height: height,\n    width: width,\n    frameBorder: \"0\",\n    allow: \"encrypted-media\",\n    onLoad: handleLoad,\n    style: iframeSpringProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport const SoundtrackBack = memo(SoundtrackBackComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/soundtrack/soundtrack_back/soundtrack_back.jsx"],"names":["React","memo","useCallback","useMemo","useState","createUseStyles","useTheme","animated","useSpring","useTransition","CenterContentContainer","LoadingSpinner","LOADING_SPINNER_TRANSITIONS","getColorsFromCardVariant","useCardVariant","styles","NoSoundTrack","useStyles","SoundtrackBackComponent","data","handleAddButtonClick","classes","container","Content","theme","variant","components","cards","height","width","hasLoaded","setHasLoaded","color","handleLoad","iframeSpringProps","opacity","loadingSpinnerTransitions","item","unique","embedUrl","loadingSpinnerContainer","map","key","props","loadingSpinnerChild","iframe","SoundtrackBack"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useMemo, useState } from 'react';\n\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { CenterContentContainer } from '../../../../commons/center_content_container/center_content_container';\nimport { LoadingSpinner } from '../../../../commons/loading_spinner/loading_spinner';\n\nimport { LOADING_SPINNER_TRANSITIONS } from './soundtrack_back_loading_spinner_transitions';\n\nimport { getColorsFromCardVariant } from '../../../../../utils/styles/styles_utils';\nimport { useCardVariant } from '../../../../hooks/profile_card_hooks/use_card_variant';\n\nimport { styles } from './soundtrack_back_styles';\nimport { NoSoundTrack } from './no_soundtrack/no_soundtrack';\n\nconst useStyles = createUseStyles(styles);\n\nconst SoundtrackBackComponent = ({ data, handleAddButtonClick }) => {\n    const classes = useStyles();\n\n    return (\n        <CenterContentContainer customClasses={{ container: classes.container }}>\n            <Content {...{ data, handleAddButtonClick, classes }} />\n        </CenterContentContainer>\n    );\n};\n\nconst Content = ({ data, handleAddButtonClick, classes }) => {\n    const theme = useTheme();\n    const [variant] = useCardVariant();\n\n    const {\n        components: {\n            cards: { height, width }\n        }\n    } = theme;\n\n    const [hasLoaded, setHasLoaded] = useState(false);\n\n    const color = useMemo(() => getColorsFromCardVariant(theme, variant).color, [theme, variant]);\n\n    const handleLoad = useCallback(() => setHasLoaded(true), []);\n    const iframeSpringProps = useSpring({\n        opacity: hasLoaded ? 1 : 0\n    });\n\n    const loadingSpinnerTransitions = useTransition(\n        hasLoaded,\n        item => `${item ? 'invisible' : 'visible'}_loading_soundtrack_spinner`,\n        { ...LOADING_SPINNER_TRANSITIONS, unique: true }\n    );\n\n    if (!data?.embedUrl) {\n        return <NoSoundTrack {...{ handleAddButtonClick }} />;\n    }\n\n    return (\n        <>\n            <span className={classes.loadingSpinnerContainer}>\n                {loadingSpinnerTransitions.map(\n                    ({ item, key, props }) =>\n                        !item && (\n                            <animated.span key={key} className={classes.loadingSpinnerChild} style={props}>\n                                <LoadingSpinner color={color} />\n                            </animated.span>\n                        )\n                )}\n            </span>\n            <animated.iframe\n                className={classes.iframe}\n                title=\"Soundtrack\"\n                src={data.embedUrl}\n                height={height}\n                width={width}\n                frameBorder=\"0\"\n                allow=\"encrypted-media\"\n                onLoad={handleLoad}\n                style={iframeSpringProps}\n            />\n        </>\n    );\n};\n\nexport const SoundtrackBack = memo(SoundtrackBackComponent);\n"]},"metadata":{},"sourceType":"module"}