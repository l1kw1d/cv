{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/banner/user_actions_row/customize_dialog/palette_visual/palette_visual.jsx\";\nimport React, { useMemo } from 'react';\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { Tooltip } from '@wld/ui';\nimport { PALETTE_KEY_TRANSLATIONS } from './palette_visual_translations';\nimport { styles } from './palette_visual_styles';\nconst useStyles = createUseStyles(styles);\n\nconst PaletteVisualComponent = ({\n  palette,\n  classes: receivedClasses = {},\n  translations = PALETTE_KEY_TRANSLATIONS\n}) => {\n  const classes = useStyles();\n  const paletteEntries = useMemo(() => Object.entries(palette !== null && palette !== void 0 ? palette : {}), [palette]);\n\n  if (!palette) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: cn(classes.container, receivedClasses.container),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, paletteEntries.map(([key, {\n    500: hex\n  }]) => /*#__PURE__*/React.createElement(Tooltip, {\n    key: `palette_visual_color_${key}_${hex}`,\n    title: translations[key],\n    customClasses: {\n      popper: receivedClasses.tooltipPopper\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cn(classes.color, receivedClasses.color),\n    style: {\n      color: hex\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport const PaletteVisual = PaletteVisualComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/banner/user_actions_row/customize_dialog/palette_visual/palette_visual.jsx"],"names":["React","useMemo","cn","createUseStyles","Tooltip","PALETTE_KEY_TRANSLATIONS","styles","useStyles","PaletteVisualComponent","palette","classes","receivedClasses","translations","paletteEntries","Object","entries","container","map","key","hex","popper","tooltipPopper","color","PaletteVisual"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA,SAASC,OAAT,QAAwB,SAAxB;AAEA,SAASC,wBAAT,QAAyC,+BAAzC;AAEA,SAASC,MAAT,QAAuB,yBAAvB;AAEA,MAAMC,SAAS,GAAGJ,eAAe,CAACG,MAAD,CAAjC;;AAEA,MAAME,sBAAsB,GAAG,CAAC;AAC5BC,EAAAA,OAD4B;AAE5BC,EAAAA,OAAO,EAAEC,eAAe,GAAG,EAFC;AAG5BC,EAAAA,YAAY,GAAGP;AAHa,CAAD,KAIzB;AACF,QAAMK,OAAO,GAAGH,SAAS,EAAzB;AAEA,QAAMM,cAAc,GAAGZ,OAAO,CAAC,MAAMa,MAAM,CAACC,OAAP,CAAeN,OAAf,aAAeA,OAAf,cAAeA,OAAf,GAA0B,EAA1B,CAAP,EAAsC,CAACA,OAAD,CAAtC,CAA9B;;AAEA,MAAI,CAACA,OAAL,EAAc;AACV,WAAO,IAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEP,EAAE,CAACQ,OAAO,CAACM,SAAT,EAAoBL,eAAe,CAACK,SAApC,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,cAAc,CAACI,GAAf,CAAmB,CAAC,CAACC,GAAD,EAAM;AAAE,SAAKC;AAAP,GAAN,CAAD,kBAChB,oBAAC,OAAD;AACI,IAAA,GAAG,EAAG,wBAAuBD,GAAI,IAAGC,GAAI,EAD5C;AAEI,IAAA,KAAK,EAAEP,YAAY,CAACM,GAAD,CAFvB;AAGI,IAAA,aAAa,EAAE;AACXE,MAAAA,MAAM,EAAET,eAAe,CAACU;AADb,KAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI;AAAK,IAAA,SAAS,EAAEnB,EAAE,CAACQ,OAAO,CAACY,KAAT,EAAgBX,eAAe,CAACW,KAAhC,CAAlB;AAA0D,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAK,EAAEH;AAAT,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADH,CADL,CADJ;AAeH,CA5BD;;AA8BA,OAAO,MAAMI,aAAa,GAAGf,sBAAtB","sourcesContent":["import React, { useMemo } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\n\nimport { Tooltip } from '@wld/ui';\n\nimport { PALETTE_KEY_TRANSLATIONS } from './palette_visual_translations';\n\nimport { styles } from './palette_visual_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst PaletteVisualComponent = ({\n    palette,\n    classes: receivedClasses = {},\n    translations = PALETTE_KEY_TRANSLATIONS\n}) => {\n    const classes = useStyles();\n\n    const paletteEntries = useMemo(() => Object.entries(palette ?? {}), [palette]);\n\n    if (!palette) {\n        return null;\n    }\n\n    return (\n        <div className={cn(classes.container, receivedClasses.container)}>\n            {paletteEntries.map(([key, { 500: hex }]) => (\n                <Tooltip\n                    key={`palette_visual_color_${key}_${hex}`}\n                    title={translations[key]}\n                    customClasses={{\n                        popper: receivedClasses.tooltipPopper\n                    }}\n                >\n                    <div className={cn(classes.color, receivedClasses.color)} style={{ color: hex }} />\n                </Tooltip>\n            ))}\n        </div>\n    );\n};\n\nexport const PaletteVisual = PaletteVisualComponent;\n"]},"metadata":{},"sourceType":"module"}