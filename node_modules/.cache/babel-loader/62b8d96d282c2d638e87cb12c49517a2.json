{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/dream_job/dream_job_back/dream_job_back.jsx\";\nimport React, { memo, useMemo, useRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { List, ListItem, PopperCard, Typography } from '@wld/ui';\nimport { ProfileCardSection } from '../../../../commons/profile_card/profile_card_section/profile_card_section';\nimport { ProfileCardSectionTitle } from '../../../../commons/profile_card/profile_card_section_title/profile_card_section_title';\nimport { ProfileCardSectionText } from '../../../../commons/profile_card/profile_card_section_text/profile_card_section_text';\nimport { ProfileCardAnimatedBack } from '../../../../commons/profile_card/profile_card_animated_back/profile_card_animated_back';\nimport { ContractType } from '../../../../commons/fields/contract_types/contract_types';\nimport { DreamJobCurrentJobIssues } from './dream_job_current_job_issues/dream_job_current_job_issues';\nimport { DreamJobPerks } from './dream_job_perks/dream_job_perks';\nimport { DreamJobSalarySectionContent } from './dream_job_salary_section_content/dream_job_salary_section_content';\nimport { useOpenerState } from '../../../../hooks/use_opener_state';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { REMOTE_FREQUENCY } from '../../../../../utils/enums/remote/remote_utils';\nimport { remoteDisplayTranslations } from '../../../../../utils/enums/remote/remote_filter_translations';\nimport { styles } from './dream_job_back_styles';\nimport { hasOnlyFreelanceContract } from '../../../utils/has_only_freelance_contract';\nconst useStyles = createUseStyles(styles);\n\nconst DreamJobBackComponent = ({\n  data\n}) => {\n  const classes = useStyles();\n  const {\n    averageDailyRate,\n    places,\n    perks,\n    salary,\n    remoteFrequency,\n    contractTypes,\n    currentJobIssues\n  } = data;\n  const isFreelance = hasOnlyFreelanceContract(contractTypes) ? salary : averageDailyRate;\n  return /*#__PURE__*/React.createElement(ProfileCardAnimatedBack, {\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Dreamjob.Back.Title\",\n      defaultMessage: \"Dream job\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 41\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, existsAndNotEmpty(places) && /*#__PURE__*/React.createElement(ProfileCardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DreamJobLocations, {\n    places: places,\n    remoteFrequency: remoteFrequency,\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  })), existsAndNotEmpty(isFreelance ? averageDailyRate : salary) && (isFreelance ? averageDailyRate !== '0' : salary !== '0') && /*#__PURE__*/React.createElement(ProfileCardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DreamJobSalarySectionContent, {\n    contractTypes: contractTypes,\n    averageDailyRate: averageDailyRate,\n    salary: salary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  })), existsAndNotEmpty(contractTypes) && /*#__PURE__*/React.createElement(ProfileCardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardSectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Dreamjob.Back.ContractTypes.Title\",\n    defaultMessage: \"Contract types\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ProfileCardSectionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ContractType, {\n    contractTypes: contractTypes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }))), existsAndNotEmpty(perks) && typeof perks === 'object' && Object.values(perks).some(value => existsAndNotEmpty(value)) && /*#__PURE__*/React.createElement(ProfileCardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardSectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Dreamjob.Back.Location.Perks.Title\",\n    defaultMessage: \"Important perks in my job\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ProfileCardSectionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DreamJobPerks, {\n    perks: perks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }))), existsAndNotEmpty(currentJobIssues) && /*#__PURE__*/React.createElement(ProfileCardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardSectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Dreamjob.Back.Location.CurrentJobIssues.Title\",\n    defaultMessage: \"Current job's issues\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ProfileCardSectionText, {\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DreamJobCurrentJobIssues, {\n    currentJobIssues: currentJobIssues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }))));\n};\n\nconst DreamJobLocations = ({\n  remoteFrequency,\n  places,\n  classes\n}) => {\n  const {\n    formatMessage\n  } = useIntl();\n\n  if (remoteFrequency === REMOTE_FREQUENCY.FULL_TIME) {\n    return /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Dreamjob.Back.Location.RemoteOnly\",\n      defaultMessage: \"I only want to work remotely\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProfileCardSectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Dreamjob.Back.Location.Title\",\n    defaultMessage: \"My dreamjob location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(ProfileCardSectionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DreamJobPlaces, {\n    places: places,\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }), remoteFrequency && formatMessage(remoteDisplayTranslations[remoteFrequency] || remoteDisplayTranslations.others)));\n};\n\nconst DreamJobPlaces = ({\n  places = [],\n  classes\n}) => {\n  const textAnchor = useRef();\n  const [open, handlers] = useOpenerState();\n  const {\n    firstPlace,\n    remainingPlaces\n  } = useMemo(() => {\n    const placesCopy = [...places];\n    const item = placesCopy.shift();\n    return {\n      firstPlace: item,\n      remainingPlaces: placesCopy\n    };\n  }, [places]);\n\n  if (!remainingPlaces.length) {\n    var _firstPlace$name;\n\n    return /*#__PURE__*/React.createElement(ProfileCardSectionText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Dreamjob.Back.Location.OnePlace\",\n      defaultMessage: \"I want to work in {place}\",\n      values: {\n        place: (_firstPlace$name = firstPlace === null || firstPlace === void 0 ? void 0 : firstPlace.name) !== null && _firstPlace$name !== void 0 ? _firstPlace$name : ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", Object.assign({\n    className: classes.button,\n    type: \"button\",\n    ref: textAnchor\n  }, handlers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Dreamjob.Back.Location.ManyPlaces\",\n    defaultMessage: \"I want to work in {place} and {length, plural, one {one other place} other {# other places}}\",\n    values: {\n      place: firstPlace.name,\n      length: remainingPlaces.length\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(PopperCard, {\n    open: open,\n    anchorElement: textAnchor.current,\n    popperProps: {\n      modifiers: {\n        preventOverflow: {\n          boundariesElement: 'viewport'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, remainingPlaces.filter(item => item).map(({\n    name\n  }, index) => /*#__PURE__*/React.createElement(ListItem, {\n    key: `place_popper_${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 33\n    }\n  }, name))))));\n};\n\nexport const DreamJobBack = memo(DreamJobBackComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/dream_job/dream_job_back/dream_job_back.jsx"],"names":["React","memo","useMemo","useRef","createUseStyles","FormattedMessage","useIntl","List","ListItem","PopperCard","Typography","ProfileCardSection","ProfileCardSectionTitle","ProfileCardSectionText","ProfileCardAnimatedBack","ContractType","DreamJobCurrentJobIssues","DreamJobPerks","DreamJobSalarySectionContent","useOpenerState","existsAndNotEmpty","REMOTE_FREQUENCY","remoteDisplayTranslations","styles","hasOnlyFreelanceContract","useStyles","DreamJobBackComponent","data","classes","averageDailyRate","places","perks","salary","remoteFrequency","contractTypes","currentJobIssues","isFreelance","Object","values","some","value","DreamJobLocations","formatMessage","FULL_TIME","others","DreamJobPlaces","textAnchor","open","handlers","firstPlace","remainingPlaces","placesCopy","item","shift","length","place","name","button","current","modifiers","preventOverflow","boundariesElement","filter","map","index","DreamJobBack"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,MAA/B,QAA6C,OAA7C;AAEA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,YAA1C;AAEA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,UAArC,QAAuD,SAAvD;AAEA,SAASC,kBAAT,QAAmC,4EAAnC;AACA,SAASC,uBAAT,QAAwC,wFAAxC;AACA,SAASC,sBAAT,QAAuC,sFAAvC;AACA,SAASC,uBAAT,QAAwC,wFAAxC;AACA,SAASC,YAAT,QAA6B,0DAA7B;AACA,SAASC,wBAAT,QAAyC,6DAAzC;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,4BAAT,QAA6C,qEAA7C;AAEA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA,SAASC,gBAAT,QAAiC,gDAAjC;AACA,SAASC,yBAAT,QAA0C,8DAA1C;AAEA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,wBAAT,QAAyC,4CAAzC;AAEA,MAAMC,SAAS,GAAGrB,eAAe,CAACmB,MAAD,CAAjC;;AAEA,MAAMG,qBAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACxC,QAAMC,OAAO,GAAGH,SAAS,EAAzB;AACA,QAAM;AAAEI,IAAAA,gBAAF;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA,KAA5B;AAAmCC,IAAAA,MAAnC;AAA2CC,IAAAA,eAA3C;AAA4DC,IAAAA,aAA5D;AAA2EC,IAAAA;AAA3E,MAAgGR,IAAtG;AACA,QAAMS,WAAW,GAAGZ,wBAAwB,CAACU,aAAD,CAAxB,GAA0CF,MAA1C,GAAmDH,gBAAvE;AAEA,sBACI,oBAAC,uBAAD;AAAyB,IAAA,KAAK,eAAE,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,qBAArB;AAA2C,MAAA,cAAc,EAAC,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,iBAAiB,CAACU,MAAD,CAAjB,iBACG,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,iBAAD;AAAmB,IAAA,MAAM,EAAEA,MAA3B;AAAmC,IAAA,eAAe,EAAEG,eAApD;AAAqE,IAAA,OAAO,EAAEL,OAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFR,EAMKR,iBAAiB,CAACgB,WAAW,GAAGP,gBAAH,GAAsBG,MAAlC,CAAjB,KACII,WAAW,GAAGP,gBAAgB,KAAK,GAAxB,GAA8BG,MAAM,KAAK,GADxD,kBAEO,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,4BAAD;AACI,IAAA,aAAa,EAAEE,aADnB;AAEI,IAAA,gBAAgB,EAAEL,gBAFtB;AAGI,IAAA,MAAM,EAAEG,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CARZ,EAgBKZ,iBAAiB,CAACc,aAAD,CAAjB,iBACG,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,mCAArB;AAAyD,IAAA,cAAc,EAAC,gBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAII,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,aAAa,EAAEA,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CAjBR,EA0BKd,iBAAiB,CAACW,KAAD,CAAjB,IACG,OAAOA,KAAP,KAAiB,QADpB,IAEGM,MAAM,CAACC,MAAP,CAAcP,KAAd,EAAqBQ,IAArB,CAA0BC,KAAK,IAAIpB,iBAAiB,CAACoB,KAAD,CAApD,CAFH,iBAGO,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AACI,IAAA,EAAE,EAAC,oCADP;AAEI,IAAA,cAAc,EAAC,2BAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAOI,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAET,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAPJ,CA7BZ,EAyCKX,iBAAiB,CAACe,gBAAD,CAAjB,iBACG,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AACI,IAAA,EAAE,EAAC,+CADP;AAEI,IAAA,cAAc,EAAC,sBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAOI,oBAAC,sBAAD;AAAwB,IAAA,SAAS,EAAC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,wBAAD;AAA0B,IAAA,gBAAgB,EAAEA,gBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAPJ,CA1CR,CADJ;AAyDH,CA9DD;;AAgEA,MAAMM,iBAAiB,GAAG,CAAC;AAAER,EAAAA,eAAF;AAAmBH,EAAAA,MAAnB;AAA2BF,EAAAA;AAA3B,CAAD,KAA0C;AAChE,QAAM;AAAEc,IAAAA;AAAF,MAAoBpC,OAAO,EAAjC;;AACA,MAAI2B,eAAe,KAAKZ,gBAAgB,CAACsB,SAAzC,EAAoD;AAChD,wBACI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,mCAArB;AAAyD,MAAA,cAAc,EAAC,8BAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAED,sBACI,uDACI,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,8BAArB;AAAoD,IAAA,cAAc,EAAC,sBAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAII,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEb,MAAxB;AAAgC,IAAA,OAAO,EAAEF,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKK,eAAe,IACZS,aAAa,CAACpB,yBAAyB,CAACW,eAAD,CAAzB,IAA8CX,yBAAyB,CAACsB,MAAzE,CAJrB,CAJJ,CADJ;AAaH,CArBD;;AAuBA,MAAMC,cAAc,GAAG,CAAC;AAAEf,EAAAA,MAAM,GAAG,EAAX;AAAeF,EAAAA;AAAf,CAAD,KAA8B;AACjD,QAAMkB,UAAU,GAAG3C,MAAM,EAAzB;AACA,QAAM,CAAC4C,IAAD,EAAOC,QAAP,IAAmB7B,cAAc,EAAvC;AACA,QAAM;AAAE8B,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAkChD,OAAO,CAAC,MAAM;AAClD,UAAMiD,UAAU,GAAG,CAAC,GAAGrB,MAAJ,CAAnB;AACA,UAAMsB,IAAI,GAAGD,UAAU,CAACE,KAAX,EAAb;AACA,WAAO;AAAEJ,MAAAA,UAAU,EAAEG,IAAd;AAAoBF,MAAAA,eAAe,EAAEC;AAArC,KAAP;AACH,GAJ8C,EAI5C,CAACrB,MAAD,CAJ4C,CAA/C;;AAMA,MAAI,CAACoB,eAAe,CAACI,MAArB,EAA6B;AAAA;;AACzB,wBACI,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,EAAE,EAAC,iCADP;AAEI,MAAA,cAAc,EAAC,2BAFnB;AAGI,MAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,sBAAEN,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEO,IAAd,+DAAsB;AAA7B,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AASH;;AAED,sBACI,uDACI;AAAQ,IAAA,SAAS,EAAE5B,OAAO,CAAC6B,MAA3B;AAAmC,IAAA,IAAI,EAAC,QAAxC;AAAiD,IAAA,GAAG,EAAEX;AAAtD,KAAsEE,QAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACI,oBAAC,gBAAD;AACI,IAAA,EAAE,EAAC,mCADP;AAEI,IAAA,cAAc,EAAC,8FAFnB;AAGI,IAAA,MAAM,EAAE;AAAEO,MAAAA,KAAK,EAAEN,UAAU,CAACO,IAApB;AAA0BF,MAAAA,MAAM,EAAEJ,eAAe,CAACI;AAAlD,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAQI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAEP,IADV;AAEI,IAAA,aAAa,EAAED,UAAU,CAACY,OAF9B;AAGI,IAAA,WAAW,EAAE;AACTC,MAAAA,SAAS,EAAE;AACPC,QAAAA,eAAe,EAAE;AACbC,UAAAA,iBAAiB,EAAE;AADN;AADV;AADF,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAWI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,eAAe,CACXY,MADJ,CACWV,IAAI,IAAIA,IADnB,EAEIW,GAFJ,CAEQ,CAAC;AAAEP,IAAAA;AAAF,GAAD,EAAWQ,KAAX,kBACD,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAG,gBAAeA,KAAM,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaR,IAAb,CADJ,CAHP,CADL,CAXJ,CARJ,CADJ;AAgCH,CArDD;;AAuDA,OAAO,MAAMS,YAAY,GAAGhE,IAAI,CAACyB,qBAAD,CAAzB","sourcesContent":["import React, { memo, useMemo, useRef } from 'react';\n\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { List, ListItem, PopperCard, Typography } from '@wld/ui';\n\nimport { ProfileCardSection } from '../../../../commons/profile_card/profile_card_section/profile_card_section';\nimport { ProfileCardSectionTitle } from '../../../../commons/profile_card/profile_card_section_title/profile_card_section_title';\nimport { ProfileCardSectionText } from '../../../../commons/profile_card/profile_card_section_text/profile_card_section_text';\nimport { ProfileCardAnimatedBack } from '../../../../commons/profile_card/profile_card_animated_back/profile_card_animated_back';\nimport { ContractType } from '../../../../commons/fields/contract_types/contract_types';\nimport { DreamJobCurrentJobIssues } from './dream_job_current_job_issues/dream_job_current_job_issues';\nimport { DreamJobPerks } from './dream_job_perks/dream_job_perks';\nimport { DreamJobSalarySectionContent } from './dream_job_salary_section_content/dream_job_salary_section_content';\n\nimport { useOpenerState } from '../../../../hooks/use_opener_state';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\n\nimport { REMOTE_FREQUENCY } from '../../../../../utils/enums/remote/remote_utils';\nimport { remoteDisplayTranslations } from '../../../../../utils/enums/remote/remote_filter_translations';\n\nimport { styles } from './dream_job_back_styles';\nimport { hasOnlyFreelanceContract } from '../../../utils/has_only_freelance_contract';\n\nconst useStyles = createUseStyles(styles);\n\nconst DreamJobBackComponent = ({ data }) => {\n    const classes = useStyles();\n    const { averageDailyRate, places, perks, salary, remoteFrequency, contractTypes, currentJobIssues } = data;\n    const isFreelance = hasOnlyFreelanceContract(contractTypes) ? salary : averageDailyRate;\n\n    return (\n        <ProfileCardAnimatedBack title={<FormattedMessage id=\"Dreamjob.Back.Title\" defaultMessage=\"Dream job\" />}>\n            {existsAndNotEmpty(places) && (\n                <ProfileCardSection>\n                    <DreamJobLocations places={places} remoteFrequency={remoteFrequency} classes={classes} />\n                </ProfileCardSection>\n            )}\n            {existsAndNotEmpty(isFreelance ? averageDailyRate : salary) &&\n                (isFreelance ? averageDailyRate !== '0' : salary !== '0') && (\n                    <ProfileCardSection>\n                        <DreamJobSalarySectionContent\n                            contractTypes={contractTypes}\n                            averageDailyRate={averageDailyRate}\n                            salary={salary}\n                        />\n                    </ProfileCardSection>\n                )}\n            {existsAndNotEmpty(contractTypes) && (\n                <ProfileCardSection>\n                    <ProfileCardSectionTitle>\n                        <FormattedMessage id=\"Dreamjob.Back.ContractTypes.Title\" defaultMessage=\"Contract types\" />\n                    </ProfileCardSectionTitle>\n                    <ProfileCardSectionText>\n                        <ContractType contractTypes={contractTypes} />\n                    </ProfileCardSectionText>\n                </ProfileCardSection>\n            )}\n            {existsAndNotEmpty(perks) &&\n                typeof perks === 'object' &&\n                Object.values(perks).some(value => existsAndNotEmpty(value)) && (\n                    <ProfileCardSection>\n                        <ProfileCardSectionTitle>\n                            <FormattedMessage\n                                id=\"Dreamjob.Back.Location.Perks.Title\"\n                                defaultMessage=\"Important perks in my job\"\n                            />\n                        </ProfileCardSectionTitle>\n                        <ProfileCardSectionText>\n                            <DreamJobPerks perks={perks} />\n                        </ProfileCardSectionText>\n                    </ProfileCardSection>\n                )}\n            {existsAndNotEmpty(currentJobIssues) && (\n                <ProfileCardSection>\n                    <ProfileCardSectionTitle>\n                        <FormattedMessage\n                            id=\"Dreamjob.Back.Location.CurrentJobIssues.Title\"\n                            defaultMessage=\"Current job's issues\"\n                        />\n                    </ProfileCardSectionTitle>\n                    <ProfileCardSectionText component=\"div\">\n                        <DreamJobCurrentJobIssues currentJobIssues={currentJobIssues} />\n                    </ProfileCardSectionText>\n                </ProfileCardSection>\n            )}\n        </ProfileCardAnimatedBack>\n    );\n};\n\nconst DreamJobLocations = ({ remoteFrequency, places, classes }) => {\n    const { formatMessage } = useIntl();\n    if (remoteFrequency === REMOTE_FREQUENCY.FULL_TIME) {\n        return (\n            <FormattedMessage id=\"Dreamjob.Back.Location.RemoteOnly\" defaultMessage=\"I only want to work remotely\" />\n        );\n    }\n\n    return (\n        <>\n            <ProfileCardSectionTitle>\n                <FormattedMessage id=\"Dreamjob.Back.Location.Title\" defaultMessage=\"My dreamjob location\" />\n            </ProfileCardSectionTitle>\n            <ProfileCardSectionText>\n                <DreamJobPlaces places={places} classes={classes} />\n                <br />\n                {remoteFrequency &&\n                    formatMessage(remoteDisplayTranslations[remoteFrequency] || remoteDisplayTranslations.others)}\n            </ProfileCardSectionText>\n        </>\n    );\n};\n\nconst DreamJobPlaces = ({ places = [], classes }) => {\n    const textAnchor = useRef();\n    const [open, handlers] = useOpenerState();\n    const { firstPlace, remainingPlaces } = useMemo(() => {\n        const placesCopy = [...places];\n        const item = placesCopy.shift();\n        return { firstPlace: item, remainingPlaces: placesCopy };\n    }, [places]);\n\n    if (!remainingPlaces.length) {\n        return (\n            <ProfileCardSectionText>\n                <FormattedMessage\n                    id=\"Dreamjob.Back.Location.OnePlace\"\n                    defaultMessage=\"I want to work in {place}\"\n                    values={{ place: firstPlace?.name ?? '' }}\n                />\n            </ProfileCardSectionText>\n        );\n    }\n\n    return (\n        <>\n            <button className={classes.button} type=\"button\" ref={textAnchor} {...handlers}>\n                <FormattedMessage\n                    id=\"Dreamjob.Back.Location.ManyPlaces\"\n                    defaultMessage=\"I want to work in {place} and {length, plural, one {one other place} other {# other places}}\"\n                    values={{ place: firstPlace.name, length: remainingPlaces.length }}\n                />\n            </button>\n            <PopperCard\n                open={open}\n                anchorElement={textAnchor.current}\n                popperProps={{\n                    modifiers: {\n                        preventOverflow: {\n                            boundariesElement: 'viewport'\n                        }\n                    }\n                }}\n            >\n                <List>\n                    {remainingPlaces\n                        .filter(item => item)\n                        .map(({ name }, index) => (\n                            <ListItem key={`place_popper_${index}`}>\n                                <Typography>{name}</Typography>\n                            </ListItem>\n                        ))}\n                </List>\n            </PopperCard>\n        </>\n    );\n};\n\nexport const DreamJobBack = memo(DreamJobBackComponent);\n"]},"metadata":{},"sourceType":"module"}