{"ast":null,"code":"import { useContext, useEffect } from 'react';\nimport { TECHNOLOGIES_RECEIVED, TECHNOLOGIES_STARTED } from '../../../store/technologies/technologies_actions_types';\nimport { StaticDataContext, StoreContext } from '../../../utils/context/contexts';\nconst DEFAULT_OBJECT = {};\nexport const useTechnologies = () => {\n  const {\n    technologies: [{\n      technologies\n    }, dispatch]\n  } = useContext(StoreContext);\n  const {\n    endpoints\n  } = useContext(StaticDataContext);\n  useEffect(() => {\n    if (!endpoints.devicons) {\n      dispatch({\n        type: TECHNOLOGIES_RECEIVED,\n        technologies: DEFAULT_OBJECT\n      });\n      return;\n    }\n\n    if (technologies === null && endpoints.devicons) {\n      dispatch({\n        type: TECHNOLOGIES_STARTED\n      }); // eslint-disable-next-line no-undef\n\n      fetch(endpoints.devicons).then(res => {\n        if (res.status.toString().startsWith('2')) {\n          return res.json();\n        }\n\n        throw new Error(`${res.status} ${res.statusText}`);\n      }).then(fetchedTechnologies => dispatch({\n        type: TECHNOLOGIES_RECEIVED,\n        technologies: fetchedTechnologies\n      })).catch(e => {\n        console.error('Failed to fetch technologies', e);\n        dispatch({\n          type: TECHNOLOGIES_RECEIVED,\n          technologies: DEFAULT_OBJECT\n        });\n      });\n    }\n  }, [technologies]);\n  return {\n    technologies\n  };\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/hooks/technologies/use_technologies.js"],"names":["useContext","useEffect","TECHNOLOGIES_RECEIVED","TECHNOLOGIES_STARTED","StaticDataContext","StoreContext","DEFAULT_OBJECT","useTechnologies","technologies","dispatch","endpoints","devicons","type","fetch","then","res","status","toString","startsWith","json","Error","statusText","fetchedTechnologies","catch","e","console","error"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AAEA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,wDAA5D;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,iCAAhD;AAEA,MAAMC,cAAc,GAAG,EAAvB;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,QAAM;AACFC,IAAAA,YAAY,EAAE,CAAC;AAAEA,MAAAA;AAAF,KAAD,EAAmBC,QAAnB;AADZ,MAEFT,UAAU,CAACK,YAAD,CAFd;AAGA,QAAM;AAAEK,IAAAA;AAAF,MAAgBV,UAAU,CAACI,iBAAD,CAAhC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACS,SAAS,CAACC,QAAf,EAAyB;AACrBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEV,qBAAR;AAA+BM,QAAAA,YAAY,EAAEF;AAA7C,OAAD,CAAR;AACA;AACH;;AACD,QAAIE,YAAY,KAAK,IAAjB,IAAyBE,SAAS,CAACC,QAAvC,EAAiD;AAC7CF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAET;AAAR,OAAD,CAAR,CAD6C,CAE7C;;AACAU,MAAAA,KAAK,CAACH,SAAS,CAACC,QAAX,CAAL,CACKG,IADL,CACUC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACC,MAAJ,CAAWC,QAAX,GAAsBC,UAAtB,CAAiC,GAAjC,CAAJ,EAA2C;AACvC,iBAAOH,GAAG,CAACI,IAAJ,EAAP;AACH;;AACD,cAAM,IAAIC,KAAJ,CAAW,GAAEL,GAAG,CAACC,MAAO,IAAGD,GAAG,CAACM,UAAW,EAA1C,CAAN;AACH,OANL,EAOKP,IAPL,CAOUQ,mBAAmB,IACrBb,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEV,qBAAR;AAA+BM,QAAAA,YAAY,EAAEc;AAA7C,OAAD,CARhB,EASKC,KATL,CASWC,CAAC,IAAI;AACRC,QAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CF,CAA9C;AACAf,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAEV,qBAAR;AAA+BM,UAAAA,YAAY,EAAEF;AAA7C,SAAD,CAAR;AACH,OAZL;AAaH;AACJ,GAtBQ,EAsBN,CAACE,YAAD,CAtBM,CAAT;AAwBA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH,CA/BM","sourcesContent":["import { useContext, useEffect } from 'react';\n\nimport { TECHNOLOGIES_RECEIVED, TECHNOLOGIES_STARTED } from '../../../store/technologies/technologies_actions_types';\nimport { StaticDataContext, StoreContext } from '../../../utils/context/contexts';\n\nconst DEFAULT_OBJECT = {};\nexport const useTechnologies = () => {\n    const {\n        technologies: [{ technologies }, dispatch]\n    } = useContext(StoreContext);\n    const { endpoints } = useContext(StaticDataContext);\n\n    useEffect(() => {\n        if (!endpoints.devicons) {\n            dispatch({ type: TECHNOLOGIES_RECEIVED, technologies: DEFAULT_OBJECT });\n            return;\n        }\n        if (technologies === null && endpoints.devicons) {\n            dispatch({ type: TECHNOLOGIES_STARTED });\n            // eslint-disable-next-line no-undef\n            fetch(endpoints.devicons)\n                .then(res => {\n                    if (res.status.toString().startsWith('2')) {\n                        return res.json();\n                    }\n                    throw new Error(`${res.status} ${res.statusText}`);\n                })\n                .then(fetchedTechnologies =>\n                    dispatch({ type: TECHNOLOGIES_RECEIVED, technologies: fetchedTechnologies }))\n                .catch(e => {\n                    console.error('Failed to fetch technologies', e);\n                    dispatch({ type: TECHNOLOGIES_RECEIVED, technologies: DEFAULT_OBJECT });\n                });\n        }\n    }, [technologies]);\n\n    return { technologies };\n};\n"]},"metadata":{},"sourceType":"module"}