{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/languages/languages_front/languages_front.jsx\";\nimport React, { memo, useCallback, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage } from 'react-intl';\nimport { Typography } from '@wld/ui';\nimport { CenterContentContainer } from '../../../../commons/center_content_container/center_content_container';\nimport { ProfileCardFrontTypography } from '../../../../commons/profile_card/profile_card_front_typography/profile_card_front_typography';\nimport { ProfileCardActions } from '../../../../commons/profile_card/profile_card_actions/profile_card_actions';\nimport { ProfileCardButton } from '../../../../commons/profile_card/profile_card_button/profile_card_button';\nimport { SIDES } from '../../../../commons/profile_card/profile_card_side/side';\nimport { styles } from './languages_front_styles';\nimport { useCardSide } from '../../../../hooks/profile_card_hooks/use_card_side';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoDataButton } from '../../../../commons/no_data_button/no_data_button';\nconst useStyles = createUseStyles(styles);\n\nconst LanguagesFrontComponent = ({\n  data,\n  handleAddButtonClick\n}) => {\n  var _data$languages, _data$languages$, _data$languages2, _data$languages2$, _data$languages3, _data$languages3$;\n\n  const classes = useStyles();\n  const [side, setSide] = useCardSide();\n  const handleButtonClick = useCallback(() => setSide(side === SIDES.FRONT ? SIDES.BACK : SIDES.FRONT), [side, setSide]);\n  const languagesNode = /*#__PURE__*/React.createElement(React.Fragment, null, (_data$languages = data.languages) === null || _data$languages === void 0 ? void 0 : (_data$languages$ = _data$languages[0]) === null || _data$languages$ === void 0 ? void 0 : _data$languages$.language, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), (_data$languages2 = data.languages) === null || _data$languages2 === void 0 ? void 0 : (_data$languages2$ = _data$languages2[1]) === null || _data$languages2$ === void 0 ? void 0 : _data$languages2$.language, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), (_data$languages3 = data.languages) === null || _data$languages3 === void 0 ? void 0 : (_data$languages3$ = _data$languages3[2]) === null || _data$languages3$ === void 0 ? void 0 : _data$languages3$.language);\n  const hasLanguage = useMemo(() => existsAndNotEmpty(data === null || data === void 0 ? void 0 : data.languages), [data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CenterContentContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Content, Object.assign({\n    hasLanguage,\n    languagesNode,\n    handleAddButtonClick,\n    classes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }))), hasLanguage && /*#__PURE__*/React.createElement(ProfileCardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardButton, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Languages.front.action\",\n    defaultMessage: \"Languages level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }))));\n};\n\nconst Content = ({\n  hasLanguage,\n  languagesNode,\n  handleAddButtonClick,\n  classes\n}) => {\n  if (hasLanguage) {\n    return /*#__PURE__*/React.createElement(ProfileCardFrontTypography, {\n      classes: {\n        container: classes.typography\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Languages.front.content\",\n      defaultMessage: \"I speak {languagesNode}\",\n      values: {\n        languagesNode\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noLanguage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    component: \"h3\",\n    customClasses: {\n      container: classes.noLanguageTypography\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Languages.front.noLanguage\",\n    defaultMessage: \"Vous n'avez pas encore ajout\\xE9 de langues !\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(NoDataButton, {\n    handleAddButtonClick: handleAddButtonClick,\n    classes: {\n      container: classes.addButton\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Languages.noLanguage.buttonLabel\",\n    defaultMessage: \"Ajouter une langue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport const LanguagesFront = memo(LanguagesFrontComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/languages/languages_front/languages_front.jsx"],"names":["React","memo","useCallback","useMemo","createUseStyles","FormattedMessage","Typography","CenterContentContainer","ProfileCardFrontTypography","ProfileCardActions","ProfileCardButton","SIDES","styles","useCardSide","existsAndNotEmpty","NoDataButton","useStyles","LanguagesFrontComponent","data","handleAddButtonClick","classes","side","setSide","handleButtonClick","FRONT","BACK","languagesNode","languages","language","hasLanguage","Content","container","typography","noLanguage","noLanguageTypography","addButton","LanguagesFront"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useMemo } from 'react';\n\nimport { createUseStyles } from 'react-jss';\n\nimport { FormattedMessage } from 'react-intl';\nimport { Typography } from '@wld/ui';\nimport { CenterContentContainer } from '../../../../commons/center_content_container/center_content_container';\nimport { ProfileCardFrontTypography } from '../../../../commons/profile_card/profile_card_front_typography/profile_card_front_typography';\nimport { ProfileCardActions } from '../../../../commons/profile_card/profile_card_actions/profile_card_actions';\nimport { ProfileCardButton } from '../../../../commons/profile_card/profile_card_button/profile_card_button';\nimport { SIDES } from '../../../../commons/profile_card/profile_card_side/side';\n\nimport { styles } from './languages_front_styles';\nimport { useCardSide } from '../../../../hooks/profile_card_hooks/use_card_side';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoDataButton } from '../../../../commons/no_data_button/no_data_button';\n\nconst useStyles = createUseStyles(styles);\n\nconst LanguagesFrontComponent = ({ data, handleAddButtonClick }) => {\n    const classes = useStyles();\n    const [side, setSide] = useCardSide();\n\n    const handleButtonClick = useCallback(() => setSide(side === SIDES.FRONT ? SIDES.BACK : SIDES.FRONT), [\n        side,\n        setSide\n    ]);\n\n    const languagesNode = (\n        <>\n            {data.languages?.[0]?.language}\n            <br />\n            {data.languages?.[1]?.language}\n            <br />\n            {data.languages?.[2]?.language}\n        </>\n    );\n\n    const hasLanguage = useMemo(() => existsAndNotEmpty(data?.languages), [data]);\n\n    return (\n        <>\n            <CenterContentContainer>\n                <Content {...{ hasLanguage, languagesNode, handleAddButtonClick, classes }} />\n            </CenterContentContainer>\n            {hasLanguage && (\n                <ProfileCardActions>\n                    <ProfileCardButton onClick={handleButtonClick}>\n                        <FormattedMessage id=\"Languages.front.action\" defaultMessage=\"Languages level\" />\n                    </ProfileCardButton>\n                </ProfileCardActions>\n            )}\n        </>\n    );\n};\n\nconst Content = ({ hasLanguage, languagesNode, handleAddButtonClick, classes }) => {\n    if (hasLanguage) {\n        return (\n            <ProfileCardFrontTypography classes={{ container: classes.typography }}>\n                <FormattedMessage\n                    id=\"Languages.front.content\"\n                    defaultMessage=\"I speak {languagesNode}\"\n                    values={{ languagesNode }}\n                />\n            </ProfileCardFrontTypography>\n        );\n    }\n    return (\n        <div className={classes.noLanguage}>\n            <Typography variant=\"h3\" component=\"h3\" customClasses={{ container: classes.noLanguageTypography }}>\n                <FormattedMessage\n                    id=\"Languages.front.noLanguage\"\n                    defaultMessage=\"Vous n'avez pas encore ajouté de langues !\"\n                />\n            </Typography>\n            <NoDataButton\n                handleAddButtonClick={handleAddButtonClick}\n                classes={{\n                    container: classes.addButton\n                }}\n            >\n                <FormattedMessage id=\"Languages.noLanguage.buttonLabel\" defaultMessage=\"Ajouter une langue\" />\n            </NoDataButton>\n        </div>\n    );\n};\n\nexport const LanguagesFront = memo(LanguagesFrontComponent);\n"]},"metadata":{},"sourceType":"module"}