{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/profile_card/profile_card.jsx\";\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState } from 'react';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, config, useTransition } from 'react-spring';\nimport { Card } from '@wld/ui';\nimport { useMediaQuery } from '@material-ui/core';\nimport { ProfileCardSide } from './profile_card_side/profile_card_side';\nimport { ProfileCardEditButton } from './profile_card_edit_button/profile_card_edit_button';\nimport { ProfileCardEditDialog } from './profile_card_edit_dialog/profile_card_edit_dialog';\nimport { ProfileCardIncompletePopper } from './profile_card_incomplete_popper/profile_card_incomplete_popper';\nimport { SET_SIDE, SET_VARIANT } from '../../../store/profile_card/profile_card_actions_types';\nimport { getProfileCardInitialState, profileCardReducer } from '../../../store/profile_card/profile_card_reducer';\nimport { styles } from './profile_card_styles';\nimport { PROFILE_CARD_EDIT_BUTTON_TRANSITIONS_SPRING_PROPS } from './profile_card_spring_props';\nimport { SIDES } from './profile_card_side/side';\nimport { DeveloperProfileContext } from '../../../utils/context/contexts';\nconst useStyles = createUseStyles(styles);\nexport const ProfileCardContext = createContext({});\nconst DEFAULT_TRANSITIONS_SPRING_PROPS = {\n  from: {\n    opacity: 0\n  },\n  enter: {\n    opacity: 1\n  },\n  leave: {\n    opacity: 0\n  },\n  config: config.default\n};\n\nconst ProfileCardComponent = ({\n  id,\n  children,\n  data,\n  sides,\n  kind,\n  variant,\n  isTransitionUnique = true,\n  isEditingProfile,\n  editDialog,\n  customTransitionsSpringProps,\n  customEditAction,\n  isComplete = true,\n  side: sideProps\n}) => {\n  const changeSideTimeout = useRef();\n  const {\n    mode\n  } = useContext(DeveloperProfileContext);\n  const classes = useStyles({\n    variant\n  });\n  const theme = useTheme();\n  const [containerElement, setContainerElement] = useState();\n  const containerReference = useRef();\n  const [openEditDialog, setOpenEditDialog] = useState(false);\n  const [forceOpenEditDialog, setForceOpenEditDialog] = useState(false);\n  const setEditDialogOpened = useCallback(() => setOpenEditDialog(true), []);\n  const setEditDialogClosed = useCallback(() => {\n    setOpenEditDialog(false);\n    setForceOpenEditDialog(false);\n  }, []);\n  const [state, dispatch] = useReducer(profileCardReducer, getProfileCardInitialState({\n    variant,\n    side: sideProps\n  }));\n  useEffect(() => {\n    dispatch({\n      type: SET_VARIANT,\n      variant\n    });\n  }, [variant]);\n  useEffect(() => {\n    dispatch({\n      type: SET_SIDE,\n      side: sideProps || SIDES.FRONT\n    });\n  }, [sideProps]);\n  const {\n    side,\n    hasDialogOpened\n  } = state;\n  useEffect(() => {\n    setContainerElement(containerReference.current);\n  }, []);\n  const isSmall = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`, {\n    defaultMatches: true\n  });\n  const transitionsSpringProps = useMemo(() => {\n    if (customTransitionsSpringProps) {\n      if (typeof customTransitionsSpringProps === 'function') {\n        return customTransitionsSpringProps(side);\n      }\n\n      return customTransitionsSpringProps;\n    }\n\n    return DEFAULT_TRANSITIONS_SPRING_PROPS;\n  }, [customTransitionsSpringProps, side]);\n  const hasSideChanged = useRef(false);\n  const setSide = useCallback(newSide => {\n    if (sideProps) {\n      return;\n    }\n\n    if (changeSideTimeout.current) {\n      clearTimeout(changeSideTimeout.current);\n    }\n\n    changeSideTimeout.current = setTimeout(() => dispatch({\n      type: SET_SIDE,\n      side: newSide\n    }), 200);\n  }, [sideProps]);\n  const handleMouseEnter = useCallback(() => setSide(SIDES.BACK), [setSide]);\n  const handleMouseLeave = useCallback(() => {\n    if (hasDialogOpened) {\n      return;\n    }\n\n    setSide(SIDES.FRONT);\n  }, [hasDialogOpened, setSide]);\n  useEffect(() => {\n    if (hasSideChanged.current) {\n      return;\n    }\n\n    hasSideChanged.current = true;\n  }, [side]);\n  const transitions = useTransition(side, item => `card_side_${item}_${kind}`, { ...transitionsSpringProps,\n    unique: isTransitionUnique,\n    immediate: !hasSideChanged.current\n  });\n  const handleAddButtonClick = useCallback(() => {\n    setOpenEditDialog(true);\n    setForceOpenEditDialog(true);\n  }, []);\n  const editButtonTransitions = useTransition(isEditingProfile, item => item ? 'visible_editing_button' : 'invisible_editing_button', { ...PROFILE_CARD_EDIT_BUTTON_TRANSITIONS_SPRING_PROPS,\n    unique: true\n  });\n  const contextData = useMemo(() => ({\n    state,\n    dispatch\n  }), [JSON.stringify(state)]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mode === 'edit' && (isEditingProfile || forceOpenEditDialog) && /*#__PURE__*/React.createElement(ProfileCardContext.Provider, {\n    value: contextData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardEditDialog, {\n    editDialog: editDialog,\n    open: openEditDialog,\n    onClose: setEditDialogClosed,\n    data: data,\n    isEditing: isEditingProfile || forceOpenEditDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(ProfileCardIncompletePopper, {\n    open: isComplete !== true,\n    anchorElement: containerElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card, Object.assign({\n    containerRef: containerReference,\n    customClasses: {\n      container: classes.container\n    },\n    id: id,\n    elevation: 1\n  }, !isSmall && !sideProps && {\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }), mode === 'edit' && editButtonTransitions.map(({\n    item,\n    key,\n    props\n  }) => item && /*#__PURE__*/React.createElement(animated.div, {\n    className: classes.editButtonContainer,\n    key: key,\n    style: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(EditAction, {\n    customEditAction: customEditAction,\n    setEditDialogOpened: setEditDialogOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(ProfileCardContext.Provider, {\n    value: contextData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, children, transitions.map(({\n    item,\n    key,\n    props\n  }) => {\n    const SideComponent = sides[item] || (() => null);\n\n    return /*#__PURE__*/React.createElement(ProfileCardSide, {\n      key: key,\n      style: props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SideComponent, {\n      data: data,\n      handleAddButtonClick: handleAddButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 33\n      }\n    }));\n  }))));\n};\n\nconst EditAction = ({\n  customEditAction,\n  setEditDialogOpened\n}) => {\n  const onCustomClick = useCallback(() => setEditDialogOpened(), []);\n\n  if (customEditAction) {\n    const Component = customEditAction;\n    return /*#__PURE__*/React.createElement(Component, {\n      onClick: onCustomClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ProfileCardEditButton, {\n    setEditDialogOpened: setEditDialogOpened,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 12\n    }\n  });\n};\n\nexport const ProfileCard = ProfileCardComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/profile_card/profile_card.jsx"],"names":["React","createContext","useCallback","useContext","useEffect","useMemo","useReducer","useRef","useState","createUseStyles","useTheme","animated","config","useTransition","Card","useMediaQuery","ProfileCardSide","ProfileCardEditButton","ProfileCardEditDialog","ProfileCardIncompletePopper","SET_SIDE","SET_VARIANT","getProfileCardInitialState","profileCardReducer","styles","PROFILE_CARD_EDIT_BUTTON_TRANSITIONS_SPRING_PROPS","SIDES","DeveloperProfileContext","useStyles","ProfileCardContext","DEFAULT_TRANSITIONS_SPRING_PROPS","from","opacity","enter","leave","default","ProfileCardComponent","id","children","data","sides","kind","variant","isTransitionUnique","isEditingProfile","editDialog","customTransitionsSpringProps","customEditAction","isComplete","side","sideProps","changeSideTimeout","mode","classes","theme","containerElement","setContainerElement","containerReference","openEditDialog","setOpenEditDialog","forceOpenEditDialog","setForceOpenEditDialog","setEditDialogOpened","setEditDialogClosed","state","dispatch","type","FRONT","hasDialogOpened","current","isSmall","screenSizes","small","defaultMatches","transitionsSpringProps","hasSideChanged","setSide","newSide","clearTimeout","setTimeout","handleMouseEnter","BACK","handleMouseLeave","transitions","item","unique","immediate","handleAddButtonClick","editButtonTransitions","contextData","JSON","stringify","container","onMouseEnter","onMouseLeave","map","key","props","editButtonContainer","SideComponent","EditAction","onCustomClick","Component","ProfileCard"],"mappings":"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","sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState } from 'react';\n\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, config, useTransition } from 'react-spring';\n\nimport { Card } from '@wld/ui';\n\nimport { useMediaQuery } from '@material-ui/core';\n\nimport { ProfileCardSide } from './profile_card_side/profile_card_side';\nimport { ProfileCardEditButton } from './profile_card_edit_button/profile_card_edit_button';\nimport { ProfileCardEditDialog } from './profile_card_edit_dialog/profile_card_edit_dialog';\nimport { ProfileCardIncompletePopper } from './profile_card_incomplete_popper/profile_card_incomplete_popper';\n\nimport { SET_SIDE, SET_VARIANT } from '../../../store/profile_card/profile_card_actions_types';\nimport { getProfileCardInitialState, profileCardReducer } from '../../../store/profile_card/profile_card_reducer';\n\nimport { styles } from './profile_card_styles';\nimport { PROFILE_CARD_EDIT_BUTTON_TRANSITIONS_SPRING_PROPS } from './profile_card_spring_props';\nimport { SIDES } from './profile_card_side/side';\nimport { DeveloperProfileContext } from '../../../utils/context/contexts';\n\nconst useStyles = createUseStyles(styles);\n\nexport const ProfileCardContext = createContext({});\n\nconst DEFAULT_TRANSITIONS_SPRING_PROPS = {\n    from: { opacity: 0 },\n    enter: { opacity: 1 },\n    leave: { opacity: 0 },\n    config: config.default\n};\n\nconst ProfileCardComponent = ({\n    id,\n    children,\n    data,\n    sides,\n    kind,\n    variant,\n    isTransitionUnique = true,\n    isEditingProfile,\n    editDialog,\n    customTransitionsSpringProps,\n    customEditAction,\n    isComplete = true,\n    side: sideProps\n}) => {\n    const changeSideTimeout = useRef();\n    const { mode } = useContext(DeveloperProfileContext);\n\n    const classes = useStyles({ variant });\n    const theme = useTheme();\n    const [containerElement, setContainerElement] = useState();\n    const containerReference = useRef();\n    const [openEditDialog, setOpenEditDialog] = useState(false);\n    const [forceOpenEditDialog, setForceOpenEditDialog] = useState(false);\n\n    const setEditDialogOpened = useCallback(() => setOpenEditDialog(true), []);\n    const setEditDialogClosed = useCallback(() => {\n        setOpenEditDialog(false);\n        setForceOpenEditDialog(false);\n    }, []);\n\n    const [state, dispatch] = useReducer(\n        profileCardReducer,\n        getProfileCardInitialState({\n            variant,\n            side: sideProps\n        })\n    );\n\n    useEffect(() => {\n        dispatch({\n            type: SET_VARIANT,\n            variant\n        });\n    }, [variant]);\n    useEffect(() => {\n        dispatch({\n            type: SET_SIDE,\n            side: sideProps || SIDES.FRONT\n        });\n    }, [sideProps]);\n\n    const { side, hasDialogOpened } = state;\n\n    useEffect(() => {\n        setContainerElement(containerReference.current);\n    }, []);\n\n    const isSmall = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`, {\n        defaultMatches: true\n    });\n\n    const transitionsSpringProps = useMemo(() => {\n        if (customTransitionsSpringProps) {\n            if (typeof customTransitionsSpringProps === 'function') {\n                return customTransitionsSpringProps(side);\n            }\n            return customTransitionsSpringProps;\n        }\n        return DEFAULT_TRANSITIONS_SPRING_PROPS;\n    }, [customTransitionsSpringProps, side]);\n\n    const hasSideChanged = useRef(false);\n\n    const setSide = useCallback(\n        newSide => {\n            if (sideProps) {\n                return;\n            }\n            if (changeSideTimeout.current) {\n                clearTimeout(changeSideTimeout.current);\n            }\n            changeSideTimeout.current = setTimeout(\n                () =>\n                    dispatch({\n                        type: SET_SIDE,\n                        side: newSide\n                    }),\n                200\n            );\n        },\n        [sideProps]\n    );\n\n    const handleMouseEnter = useCallback(() => setSide(SIDES.BACK), [setSide]);\n\n    const handleMouseLeave = useCallback(() => {\n        if (hasDialogOpened) {\n            return;\n        }\n        setSide(SIDES.FRONT);\n    }, [hasDialogOpened, setSide]);\n\n    useEffect(() => {\n        if (hasSideChanged.current) {\n            return;\n        }\n        hasSideChanged.current = true;\n    }, [side]);\n\n    const transitions = useTransition(side, item => `card_side_${item}_${kind}`, {\n        ...transitionsSpringProps,\n        unique: isTransitionUnique,\n        immediate: !hasSideChanged.current\n    });\n    const handleAddButtonClick = useCallback(() => {\n        setOpenEditDialog(true);\n        setForceOpenEditDialog(true);\n    }, []);\n\n    const editButtonTransitions = useTransition(\n        isEditingProfile,\n        item => (item ? 'visible_editing_button' : 'invisible_editing_button'),\n        {\n            ...PROFILE_CARD_EDIT_BUTTON_TRANSITIONS_SPRING_PROPS,\n            unique: true\n        }\n    );\n\n    const contextData = useMemo(() => ({ state, dispatch }), [JSON.stringify(state)]);\n\n    return (\n        <>\n            {mode === 'edit' && (isEditingProfile || forceOpenEditDialog) && (\n                <ProfileCardContext.Provider value={contextData}>\n                    <ProfileCardEditDialog\n                        editDialog={editDialog}\n                        open={openEditDialog}\n                        onClose={setEditDialogClosed}\n                        data={data}\n                        isEditing={isEditingProfile || forceOpenEditDialog}\n                    />\n                </ProfileCardContext.Provider>\n            )}\n            <ProfileCardIncompletePopper open={isComplete !== true} anchorElement={containerElement} />\n            <Card\n                containerRef={containerReference}\n                customClasses={{ container: classes.container }}\n                id={id}\n                elevation={1}\n                {...(!isSmall &&\n                    !sideProps && {\n                        onMouseEnter: handleMouseEnter,\n                        onMouseLeave: handleMouseLeave\n                    })}\n            >\n                {mode === 'edit' &&\n                    editButtonTransitions.map(\n                        ({ item, key, props }) =>\n                            item && (\n                                <animated.div className={classes.editButtonContainer} key={key} style={props}>\n                                    <EditAction\n                                        customEditAction={customEditAction}\n                                        setEditDialogOpened={setEditDialogOpened}\n                                    />\n                                </animated.div>\n                            )\n                    )}\n                <ProfileCardContext.Provider value={contextData}>\n                    {children}\n                    {transitions.map(({ item, key, props }) => {\n                        const SideComponent = sides[item] || (() => null);\n                        return (\n                            <ProfileCardSide key={key} style={props}>\n                                <SideComponent data={data} handleAddButtonClick={handleAddButtonClick} />\n                            </ProfileCardSide>\n                        );\n                    })}\n                </ProfileCardContext.Provider>\n            </Card>\n        </>\n    );\n};\n\nconst EditAction = ({ customEditAction, setEditDialogOpened }) => {\n    const onCustomClick = useCallback(() => setEditDialogOpened(), []);\n    if (customEditAction) {\n        const Component = customEditAction;\n        return <Component onClick={onCustomClick} />;\n    }\n    return <ProfileCardEditButton setEditDialogOpened={setEditDialogOpened} />;\n};\n\nexport const ProfileCard = ProfileCardComponent;\n"]},"metadata":{},"sourceType":"module"}