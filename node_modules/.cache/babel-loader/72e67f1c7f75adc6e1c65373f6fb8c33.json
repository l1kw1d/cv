{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/experiences/experiences_back/experiences_back.jsx\";\nimport React, { Fragment, memo, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { ProfileCardSection } from '../../../../commons/profile_card/profile_card_section/profile_card_section';\nimport { ProfileCardSectionTitle } from '../../../../commons/profile_card/profile_card_section_title/profile_card_section_title';\nimport { ProfileCardSectionText } from '../../../../commons/profile_card/profile_card_section_text/profile_card_section_text';\nimport { ProfileCardAnimatedBack } from '../../../../commons/profile_card/profile_card_animated_back/profile_card_animated_back';\nimport { ProfileCardSectionSubtitle } from '../../../../commons/profile_card/profile_card_section_subtitle/profile_card_section_subtitle';\nimport { styles } from './experiences_back_styles';\nimport { translations } from './experiences_translations';\nimport { useAdditionalNodes } from '../../../../hooks/use_additional_nodes';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoWork } from './no_work/no_work';\nconst useStyles = createUseStyles(styles);\n\nconst ExperienceContent = ({\n  experience,\n  variant,\n  classes\n}) => {\n  const {\n    formatMessage\n  } = useIntl();\n  const [buildTitle] = useAdditionalNodes('cards.experiences.back.experience.content.buildTitle', null);\n  const {\n    id,\n    name,\n    summary,\n    place,\n    position\n  } = experience;\n  const dateString = useMemo(() => {\n    if (!experience.endDate) {\n      if (!experience.startDate) {\n        return '';\n      }\n\n      return formatMessage(translations.since, {\n        year: experience.startDate.format('MMM YYYY')\n      });\n    }\n\n    const startDate = experience.startDate.isValid() ? experience.startDate.format('MMM YYYY') : '';\n    const endDate = experience.endDate.isValid() ? experience.endDate.format('MMM YYYY') : '';\n    return `${startDate} - ${endDate}`;\n  }, [experience]);\n  const title = useMemo(() => {\n    if (typeof buildTitle === 'function') {\n      return buildTitle({\n        experience\n      });\n    }\n\n    const builder = [];\n\n    if (name) {\n      builder.push(name);\n    }\n\n    if (place === null || place === void 0 ? void 0 : place.name) {\n      if (builder.length) {\n        builder.push(' - ');\n      }\n\n      builder.push(place.name);\n    }\n\n    if (builder.length) {\n      builder.push( /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 26\n        }\n      }));\n    }\n\n    builder.push(dateString);\n    return builder.map((value, index) => /*#__PURE__*/React.createElement(Fragment, {\n      key: `builder_part_${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 46\n      }\n    }, value));\n  }, [buildTitle, experience]);\n  return /*#__PURE__*/React.createElement(ProfileCardSection, {\n    key: id,\n    cardVariant: variant,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardSectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, position), /*#__PURE__*/React.createElement(ProfileCardSectionSubtitle, {\n    customClasses: {\n      container: classes.subtitle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, title), /*#__PURE__*/React.createElement(ProfileCardSectionText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, summary));\n};\n\nconst Content = ({\n  data,\n  handleAddButtonClick,\n  classes\n}) => {\n  var _data$work;\n\n  const hasWork = useMemo(() => existsAndNotEmpty(data === null || data === void 0 ? void 0 : data.work), [data]);\n  const experiences = (_data$work = data.work) === null || _data$work === void 0 ? void 0 : _data$work.filter(({\n    position,\n    summary\n  }) => Boolean(position && summary));\n\n  if (!hasWork) {\n    return /*#__PURE__*/React.createElement(NoWork, Object.assign({\n      handleAddButtonClick\n    }, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 16\n      }\n    }));\n  }\n\n  return experiences.map(experience => /*#__PURE__*/React.createElement(ExperienceContent, {\n    key: `work_experience_${experience.id}`,\n    experience: experience,\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst ExperiencesBackComponent = ({\n  data,\n  handleAddButtonClick\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(ProfileCardAnimatedBack, {\n    title: \"Experiences\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Content, Object.assign({\n    data,\n    handleAddButtonClick,\n    classes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport const ExperiencesBack = memo(ExperiencesBackComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/experiences/experiences_back/experiences_back.jsx"],"names":["React","Fragment","memo","useMemo","useIntl","createUseStyles","ProfileCardSection","ProfileCardSectionTitle","ProfileCardSectionText","ProfileCardAnimatedBack","ProfileCardSectionSubtitle","styles","translations","useAdditionalNodes","existsAndNotEmpty","NoWork","useStyles","ExperienceContent","experience","variant","classes","formatMessage","buildTitle","id","name","summary","place","position","dateString","endDate","startDate","since","year","format","isValid","title","builder","push","length","map","value","index","container","subtitle","Content","data","handleAddButtonClick","hasWork","work","experiences","filter","Boolean","ExperiencesBackComponent","ExperiencesBack"],"mappings":"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","sourcesContent":["import React, { Fragment, memo, useMemo } from 'react';\n\nimport { useIntl } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\n\nimport { ProfileCardSection } from '../../../../commons/profile_card/profile_card_section/profile_card_section';\nimport { ProfileCardSectionTitle } from '../../../../commons/profile_card/profile_card_section_title/profile_card_section_title';\nimport { ProfileCardSectionText } from '../../../../commons/profile_card/profile_card_section_text/profile_card_section_text';\nimport { ProfileCardAnimatedBack } from '../../../../commons/profile_card/profile_card_animated_back/profile_card_animated_back';\nimport { ProfileCardSectionSubtitle } from '../../../../commons/profile_card/profile_card_section_subtitle/profile_card_section_subtitle';\n\nimport { styles } from './experiences_back_styles';\nimport { translations } from './experiences_translations';\nimport { useAdditionalNodes } from '../../../../hooks/use_additional_nodes';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoWork } from './no_work/no_work';\n\nconst useStyles = createUseStyles(styles);\n\nconst ExperienceContent = ({ experience, variant, classes }) => {\n    const { formatMessage } = useIntl();\n    const [buildTitle] = useAdditionalNodes('cards.experiences.back.experience.content.buildTitle', null);\n\n    const { id, name, summary, place, position } = experience;\n    const dateString = useMemo(() => {\n        if (!experience.endDate) {\n            if (!experience.startDate) {\n                return '';\n            }\n            return formatMessage(translations.since, { year: experience.startDate.format('MMM YYYY') });\n        }\n        const startDate = experience.startDate.isValid() ? experience.startDate.format('MMM YYYY') : '';\n        const endDate = experience.endDate.isValid() ? experience.endDate.format('MMM YYYY') : '';\n        return `${startDate} - ${endDate}`;\n    }, [experience]);\n\n    const title = useMemo(() => {\n        if (typeof buildTitle === 'function') {\n            return buildTitle({ experience });\n        }\n        const builder = [];\n        if (name) {\n            builder.push(name);\n        }\n        if (place?.name) {\n            if (builder.length) {\n                builder.push(' - ');\n            }\n            builder.push(place.name);\n        }\n        if (builder.length) {\n            builder.push(<br />);\n        }\n        builder.push(dateString);\n        return builder.map((value, index) => <Fragment key={`builder_part_${index}`}>{value}</Fragment>);\n    }, [buildTitle, experience]);\n    return (\n        <ProfileCardSection key={id} cardVariant={variant}>\n            <ProfileCardSectionTitle>{position}</ProfileCardSectionTitle>\n            <ProfileCardSectionSubtitle customClasses={{ container: classes.subtitle }}>\n                {title}\n            </ProfileCardSectionSubtitle>\n            <ProfileCardSectionText>{summary}</ProfileCardSectionText>\n        </ProfileCardSection>\n    );\n};\n\nconst Content = ({ data, handleAddButtonClick, classes }) => {\n    const hasWork = useMemo(() => existsAndNotEmpty(data?.work), [data]);\n    const experiences = data.work?.filter(({ position, summary }) => Boolean(position && summary));\n\n    if (!hasWork) {\n        return <NoWork {...{ handleAddButtonClick }} />;\n    }\n    return experiences.map(experience => (\n        <ExperienceContent key={`work_experience_${experience.id}`} experience={experience} classes={classes} />\n    ));\n};\n\nconst ExperiencesBackComponent = ({ data, handleAddButtonClick }) => {\n    const classes = useStyles();\n    return (\n        <ProfileCardAnimatedBack title=\"Experiences\">\n            <Content {...{ data, handleAddButtonClick, classes }} />\n        </ProfileCardAnimatedBack>\n    );\n};\n\nexport const ExperiencesBack = memo(ExperiencesBackComponent);\n"]},"metadata":{},"sourceType":"module"}