{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/search_unsplash_dialog/search_unsplash_result.jsx\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { useDebounce } from 'use-debounce';\nimport { Dialog, DialogActions, DialogContent } from '@material-ui/core';\nimport { Button, TextField, Tooltip } from '@wld/ui';\nimport { DialogTitle } from '../dialog/dialog_title/dialog_title';\nimport { LoadingSpinner } from '../loading_spinner/loading_spinner';\nimport { StaticDataContext } from '../../../utils/context/contexts';\nimport { useUnsplashResults } from '../../hooks/unsplash/use_unsplash_results';\nimport { styles } from './search_unsplash_result_styles';\nconst useStyles = createUseStyles(styles);\n\nconst SearchUnsplashDialogComponent = ({\n  open,\n  onClose,\n  onSelect\n}) => {\n  const classes = useStyles();\n  const [query, setQuery] = useState('');\n  const [debouncedQuery] = useDebounce(query, 500);\n  const handleInputChange = useCallback(event => setQuery(event.target.value), []);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    classes: {\n      paper: classes.paper\n    },\n    open: open,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    classes: {\n      root: classes.title\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Unsplash.SearchDialog.Title\",\n    defaultMessage: \"Search pictures from unsplash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(DialogContent, {\n    classes: {\n      root: classes.content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    customClasses: {\n      container: classes.textField\n    },\n    fullWidth: true,\n    onChange: handleInputChange,\n    value: query,\n    variant: \"flat\",\n    placeholder: \"Burrito, development, etc...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Results, {\n    query: query,\n    debouncedQuery: debouncedQuery,\n    onSelect: onSelect,\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Main.lang.close\",\n    defaultMessage: \"Close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }))));\n};\n\nconst Results = ({\n  query,\n  debouncedQuery,\n  onSelect,\n  classes\n}) => {\n  const {\n    results,\n    loading: loadingResults\n  } = useUnsplashResults(debouncedQuery, 0, 3 * 3);\n  const [showLoadingSpinner, setShowLoadingSpinner] = useState(false);\n  const {\n    endpoints\n  } = useContext(StaticDataContext);\n  useEffect(() => {\n    if (loadingResults) {\n      return;\n    }\n\n    setShowLoadingSpinner(!!query);\n  }, [query]);\n  useEffect(() => {\n    if (loadingResults === true) {\n      return;\n    }\n\n    setShowLoadingSpinner(false);\n  }, [results, loadingResults]);\n  const onImageSelected = useCallback(({\n    description,\n    urls,\n    id,\n    user,\n    links\n  }) => () => {\n    onSelect({\n      id,\n      url: urls.regular,\n      alt: description,\n      credits: {\n        url: encodeURI(`${user.links.html}?utm_source=W3D Developer Profile&utm_medium=referral`),\n        name: user.username\n      },\n      fromUnsplash: true\n    }); // eslint-disable-next-line no-undef\n\n    fetch(`${endpoints === null || endpoints === void 0 ? void 0 : endpoints.unsplashProxy}?url=${links.download_location}`);\n  }, [onSelect]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, showLoadingSpinner && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 36\n    }\n  }), !showLoadingSpinner && (results === null || results === void 0 ? void 0 : results.map(({\n    id,\n    urls,\n    description,\n    user,\n    links\n  }) => /*#__PURE__*/React.createElement(Tooltip, {\n    key: `unsplash_picture_${id}`,\n    title: \"Select this picture\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    key: `result_${id}`,\n    type: \"button\",\n    className: classes.imageContainer,\n    onClick: onImageSelected({\n      description,\n      urls,\n      id,\n      user,\n      links\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.image,\n    src: urls.regular,\n    alt: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nexport const SearchUnsplashDialog = SearchUnsplashDialogComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/search_unsplash_dialog/search_unsplash_result.jsx"],"names":["React","useCallback","useContext","useEffect","useState","FormattedMessage","createUseStyles","useDebounce","Dialog","DialogActions","DialogContent","Button","TextField","Tooltip","DialogTitle","LoadingSpinner","StaticDataContext","useUnsplashResults","styles","useStyles","SearchUnsplashDialogComponent","open","onClose","onSelect","classes","query","setQuery","debouncedQuery","handleInputChange","event","target","value","paper","root","title","content","container","textField","Results","results","loading","loadingResults","showLoadingSpinner","setShowLoadingSpinner","endpoints","onImageSelected","description","urls","id","user","links","url","regular","alt","credits","encodeURI","html","name","username","fromUnsplash","fetch","unsplashProxy","download_location","map","imageContainer","image","SearchUnsplashDialog"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { useDebounce } from 'use-debounce';\n\nimport { Dialog, DialogActions, DialogContent } from '@material-ui/core';\nimport { Button, TextField, Tooltip } from '@wld/ui';\n\nimport { DialogTitle } from '../dialog/dialog_title/dialog_title';\nimport { LoadingSpinner } from '../loading_spinner/loading_spinner';\nimport { StaticDataContext } from '../../../utils/context/contexts';\n\nimport { useUnsplashResults } from '../../hooks/unsplash/use_unsplash_results';\n\nimport { styles } from './search_unsplash_result_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst SearchUnsplashDialogComponent = ({ open, onClose, onSelect }) => {\n    const classes = useStyles();\n    const [query, setQuery] = useState('');\n    const [debouncedQuery] = useDebounce(query, 500);\n\n    const handleInputChange = useCallback(event => setQuery(event.target.value), []);\n\n    return (\n        <Dialog\n            classes={{\n                paper: classes.paper\n            }}\n            open={open}\n            onClose={onClose}\n        >\n            <DialogTitle classes={{ root: classes.title }}>\n                <FormattedMessage id=\"Unsplash.SearchDialog.Title\" defaultMessage=\"Search pictures from unsplash\" />\n            </DialogTitle>\n            <DialogContent\n                classes={{\n                    root: classes.content\n                }}\n            >\n                <TextField\n                    customClasses={{ container: classes.textField }}\n                    fullWidth\n                    onChange={handleInputChange}\n                    value={query}\n                    variant=\"flat\"\n                    placeholder=\"Burrito, development, etc...\"\n                />\n                <Results query={query} debouncedQuery={debouncedQuery} onSelect={onSelect} classes={classes} />\n            </DialogContent>\n            <DialogActions>\n                <Button size=\"small\" onClick={onClose}>\n                    <FormattedMessage id=\"Main.lang.close\" defaultMessage=\"Close\" />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nconst Results = ({ query, debouncedQuery, onSelect, classes }) => {\n    const { results, loading: loadingResults } = useUnsplashResults(debouncedQuery, 0, 3 * 3);\n    const [showLoadingSpinner, setShowLoadingSpinner] = useState(false);\n    const { endpoints } = useContext(StaticDataContext);\n\n    useEffect(() => {\n        if (loadingResults) {\n            return;\n        }\n        setShowLoadingSpinner(!!query);\n    }, [query]);\n\n    useEffect(() => {\n        if (loadingResults === true) {\n            return;\n        }\n        setShowLoadingSpinner(false);\n    }, [results, loadingResults]);\n\n    const onImageSelected = useCallback(\n        ({ description, urls, id, user, links }) => () => {\n            onSelect({\n                id,\n                url: urls.regular,\n                alt: description,\n                credits: {\n                    url: encodeURI(`${user.links.html}?utm_source=W3D Developer Profile&utm_medium=referral`),\n                    name: user.username\n                },\n                fromUnsplash: true\n            });\n            // eslint-disable-next-line no-undef\n            fetch(`${endpoints?.unsplashProxy}?url=${links.download_location}`);\n        },\n        [onSelect]\n    );\n\n    return (\n        <div className={classes.results}>\n            {showLoadingSpinner && <LoadingSpinner />}\n            {!showLoadingSpinner &&\n                results?.map(({ id, urls, description, user, links }) => (\n                    <Tooltip key={`unsplash_picture_${id}`} title=\"Select this picture\">\n                        <button\n                            key={`result_${id}`}\n                            type=\"button\"\n                            className={classes.imageContainer}\n                            onClick={onImageSelected({ description, urls, id, user, links })}\n                        >\n                            <img className={classes.image} src={urls.regular} alt={description} />\n                        </button>\n                    </Tooltip>\n                ))}\n        </div>\n    );\n};\n\nexport const SearchUnsplashDialog = SearchUnsplashDialogComponent;\n"]},"metadata":{},"sourceType":"module"}