{"ast":null,"code":"import mergeWith from 'lodash/mergeWith';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isArray from 'lodash/isArray';\nimport DESIGN_SYSTEM_DEFAULT_PALETTE from '@wld/ui/styles/palettes';\nimport { THEME_SCHEMA } from './theme_schema';\nimport { transformTheme } from './theme_transforms';\nconst DEFAULT_PALETTE = Object.freeze(cloneDeep(DESIGN_SYSTEM_DEFAULT_PALETTE));\nexport const DEFAULT_THEME = Object.freeze({\n  palette: DEFAULT_PALETTE,\n  miscellaneous: {\n    backgroundColor: DEFAULT_PALETTE.dark[50],\n    color: DEFAULT_PALETTE.dark[500],\n    fontFamily: ['Avenir Next', 'Open Sans', 'Roboto', 'Arial'],\n    spacing: 8\n  },\n  screenSizes: {\n    xs: 400,\n    small: 500,\n    medium: 900\n  },\n  components: {\n    banner: {\n      overlayColor: 'primary',\n      imageSource: 'https://cdn.filestackcontent.com/8I2wVnCRTFxypXRYLRsp'\n    },\n    cards: {\n      height: 470,\n      width: 470,\n      borderRadius: 20,\n      default: {\n        backgroundColor: 'dark',\n        color: 'light',\n        backBackgroundColor: 'light',\n        backColor: 'dark'\n      },\n      variants: [['primary', 'light', 'light', 'primary'], ['tertiary', 'primary', 'light', 'primary'], ['light', 'secondary', 'light', 'secondary'], ['secondary', 'light', 'light', 'secondary'], ['light', 'primary', 'light', 'primary']].map(([backgroundColor, color, backBackgroundColor, backColor]) => ({\n        backgroundColor,\n        color,\n        backBackgroundColor,\n        backColor\n      }))\n    }\n  }\n});\nexport const getRandomCardVariant = theme => {\n  var _theme$components, _theme$components$car, _theme$components$car2;\n\n  return Math.floor(Math.random() * ((_theme$components = theme.components) === null || _theme$components === void 0 ? void 0 : (_theme$components$car = _theme$components.cards) === null || _theme$components$car === void 0 ? void 0 : (_theme$components$car2 = _theme$components$car.variants) === null || _theme$components$car2 === void 0 ? void 0 : _theme$components$car2.length));\n};\n\nconst mergeFunction = (objValue, srcValue) => {\n  if (isArray(objValue)) {\n    return srcValue;\n  }\n\n  return merge(objValue, srcValue);\n};\n\nexport const buildTheme = theme => {\n  const merged = mergeWith(cloneDeep(DEFAULT_THEME), theme, mergeFunction);\n\n  try {\n    THEME_SCHEMA.validateSync(merged, {\n      context: {\n        palette: merged === null || merged === void 0 ? void 0 : merged.palette\n      },\n      strict: true\n    });\n    return transformTheme(merged);\n  } catch (error) {\n    console.error('Invalid theme! Using default theme instead.', {\n      error\n    });\n    return transformTheme({ ...DEFAULT_THEME\n    });\n  }\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/utils/styles/theme/theme.js"],"names":["mergeWith","merge","cloneDeep","isArray","DESIGN_SYSTEM_DEFAULT_PALETTE","THEME_SCHEMA","transformTheme","DEFAULT_PALETTE","Object","freeze","DEFAULT_THEME","palette","miscellaneous","backgroundColor","dark","color","fontFamily","spacing","screenSizes","xs","small","medium","components","banner","overlayColor","imageSource","cards","height","width","borderRadius","default","backBackgroundColor","backColor","variants","map","getRandomCardVariant","theme","Math","floor","random","length","mergeFunction","objValue","srcValue","buildTheme","merged","validateSync","context","strict","error","console"],"mappings":"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","sourcesContent":["import mergeWith from 'lodash/mergeWith';\nimport merge from 'lodash/merge';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isArray from 'lodash/isArray';\nimport DESIGN_SYSTEM_DEFAULT_PALETTE from '@wld/ui/styles/palettes';\n\nimport { THEME_SCHEMA } from './theme_schema';\nimport { transformTheme } from './theme_transforms';\n\nconst DEFAULT_PALETTE = Object.freeze(cloneDeep(DESIGN_SYSTEM_DEFAULT_PALETTE));\n\nexport const DEFAULT_THEME = Object.freeze({\n    palette: DEFAULT_PALETTE,\n    miscellaneous: {\n        backgroundColor: DEFAULT_PALETTE.dark[50],\n        color: DEFAULT_PALETTE.dark[500],\n        fontFamily: ['Avenir Next', 'Open Sans', 'Roboto', 'Arial'],\n        spacing: 8\n    },\n    screenSizes: {\n        xs: 400,\n        small: 500,\n        medium: 900\n    },\n    components: {\n        banner: {\n            overlayColor: 'primary',\n            imageSource: 'https://cdn.filestackcontent.com/8I2wVnCRTFxypXRYLRsp'\n        },\n        cards: {\n            height: 470,\n            width: 470,\n            borderRadius: 20,\n            default: {\n                backgroundColor: 'dark',\n                color: 'light',\n                backBackgroundColor: 'light',\n                backColor: 'dark'\n            },\n            variants: [\n                ['primary', 'light', 'light', 'primary'],\n                ['tertiary', 'primary', 'light', 'primary'],\n                ['light', 'secondary', 'light', 'secondary'],\n                ['secondary', 'light', 'light', 'secondary'],\n                ['light', 'primary', 'light', 'primary']\n            ].map(([backgroundColor, color, backBackgroundColor, backColor]) => ({\n                backgroundColor,\n                color,\n                backBackgroundColor,\n                backColor\n            }))\n        }\n    }\n});\n\nexport const getRandomCardVariant = theme => Math.floor(Math.random() * theme.components?.cards?.variants?.length);\n\nconst mergeFunction = (objValue, srcValue) => {\n    if (isArray(objValue)) {\n        return srcValue;\n    }\n    return merge(objValue, srcValue);\n};\n\nexport const buildTheme = theme => {\n    const merged = mergeWith(cloneDeep(DEFAULT_THEME), theme, mergeFunction);\n    try {\n        THEME_SCHEMA.validateSync(merged, {\n            context: { palette: merged?.palette },\n            strict: true\n        });\n        return transformTheme(merged);\n    } catch (error) {\n        console.error('Invalid theme! Using default theme instead.', { error });\n        return transformTheme({ ...DEFAULT_THEME });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}