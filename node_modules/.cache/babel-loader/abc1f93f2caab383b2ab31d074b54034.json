{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/banner/user_actions_row/customize_dialog/customize_dialog.jsx\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { createUseStyles, ThemeProvider, useTheme } from 'react-jss';\nimport { FormattedMessage } from 'react-intl';\nimport set from 'lodash/set';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { Button } from '@wld/ui';\nimport { Dialog, DialogActions, DialogContent, useMediaQuery } from '@material-ui/core';\nimport { DialogTitle } from '../../../commons/dialog/dialog_title/dialog_title';\nimport { CardsOrderer } from './card_orderer/cards_orderer';\nimport { PalettesList } from './palettes_list/palettes_list';\nimport { buildTheme } from '../../../../utils/styles/theme/theme';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\nimport { styles } from './customize_dialog_styles';\nimport { createScreenWidthMediaQuery } from '../../../../utils/styles/styles_utils';\nconst useStyles = createUseStyles(styles);\n\nconst CustomizeDialogComponent = ({\n  open,\n  onClose,\n  customizationOptions\n}) => {\n  var _value$theme;\n\n  const theme = useTheme();\n  const onlyShowPalettesList = useMediaQuery(createScreenWidthMediaQuery('max-width', theme.screenSizes.small), {\n    defaultMatches: true\n  });\n  const classes = useStyles({\n    onlyShowPalettesList\n  });\n  const [value, setValue] = useState(customizationOptions);\n  const [builtTheme, setBuiltTheme] = useState({});\n  const {\n    onCustomizationChanged\n  } = useContext(DeveloperProfileContext);\n  useEffect(() => {\n    setValue(customizationOptions);\n  }, [customizationOptions]);\n  useEffect(() => {\n    const asyncBuild = async () => {\n      const built = await buildTheme(value === null || value === void 0 ? void 0 : value.theme);\n      setBuiltTheme(built);\n    };\n\n    asyncBuild();\n  }, [JSON.stringify(value === null || value === void 0 ? void 0 : value.theme)]);\n  const onSave = useCallback(() => {\n    if (typeof onCustomizationChanged === 'function') {\n      onCustomizationChanged(value);\n    }\n\n    onClose();\n  }, [value]);\n  const onPaletteChanged = useCallback(palette => {\n    const newCustomization = cloneDeep(value || {});\n    set(newCustomization, 'theme.palette', palette);\n    setValue(newCustomization);\n\n    if (onlyShowPalettesList && typeof onCustomizationChanged === 'function') {\n      onCustomizationChanged(newCustomization);\n      onClose();\n    }\n  }, [value, onlyShowPalettesList, onSave]);\n  const onCardOrdered = useCallback(cardsOrder => {\n    const newCustomization = cloneDeep(value || {});\n    newCustomization.cardsOrder = cardsOrder;\n    setValue(newCustomization);\n  }, [value]);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    fullScreen: true,\n    open: open,\n    classes: {\n      root: classes.root,\n      paper: classes.paper\n    },\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Banner.actions.customize.dialog.title\",\n    defaultMessage: \"Customize your profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(DialogContent, {\n    classes: {\n      root: classes.content\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PalettesList, {\n    classes: {\n      container: classes.palettesList\n    },\n    onChange: onPaletteChanged,\n    value: value === null || value === void 0 ? void 0 : (_value$theme = value.theme) === null || _value$theme === void 0 ? void 0 : _value$theme.palette,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), !onlyShowPalettesList && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dividerContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: builtTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardsOrderer, {\n    onChange: onCardOrdered,\n    value: value === null || value === void 0 ? void 0 : value.cardsOrder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(DialogActions, {\n    classes: {\n      root: classes.actions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Main.lang.close\",\n    deaultMessage: \"Close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    size: \"small\",\n    onClick: onSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Main.lang.save\",\n    defaultMessage: \"Save\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport const CustomizeDialog = CustomizeDialogComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/banner/user_actions_row/customize_dialog/customize_dialog.jsx"],"names":["React","useCallback","useContext","useEffect","useState","createUseStyles","ThemeProvider","useTheme","FormattedMessage","set","cloneDeep","Button","Dialog","DialogActions","DialogContent","useMediaQuery","DialogTitle","CardsOrderer","PalettesList","buildTheme","DeveloperProfileContext","styles","createScreenWidthMediaQuery","useStyles","CustomizeDialogComponent","open","onClose","customizationOptions","theme","onlyShowPalettesList","screenSizes","small","defaultMatches","classes","value","setValue","builtTheme","setBuiltTheme","onCustomizationChanged","asyncBuild","built","JSON","stringify","onSave","onPaletteChanged","palette","newCustomization","onCardOrdered","cardsOrder","root","paper","content","container","palettesList","dividerContainer","divider","actions","CustomizeDialog"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { createUseStyles, ThemeProvider, useTheme } from 'react-jss';\nimport { FormattedMessage } from 'react-intl';\nimport set from 'lodash/set';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { Button } from '@wld/ui';\n\nimport { Dialog, DialogActions, DialogContent, useMediaQuery } from '@material-ui/core';\n\nimport { DialogTitle } from '../../../commons/dialog/dialog_title/dialog_title';\nimport { CardsOrderer } from './card_orderer/cards_orderer';\nimport { PalettesList } from './palettes_list/palettes_list';\n\nimport { buildTheme } from '../../../../utils/styles/theme/theme';\nimport { DeveloperProfileContext } from '../../../../utils/context/contexts';\n\nimport { styles } from './customize_dialog_styles';\nimport { createScreenWidthMediaQuery } from '../../../../utils/styles/styles_utils';\n\nconst useStyles = createUseStyles(styles);\n\nconst CustomizeDialogComponent = ({ open, onClose, customizationOptions }) => {\n    const theme = useTheme();\n    const onlyShowPalettesList = useMediaQuery(createScreenWidthMediaQuery('max-width', theme.screenSizes.small), {\n        defaultMatches: true\n    });\n    const classes = useStyles({ onlyShowPalettesList });\n    const [value, setValue] = useState(customizationOptions);\n    const [builtTheme, setBuiltTheme] = useState({});\n    const { onCustomizationChanged } = useContext(DeveloperProfileContext);\n\n    useEffect(() => {\n        setValue(customizationOptions);\n    }, [customizationOptions]);\n\n    useEffect(() => {\n        const asyncBuild = async () => {\n            const built = await buildTheme(value?.theme);\n            setBuiltTheme(built);\n        };\n        asyncBuild();\n    }, [JSON.stringify(value?.theme)]);\n\n    const onSave = useCallback(() => {\n        if (typeof onCustomizationChanged === 'function') {\n            onCustomizationChanged(value);\n        }\n        onClose();\n    }, [value]);\n\n    const onPaletteChanged = useCallback(\n        palette => {\n            const newCustomization = cloneDeep(value || {});\n            set(newCustomization, 'theme.palette', palette);\n            setValue(newCustomization);\n            if (onlyShowPalettesList && typeof onCustomizationChanged === 'function') {\n                onCustomizationChanged(newCustomization);\n                onClose();\n            }\n        },\n        [value, onlyShowPalettesList, onSave]\n    );\n\n    const onCardOrdered = useCallback(\n        cardsOrder => {\n            const newCustomization = cloneDeep(value || {});\n            newCustomization.cardsOrder = cardsOrder;\n            setValue(newCustomization);\n        },\n        [value]\n    );\n\n    return (\n        <Dialog\n            fullScreen\n            open={open}\n            classes={{\n                root: classes.root,\n                paper: classes.paper\n            }}\n            onClose={onClose}\n        >\n            <DialogTitle>\n                <FormattedMessage id=\"Banner.actions.customize.dialog.title\" defaultMessage=\"Customize your profile\" />\n            </DialogTitle>\n            <DialogContent\n                classes={{\n                    root: classes.content\n                }}\n            >\n                <PalettesList\n                    classes={{\n                        container: classes.palettesList\n                    }}\n                    onChange={onPaletteChanged}\n                    value={value?.theme?.palette}\n                />\n                {!onlyShowPalettesList && (\n                    <>\n                        <div className={classes.dividerContainer}>\n                            <div className={classes.divider} />\n                        </div>\n                        <ThemeProvider theme={builtTheme}>\n                            <CardsOrderer onChange={onCardOrdered} value={value?.cardsOrder} />\n                        </ThemeProvider>\n                    </>\n                )}\n            </DialogContent>\n            <DialogActions\n                classes={{\n                    root: classes.actions\n                }}\n            >\n                <Button size=\"small\" onClick={onClose}>\n                    <FormattedMessage id=\"Main.lang.close\" deaultMessage=\"Close\" />\n                </Button>\n                <Button color=\"primary\" variant=\"contained\" size=\"small\" onClick={onSave}>\n                    <FormattedMessage id=\"Main.lang.save\" defaultMessage=\"Save\" />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport const CustomizeDialog = CustomizeDialogComponent;\n"]},"metadata":{},"sourceType":"module"}