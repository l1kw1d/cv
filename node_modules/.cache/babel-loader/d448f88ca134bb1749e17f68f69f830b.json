{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/experiences/experiences_edit_dialog/experiences_edit_dialog.jsx\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { animated, useSpring, useTransition } from 'react-spring';\nimport { Twemoji } from 'react-emoji-render';\nimport { arrayMove, SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport { useFormikContext } from 'formik';\nimport moment from 'moment';\nimport keyBy from 'lodash/keyBy';\nimport uuid from 'uuid/v4';\nimport useMediaQuery from '@material-ui/core/useMediaQuery/useMediaQuery';\nimport { Checkbox, List, ListItem, TextField, Tooltip, Typography } from '@wld/ui';\nimport { EditDialog } from '../../../../commons/edit_dialog/edit_dialog';\nimport { YearMonth } from '../../../../commons/year_month/year_month';\nimport { LocationField } from '../../../../commons/location_field/location_field';\nimport { AddButton } from '../../../../commons/add_button/add_button';\nimport { ReactComponent as MoveIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../assets/icons/move_list.svg\";\nimport { ReactComponent as DeleteIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../assets/icons/trash.svg\";\nimport { ReactComponent as ArrowIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../assets/icons/keyboard_arrow_down.svg\";\nimport { EXPERIENCE_CONTENT_TRANSITION_SPRING_PROPS } from './experiences_edit_dialog_spring_props';\nimport { translations } from './experiences_edit_dialog_translations';\nimport { styles } from './experiences_edit_dialog_styles';\nconst useStyles = createUseStyles(styles);\nconst DragHandle = SortableHandle(({\n  classes\n}) => /*#__PURE__*/React.createElement(\"button\", {\n  className: classes.dragHandleButton,\n  type: \"button\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(MoveIcon, {\n  className: classes.dragHandle,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }\n})));\n\nconst ExperiencesEditDialogComponent = ({\n  open,\n  onClose,\n  data,\n  onEdit,\n  validationSchema,\n  isEditing\n}) => {\n  const {\n    formatMessage\n  } = useIntl();\n  const validationSchemaToPass = useMemo(() => validationSchema(formatMessage), [validationSchema]);\n  return /*#__PURE__*/React.createElement(EditDialog, {\n    open: open,\n    onClose: onClose,\n    data: data,\n    isEditing: isEditing,\n    onEdit: onEdit,\n    validationSchema: validationSchemaToPass,\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Experiences.editDialog.title\",\n      defaultMessage: \"Edit your professional experiences?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, helpers => /*#__PURE__*/React.createElement(ExperiencesEditFormWrapper, {\n    helpers: helpers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }));\n};\n\nconst ExperiencesEditFormWrapper = ({\n  helpers: {\n    handleValueChange\n  }\n}) => {\n  const {\n    values: {\n      work\n    },\n    errors: validationErrors\n  } = useFormikContext();\n  const errors = validationErrors;\n  const experienceFieldChanged = useCallback((experienceIndex, field, value) => {\n    handleValueChange(`work[${experienceIndex}].${field}`)(value);\n  }, []);\n  const experienceDeleted = useCallback(idToDelete => () => {\n    handleValueChange('work')(work.filter(({\n      id\n    }) => id !== idToDelete));\n  }, [JSON.stringify(work)]);\n  const addExperience = useCallback(() => {\n    const id = uuid();\n    handleValueChange('work')(work.concat({\n      index: work.length,\n      id\n    }));\n  }, [JSON.stringify(work)]);\n  const move = useCallback(({\n    oldIndex,\n    newIndex\n  }) => {\n    handleValueChange('work')(arrayMove(work, oldIndex, newIndex).map((data, index) => ({ ...data,\n      index\n    })));\n  }, [work]);\n  return /*#__PURE__*/React.createElement(ExperiencesEditForm, {\n    data: work,\n    errors: errors === null || errors === void 0 ? void 0 : errors.work,\n    onAdd: addExperience,\n    onMove: move,\n    onFieldChange: experienceFieldChanged,\n    onDelete: experienceDeleted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  });\n};\n\nconst JobTitle = ({\n  experience\n}) => {\n  const {\n    formatMessage\n  } = useIntl();\n  const title = useMemo(() => {\n    var _experience$startDate, _experience$endDate;\n\n    const payload = {\n      jobTitle: experience.position,\n      companyName: experience.name,\n      start: (_experience$startDate = experience.startDate) === null || _experience$startDate === void 0 ? void 0 : _experience$startDate.format('MMMM YYYY'),\n      end: (_experience$endDate = experience.endDate) === null || _experience$endDate === void 0 ? void 0 : _experience$endDate.format('MMMM YYYY')\n    };\n\n    if (payload.companyName) {\n      if (!payload.end) {\n        return formatMessage(translations.jobTitleCompanyNoEnd, payload);\n      }\n\n      return formatMessage(translations.jobTitleCompanyBothDates, payload);\n    }\n\n    if (payload.end) {\n      return formatMessage(translations.jobTitleNoCompanyNoEnd, payload);\n    }\n\n    return formatMessage(translations.jobTitleNoCompanyBothDates, payload);\n  }, [experience]);\n  return title;\n};\n\nconst ExperienceItem = SortableElement(({\n  id,\n  experience,\n  onChange,\n  onRemove,\n  error: fieldErrors,\n  folded,\n  toggleFold,\n  classes,\n  experienceIndex: index\n}) => {\n  const {\n    formatMessage\n  } = useIntl();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`);\n  const {\n    rotate\n  } = useSpring({\n    rotate: folded ? -90 : 0\n  });\n  const contentTransitions = useTransition(!folded ? experience : null, item => `${item ? 'visible' : 'invisible'}_experience_${item === null || item === void 0 ? void 0 : item.id}_content`, { ...EXPERIENCE_CONTENT_TRANSITION_SPRING_PROPS,\n    unique: true\n  });\n  const hasError = Boolean(fieldErrors);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.experience,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.smallItemContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DragHandle, {\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Main.lang.delete\",\n      defaultMessage: \"Delete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 37\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.removeButton,\n    type: \"button\",\n    onClick: onRemove(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    className: classes.removeIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 29\n    }\n  }))), !isMobile && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 35\n    }\n  }), /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    className: cn(classes.listItem, hasError && classes.listItemError),\n    onClick: () => toggleFold(!folded),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(animated.div, {\n    className: classes.arrowContainer,\n    style: {\n      transform: rotate.to(value => `rotate(${value}deg)`)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ArrowIcon, {\n    className: cn('refinement-arrow'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 29\n    }\n  })), hasError && /*#__PURE__*/React.createElement(Twemoji, {\n    className: classes.warningIcon,\n    svg: true,\n    text: \"\\u26A0\\uFE0F\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 38\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.smallTitle,\n    color: \"dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(JobTitle, Object.assign({\n    experience\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 29\n    }\n  }))))), contentTransitions.map(({\n    item,\n    key,\n    props\n  }) => item && /*#__PURE__*/React.createElement(animated.div, {\n    key: key,\n    style: props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(ContentFields, {\n    key: key,\n    fieldErrors: fieldErrors,\n    id: id,\n    formatMessage: formatMessage,\n    experience: experience,\n    onChange: onChange,\n    classes: classes,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 33\n    }\n  }))));\n});\n\nconst ContentFields = ({\n  fieldErrors,\n  id,\n  formatMessage,\n  experience,\n  onChange,\n  classes,\n  index\n}) => {\n  var _experience$place;\n\n  const stillEmployed = !experience.endDate;\n  const handleStillEmployedChange = useCallback(() => {\n    if (!stillEmployed) {\n      onChange(index, 'endDate', null);\n    } else {\n      onChange(index, 'endDate', moment());\n    }\n  }, [index, stillEmployed]);\n  const stillEmployedComponent = /*#__PURE__*/React.createElement(StillEmployedField, Object.assign({\n    value: stillEmployed\n  }, {\n    handleStillEmployedChange,\n    formatMessage,\n    classes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }));\n  const handleNameChange = useCallback(e => onChange(index, 'name', e.target.value), [index]);\n  const handlePositionChange = useCallback(e => onChange(index, 'position', e.target.value), [index]);\n  const handleSummaryChange = useCallback(e => onChange(index, 'summary', e.target.value), [index]);\n  const handleStartDate = useCallback(value => onChange(index, 'startDate', value), [index]);\n  const handleEndDate = useCallback(value => onChange(index, 'endDate', value), [index]);\n  const handleLocationChange = useCallback(value => onChange(index, 'place', value), [index]);\n  const handleLocationTextChange = useCallback(value => onChange(index, 'place', {\n    name: value.target.value\n  }), [index]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.line,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    color: \"dark\",\n    variant: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, formatMessage(translations.companyName)), /*#__PURE__*/React.createElement(TextField, {\n    id: `experience_companyName_${id}`,\n    placeholder: formatMessage(translations.companyNamePlaceholder),\n    value: experience.name,\n    onChange: handleNameChange,\n    margin: \"normal\",\n    variant: \"flat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 25\n    }\n  }), (fieldErrors === null || fieldErrors === void 0 ? void 0 : fieldErrors.name) && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    variant: \"helper\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 29\n    }\n  }, fieldErrors.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    color: \"dark\",\n    variant: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 25\n    }\n  }, formatMessage(translations.jobTitle)), /*#__PURE__*/React.createElement(TextField, {\n    id: `experience_jobTitle_${id}`,\n    placeholder: formatMessage(translations.jobTitlePlaceholder),\n    value: experience.position,\n    onChange: handlePositionChange,\n    margin: \"normal\",\n    variant: \"flat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 25\n    }\n  }), (fieldErrors === null || fieldErrors === void 0 ? void 0 : fieldErrors.position) && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    variant: \"helper\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 29\n    }\n  }, fieldErrors.position))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    color: \"dark\",\n    variant: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 25\n    }\n  }, formatMessage(translations.jobPlace)), /*#__PURE__*/React.createElement(LocationField, {\n    id: `experience_jobPlace_${id}`,\n    placeholder: formatMessage(translations.jobPlacePlaceholder),\n    value: (_experience$place = experience.place) === null || _experience$place === void 0 ? void 0 : _experience$place.name,\n    onLocationSelected: handleLocationChange,\n    onChange: handleLocationTextChange,\n    margin: \"normal\",\n    variant: \"flat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 25\n    }\n  }), (fieldErrors === null || fieldErrors === void 0 ? void 0 : fieldErrors.place) && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    variant: \"helper\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 29\n    }\n  }, (fieldErrors === null || fieldErrors === void 0 ? void 0 : fieldErrors.place.name) || fieldErrors.place))), /*#__PURE__*/React.createElement(\"div\", {\n    className: cn(classes.fieldRow, classes.yearMonthRow),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.yearMonthWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(YearMonth, {\n    textfieldProps: {\n      fullWidth: true\n    },\n    variant: \"flat\",\n    value: experience.startDate,\n    onChange: handleStartDate,\n    title: translations.startDate,\n    error: fieldErrors === null || fieldErrors === void 0 ? void 0 : fieldErrors.startDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 29\n    }\n  })), !stillEmployed && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(YearMonth, {\n    variant: \"flat\",\n    value: experience.endDate,\n    onChange: handleEndDate,\n    title: translations.endDate,\n    error: fieldErrors === null || fieldErrors === void 0 ? void 0 : fieldErrors.endDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 33\n    }\n  }))), stillEmployed && stillEmployedComponent), !stillEmployed && stillEmployedComponent, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fieldRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cn(classes.fieldContainer, classes.fullWidthFieldContainer),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    color: \"dark\",\n    variant: \"label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 25\n    }\n  }, formatMessage(translations.descriptionTitle)), /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    id: `experience_description_${id}`,\n    placeholder: formatMessage(translations.descriptionPlaceholder),\n    value: experience.summary,\n    onChange: handleSummaryChange,\n    margin: \"normal\",\n    variant: \"flat\",\n    multiline: true,\n    rows: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 25\n    }\n  }), (fieldErrors === null || fieldErrors === void 0 ? void 0 : fieldErrors.summary) && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    variant: \"helper\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 29\n    }\n  }, fieldErrors.summary)))));\n};\n\nconst SortableExperiences = SortableContainer(({\n  items = [],\n  experienceFieldChanged,\n  experienceDeleted,\n  formatMessage,\n  errors,\n  foldedState,\n  toggleFold,\n  classes\n}) => /*#__PURE__*/React.createElement(List, {\n  component: \"nav\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 9\n  }\n}, items.filter(Boolean).sort(({\n  index: a\n}, {\n  index: b\n}) => a - b).map((experience, index) => /*#__PURE__*/React.createElement(ExperienceItem, {\n  index: index,\n  key: `work_${experience.id}_${index}`,\n  onChange: experienceFieldChanged,\n  onRemove: experienceDeleted,\n  id: experience.id,\n  experience: experience,\n  formatMessage: formatMessage,\n  error: errors && errors[index],\n  folded: foldedState[experience.id],\n  toggleFold: toggleFold(experience.id),\n  classes: classes,\n  experienceIndex: index,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 21\n  }\n}))));\n\nconst StillEmployedField = ({\n  value,\n  classes,\n  handleStillEmployedChange,\n  formatMessage\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: cn(classes.fieldRow, value && cn(classes.fieldRowJustifyEnd, classes.withMarginStillEmployedFieldRow)),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"button\", {\n  type: \"button\",\n  className: cn(classes.fieldContainer, classes.checkboxField),\n  onClick: handleStillEmployedChange,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(Checkbox, {\n  color: \"secondary\",\n  checked: value,\n  variant: \"outlined\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 13\n  }\n}), /*#__PURE__*/React.createElement(Typography, {\n  customClasses: {\n    container: classes.typography\n  },\n  color: \"dark\",\n  component: \"div\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 13\n  }\n}, formatMessage(translations.stillEmployed))));\n\nconst ExperiencesEditForm = ({\n  data,\n  errors,\n  onAdd,\n  onMove,\n  onFieldChange,\n  onDelete\n}) => {\n  const classes = useStyles({});\n  const keyedValues = useMemo(() => keyBy(data, ({\n    id\n  }) => id), [data]);\n  const [foldedState, setFoldState] = useState(Object.keys(keyedValues || {}).reduce((state, id) => {\n    // eslint-disable-next-line no-param-reassign\n    state[id] = true;\n    return state;\n  }, {}));\n  const toggleFold = useCallback(id => value => {\n    const newFoldState = { ...foldedState\n    };\n    newFoldState[id] = value;\n    setFoldState(newFoldState);\n  }, [foldedState]);\n  const globalError = typeof errors === 'string' && errors;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SortableExperiences, Object.assign({\n    lockToContainerEdges: true,\n    helperClass: classes.sortableHelper,\n    onSortEnd: onMove,\n    items: data,\n    distance: 15,\n    useDragHandle: true,\n    lockAxis: \"y\",\n    experienceFieldChanged: onFieldChange,\n    experienceDeleted: onDelete\n  }, {\n    errors,\n    foldedState,\n    toggleFold,\n    classes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(AddButton, {\n    onClick: onAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 13\n    }\n  }), globalError && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 17\n    }\n  }, errors));\n};\n\nexport const ExperiencesEditDialog = ExperiencesEditDialogComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/experiences/experiences_edit_dialog/experiences_edit_dialog.jsx"],"names":["React","useCallback","useMemo","useState","cn","createUseStyles","useTheme","FormattedMessage","useIntl","animated","useSpring","useTransition","Twemoji","arrayMove","SortableContainer","SortableElement","SortableHandle","useFormikContext","moment","keyBy","uuid","useMediaQuery","Checkbox","List","ListItem","TextField","Tooltip","Typography","EditDialog","YearMonth","LocationField","AddButton","EXPERIENCE_CONTENT_TRANSITION_SPRING_PROPS","translations","styles","useStyles","DragHandle","classes","dragHandleButton","dragHandle","ExperiencesEditDialogComponent","open","onClose","data","onEdit","validationSchema","isEditing","formatMessage","validationSchemaToPass","helpers","ExperiencesEditFormWrapper","handleValueChange","values","work","errors","validationErrors","experienceFieldChanged","experienceIndex","field","value","experienceDeleted","idToDelete","filter","id","JSON","stringify","addExperience","concat","index","length","move","oldIndex","newIndex","map","JobTitle","experience","title","payload","jobTitle","position","companyName","name","start","startDate","format","end","endDate","jobTitleCompanyNoEnd","jobTitleCompanyBothDates","jobTitleNoCompanyNoEnd","jobTitleNoCompanyBothDates","ExperienceItem","onChange","onRemove","error","fieldErrors","folded","toggleFold","theme","isMobile","screenSizes","small","rotate","contentTransitions","item","unique","hasError","Boolean","smallItemContainer","divider","removeButton","removeIcon","listItem","listItemError","arrowContainer","transform","to","warningIcon","smallTitle","key","props","ContentFields","stillEmployed","handleStillEmployedChange","stillEmployedComponent","handleNameChange","e","target","handlePositionChange","handleSummaryChange","handleStartDate","handleEndDate","handleLocationChange","handleLocationTextChange","content","line","fields","fieldRow","fieldContainer","companyNamePlaceholder","jobTitlePlaceholder","jobPlace","jobPlacePlaceholder","place","yearMonthRow","yearMonthWrapper","fullWidth","fullWidthFieldContainer","descriptionTitle","descriptionPlaceholder","summary","SortableExperiences","items","foldedState","sort","a","b","StillEmployedField","fieldRowJustifyEnd","withMarginStillEmployedFieldRow","checkboxField","container","typography","ExperiencesEditForm","onAdd","onMove","onFieldChange","onDelete","keyedValues","setFoldState","Object","keys","reduce","state","newFoldState","globalError","sortableHelper","ExperiencesEditDialog"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { animated, useSpring, useTransition } from 'react-spring';\nimport { Twemoji } from 'react-emoji-render';\nimport { arrayMove, SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport { useFormikContext } from 'formik';\nimport moment from 'moment';\nimport keyBy from 'lodash/keyBy';\nimport uuid from 'uuid/v4';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery/useMediaQuery';\nimport { Checkbox, List, ListItem, TextField, Tooltip, Typography } from '@wld/ui';\n\nimport { EditDialog } from '../../../../commons/edit_dialog/edit_dialog';\nimport { YearMonth } from '../../../../commons/year_month/year_month';\nimport { LocationField } from '../../../../commons/location_field/location_field';\nimport { AddButton } from '../../../../commons/add_button/add_button';\n\nimport { ReactComponent as MoveIcon } from '../../../../../assets/icons/move_list.svg';\nimport { ReactComponent as DeleteIcon } from '../../../../../assets/icons/trash.svg';\nimport { ReactComponent as ArrowIcon } from '../../../../../assets/icons/keyboard_arrow_down.svg';\n\nimport { EXPERIENCE_CONTENT_TRANSITION_SPRING_PROPS } from './experiences_edit_dialog_spring_props';\n\nimport { translations } from './experiences_edit_dialog_translations';\nimport { styles } from './experiences_edit_dialog_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst DragHandle = SortableHandle(({ classes }) => (\n    <button className={classes.dragHandleButton} type=\"button\">\n        <MoveIcon className={classes.dragHandle} />\n    </button>\n));\n\nconst ExperiencesEditDialogComponent = ({ open, onClose, data, onEdit, validationSchema, isEditing }) => {\n    const { formatMessage } = useIntl();\n    const validationSchemaToPass = useMemo(() => validationSchema(formatMessage), [validationSchema]);\n\n    return (\n        <EditDialog\n            open={open}\n            onClose={onClose}\n            data={data}\n            isEditing={isEditing}\n            onEdit={onEdit}\n            validationSchema={validationSchemaToPass}\n            title={\n                <FormattedMessage\n                    id=\"Experiences.editDialog.title\"\n                    defaultMessage=\"Edit your professional experiences?\"\n                />\n            }\n        >\n            {helpers => <ExperiencesEditFormWrapper helpers={helpers} />}\n        </EditDialog>\n    );\n};\n\nconst ExperiencesEditFormWrapper = ({ helpers: { handleValueChange } }) => {\n    const {\n        values: { work },\n        errors: validationErrors\n    } = useFormikContext();\n\n    const errors = validationErrors;\n\n    const experienceFieldChanged = useCallback((experienceIndex, field, value) => {\n        handleValueChange(`work[${experienceIndex}].${field}`)(value);\n    }, []);\n    const experienceDeleted = useCallback(\n        idToDelete => () => {\n            handleValueChange('work')(work.filter(({ id }) => id !== idToDelete));\n        },\n        [JSON.stringify(work)]\n    );\n\n    const addExperience = useCallback(() => {\n        const id = uuid();\n        handleValueChange('work')(\n            work.concat({\n                index: work.length,\n                id\n            })\n        );\n    }, [JSON.stringify(work)]);\n\n    const move = useCallback(\n        ({ oldIndex, newIndex }) => {\n            handleValueChange('work')(arrayMove(work, oldIndex, newIndex).map((data, index) => ({ ...data, index })));\n        },\n        [work]\n    );\n\n    return (\n        <ExperiencesEditForm\n            data={work}\n            errors={errors?.work}\n            onAdd={addExperience}\n            onMove={move}\n            onFieldChange={experienceFieldChanged}\n            onDelete={experienceDeleted}\n        />\n    );\n};\n\nconst JobTitle = ({ experience }) => {\n    const { formatMessage } = useIntl();\n    const title = useMemo(() => {\n        const payload = {\n            jobTitle: experience.position,\n            companyName: experience.name,\n            start: experience.startDate?.format('MMMM YYYY'),\n            end: experience.endDate?.format('MMMM YYYY')\n        };\n        if (payload.companyName) {\n            if (!payload.end) {\n                return formatMessage(translations.jobTitleCompanyNoEnd, payload);\n            }\n            return formatMessage(translations.jobTitleCompanyBothDates, payload);\n        }\n        if (payload.end) {\n            return formatMessage(translations.jobTitleNoCompanyNoEnd, payload);\n        }\n        return formatMessage(translations.jobTitleNoCompanyBothDates, payload);\n    }, [experience]);\n\n    return title;\n};\n\nconst ExperienceItem = SortableElement(\n    ({\n        id,\n        experience,\n        onChange,\n        onRemove,\n        error: fieldErrors,\n        folded,\n        toggleFold,\n        classes,\n        experienceIndex: index\n    }) => {\n        const { formatMessage } = useIntl();\n        const theme = useTheme();\n        const isMobile = useMediaQuery(`(max-width: ${theme.screenSizes.small}px)`);\n\n        const { rotate } = useSpring({\n            rotate: folded ? -90 : 0\n        });\n\n        const contentTransitions = useTransition(\n            !folded ? experience : null,\n            item => `${item ? 'visible' : 'invisible'}_experience_${item?.id}_content`,\n            {\n                ...EXPERIENCE_CONTENT_TRANSITION_SPRING_PROPS,\n                unique: true\n            }\n        );\n\n        const hasError = Boolean(fieldErrors);\n        return (\n            <div className={classes.experience}>\n                <div className={classes.smallItemContainer}>\n                    <DragHandle classes={classes} />\n                    <div className={classes.divider} />\n                    <Tooltip title={<FormattedMessage id=\"Main.lang.delete\" defaultMessage=\"Delete\" />}>\n                        <button className={classes.removeButton} type=\"button\" onClick={onRemove(id)}>\n                            <DeleteIcon className={classes.removeIcon} />\n                        </button>\n                    </Tooltip>\n                    {!isMobile && <div className={classes.divider} />}\n                    <ListItem\n                        button\n                        className={cn(classes.listItem, hasError && classes.listItemError)}\n                        onClick={() => toggleFold(!folded)}\n                    >\n                        <animated.div\n                            className={classes.arrowContainer}\n                            style={{\n                                transform: rotate.to(value => `rotate(${value}deg)`)\n                            }}\n                        >\n                            <ArrowIcon className={cn('refinement-arrow')} />\n                        </animated.div>\n                        {hasError && <Twemoji className={classes.warningIcon} svg text=\"⚠️\" />}\n                        <Typography className={classes.smallTitle} color=\"dark\">\n                            <JobTitle {...{ experience }} />\n                        </Typography>\n                    </ListItem>\n                </div>\n                {contentTransitions.map(\n                    ({ item, key, props }) =>\n                        item && (\n                            <animated.div key={key} style={props}>\n                                <ContentFields\n                                    key={key}\n                                    fieldErrors={fieldErrors}\n                                    id={id}\n                                    formatMessage={formatMessage}\n                                    experience={experience}\n                                    onChange={onChange}\n                                    classes={classes}\n                                    index={index}\n                                />\n                            </animated.div>\n                        )\n                )}\n            </div>\n        );\n    }\n);\n\nconst ContentFields = ({ fieldErrors, id, formatMessage, experience, onChange, classes, index }) => {\n    const stillEmployed = !experience.endDate;\n\n    const handleStillEmployedChange = useCallback(() => {\n        if (!stillEmployed) {\n            onChange(index, 'endDate', null);\n        } else {\n            onChange(index, 'endDate', moment());\n        }\n    }, [index, stillEmployed]);\n\n    const stillEmployedComponent = (\n        <StillEmployedField value={stillEmployed} {...{ handleStillEmployedChange, formatMessage, classes }} />\n    );\n\n    const handleNameChange = useCallback(e => onChange(index, 'name', e.target.value), [index]);\n    const handlePositionChange = useCallback(e => onChange(index, 'position', e.target.value), [index]);\n    const handleSummaryChange = useCallback(e => onChange(index, 'summary', e.target.value), [index]);\n    const handleStartDate = useCallback(value => onChange(index, 'startDate', value), [index]);\n    const handleEndDate = useCallback(value => onChange(index, 'endDate', value), [index]);\n    const handleLocationChange = useCallback(value => onChange(index, 'place', value), [index]);\n    const handleLocationTextChange = useCallback(value => onChange(index, 'place', { name: value.target.value }), [\n        index\n    ]);\n\n    return (\n        <div className={classes.content}>\n            <div className={classes.line} />\n            <div className={classes.fields}>\n                <div className={classes.fieldRow}>\n                    <div className={classes.fieldContainer}>\n                        <Typography component=\"p\" color=\"dark\" variant=\"label\">\n                            {formatMessage(translations.companyName)}\n                        </Typography>\n                        <TextField\n                            id={`experience_companyName_${id}`}\n                            placeholder={formatMessage(translations.companyNamePlaceholder)}\n                            value={experience.name}\n                            onChange={handleNameChange}\n                            margin=\"normal\"\n                            variant=\"flat\"\n                        />\n                        {fieldErrors?.name && (\n                            <Typography color=\"danger\" variant=\"helper\" component=\"p\">\n                                {fieldErrors.name}\n                            </Typography>\n                        )}\n                    </div>\n                    <div className={classes.fieldContainer}>\n                        <Typography component=\"p\" color=\"dark\" variant=\"label\">\n                            {formatMessage(translations.jobTitle)}\n                        </Typography>\n                        <TextField\n                            id={`experience_jobTitle_${id}`}\n                            placeholder={formatMessage(translations.jobTitlePlaceholder)}\n                            value={experience.position}\n                            onChange={handlePositionChange}\n                            margin=\"normal\"\n                            variant=\"flat\"\n                        />\n                        {fieldErrors?.position && (\n                            <Typography color=\"danger\" variant=\"helper\" component=\"p\">\n                                {fieldErrors.position}\n                            </Typography>\n                        )}\n                    </div>\n                </div>\n                <div className={classes.fieldRow}>\n                    <div className={classes.fieldContainer}>\n                        <Typography component=\"p\" color=\"dark\" variant=\"label\">\n                            {formatMessage(translations.jobPlace)}\n                        </Typography>\n                        <LocationField\n                            id={`experience_jobPlace_${id}`}\n                            placeholder={formatMessage(translations.jobPlacePlaceholder)}\n                            value={experience.place?.name}\n                            onLocationSelected={handleLocationChange}\n                            onChange={handleLocationTextChange}\n                            margin=\"normal\"\n                            variant=\"flat\"\n                        />\n                        {fieldErrors?.place && (\n                            <Typography color=\"danger\" variant=\"helper\" component=\"p\">\n                                {fieldErrors?.place.name || fieldErrors.place}\n                            </Typography>\n                        )}\n                    </div>\n                </div>\n                <div className={cn(classes.fieldRow, classes.yearMonthRow)}>\n                    <div className={classes.yearMonthWrapper}>\n                        <div className={classes.fieldContainer}>\n                            <YearMonth\n                                textfieldProps={{ fullWidth: true }}\n                                variant=\"flat\"\n                                value={experience.startDate}\n                                onChange={handleStartDate}\n                                title={translations.startDate}\n                                error={fieldErrors?.startDate}\n                            />\n                        </div>\n                        {!stillEmployed && (\n                            <div className={classes.fieldContainer}>\n                                <YearMonth\n                                    variant=\"flat\"\n                                    value={experience.endDate}\n                                    onChange={handleEndDate}\n                                    title={translations.endDate}\n                                    error={fieldErrors?.endDate}\n                                />\n                            </div>\n                        )}\n                    </div>\n                    {stillEmployed && stillEmployedComponent}\n                </div>\n                {!stillEmployed && stillEmployedComponent}\n                <div className={classes.fieldRow}>\n                    <div className={cn(classes.fieldContainer, classes.fullWidthFieldContainer)}>\n                        <Typography component=\"p\" color=\"dark\" variant=\"label\">\n                            {formatMessage(translations.descriptionTitle)}\n                        </Typography>\n                        <TextField\n                            fullWidth\n                            id={`experience_description_${id}`}\n                            placeholder={formatMessage(translations.descriptionPlaceholder)}\n                            value={experience.summary}\n                            onChange={handleSummaryChange}\n                            margin=\"normal\"\n                            variant=\"flat\"\n                            multiline\n                            rows={4}\n                        />\n                        {fieldErrors?.summary && (\n                            <Typography color=\"danger\" variant=\"helper\" component=\"p\">\n                                {fieldErrors.summary}\n                            </Typography>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst SortableExperiences = SortableContainer(\n    ({\n        items = [],\n        experienceFieldChanged,\n        experienceDeleted,\n        formatMessage,\n        errors,\n        foldedState,\n        toggleFold,\n        classes\n    }) => (\n        <List component=\"nav\">\n            {items\n                .filter(Boolean)\n                .sort(({ index: a }, { index: b }) => a - b)\n                .map((experience, index) => (\n                    <ExperienceItem\n                        index={index}\n                        key={`work_${experience.id}_${index}`}\n                        onChange={experienceFieldChanged}\n                        onRemove={experienceDeleted}\n                        id={experience.id}\n                        experience={experience}\n                        formatMessage={formatMessage}\n                        error={errors && errors[index]}\n                        folded={foldedState[experience.id]}\n                        toggleFold={toggleFold(experience.id)}\n                        classes={classes}\n                        experienceIndex={index}\n                    />\n                ))}\n        </List>\n    )\n);\n\nconst StillEmployedField = ({ value, classes, handleStillEmployedChange, formatMessage }) => (\n    <div\n        className={cn(\n            classes.fieldRow,\n            value && cn(classes.fieldRowJustifyEnd, classes.withMarginStillEmployedFieldRow)\n        )}\n    >\n        <button\n            type=\"button\"\n            className={cn(classes.fieldContainer, classes.checkboxField)}\n            onClick={handleStillEmployedChange}\n        >\n            <Checkbox color=\"secondary\" checked={value} variant=\"outlined\" />\n            <Typography customClasses={{ container: classes.typography }} color=\"dark\" component=\"div\">\n                {formatMessage(translations.stillEmployed)}\n            </Typography>\n        </button>\n    </div>\n);\n\nconst ExperiencesEditForm = ({ data, errors, onAdd, onMove, onFieldChange, onDelete }) => {\n    const classes = useStyles({});\n    const keyedValues = useMemo(() => keyBy(data, ({ id }) => id), [data]);\n\n    const [foldedState, setFoldState] = useState(\n        Object.keys(keyedValues || {}).reduce((state, id) => {\n            // eslint-disable-next-line no-param-reassign\n            state[id] = true;\n            return state;\n        }, {})\n    );\n\n    const toggleFold = useCallback(\n        id => value => {\n            const newFoldState = { ...foldedState };\n            newFoldState[id] = value;\n            setFoldState(newFoldState);\n        },\n        [foldedState]\n    );\n\n    const globalError = typeof errors === 'string' && errors;\n\n    return (\n        <div className={classes.container}>\n            <SortableExperiences\n                lockToContainerEdges\n                helperClass={classes.sortableHelper}\n                onSortEnd={onMove}\n                items={data}\n                distance={15}\n                useDragHandle\n                lockAxis=\"y\"\n                experienceFieldChanged={onFieldChange}\n                experienceDeleted={onDelete}\n                {...{\n                    errors,\n                    foldedState,\n                    toggleFold,\n                    classes\n                }}\n            />\n            <AddButton onClick={onAdd} />\n            {globalError && (\n                <Typography color=\"danger\" component=\"p\">\n                    {errors}\n                </Typography>\n            )}\n        </div>\n    );\n};\n\nexport const ExperiencesEditDialog = ExperiencesEditDialogComponent;\n"]},"metadata":{},"sourceType":"module"}