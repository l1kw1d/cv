{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/commons/slider_with_popper/slider_with_popper.jsx\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { PopperCard, Slider } from '@wld/ui';\nimport { styles } from './slider_with_popper_styles';\nconst useStyles = createUseStyles(styles);\nexport const SliderWithPopper = ({\n  color,\n  name,\n  value,\n  onChange,\n  min,\n  max,\n  debounce = 500,\n  classes: receivedClasses = {},\n  popperCardProps\n}) => {\n  const classes = useStyles();\n  const [isFocused, setIsFocused] = useState(false);\n  const [localValue, setLocalValue] = useState(value);\n  const handleFocus = useCallback(() => setIsFocused(true), []);\n  const handleBlur = useCallback(() => setIsFocused(false), []);\n  const timer = useRef();\n  const thumbReference = useRef();\n  useEffect(() => {\n    setLocalValue(value);\n  }, [value]);\n  const handleChange = useCallback(e => {\n    e.persist();\n    const newValue = e.target.value;\n\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n\n    setLocalValue(newValue);\n\n    if (debounce) {\n      timer.current = setTimeout(() => onChange(e), debounce);\n    } else {\n      onChange(e);\n    }\n  }, [onChange]);\n  return /*#__PURE__*/React.createElement(Slider, {\n    classes: {\n      container: cn(classes.container, receivedClasses.container)\n    },\n    color: color,\n    name: name,\n    value: localValue,\n    onChange: handleChange,\n    min: min,\n    max: max,\n    onMouseDown: handleFocus,\n    onMouseUp: handleBlur,\n    thumbReference: thumbReference,\n    thumbChildren: /*#__PURE__*/React.createElement(PopperCard, Object.assign({\n      open: isFocused,\n      anchorElement: thumbReference.current,\n      popperProps: {\n        disablePortal: true,\n        modifiers: {\n          preventOverflow: {\n            boundariesElement: 'viewport'\n          },\n          hide: {\n            enabled: false\n          }\n        }\n      }\n    }, popperCardProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }), localValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  });\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/commons/slider_with_popper/slider_with_popper.jsx"],"names":["React","useCallback","useEffect","useRef","useState","cn","createUseStyles","PopperCard","Slider","styles","useStyles","SliderWithPopper","color","name","value","onChange","min","max","debounce","classes","receivedClasses","popperCardProps","isFocused","setIsFocused","localValue","setLocalValue","handleFocus","handleBlur","timer","thumbReference","handleChange","e","persist","newValue","target","current","clearTimeout","setTimeout","container","disablePortal","modifiers","preventOverflow","boundariesElement","hide","enabled"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\n\nimport { PopperCard, Slider } from '@wld/ui';\n\nimport { styles } from './slider_with_popper_styles';\n\nconst useStyles = createUseStyles(styles);\n\nexport const SliderWithPopper = ({\n    color,\n    name,\n    value,\n    onChange,\n    min,\n    max,\n    debounce = 500,\n    classes: receivedClasses = {},\n    popperCardProps\n}) => {\n    const classes = useStyles();\n\n    const [isFocused, setIsFocused] = useState(false);\n    const [localValue, setLocalValue] = useState(value);\n\n    const handleFocus = useCallback(() => setIsFocused(true), []);\n    const handleBlur = useCallback(() => setIsFocused(false), []);\n\n    const timer = useRef();\n    const thumbReference = useRef();\n\n    useEffect(() => {\n        setLocalValue(value);\n    }, [value]);\n\n    const handleChange = useCallback(\n        e => {\n            e.persist();\n            const newValue = e.target.value;\n            if (timer.current) {\n                clearTimeout(timer.current);\n            }\n            setLocalValue(newValue);\n            if (debounce) {\n                timer.current = setTimeout(() => onChange(e), debounce);\n            } else {\n                onChange(e);\n            }\n        },\n        [onChange]\n    );\n\n    return (\n        <Slider\n            classes={{\n                container: cn(classes.container, receivedClasses.container)\n            }}\n            color={color}\n            name={name}\n            value={localValue}\n            onChange={handleChange}\n            min={min}\n            max={max}\n            onMouseDown={handleFocus}\n            onMouseUp={handleBlur}\n            thumbReference={thumbReference}\n            thumbChildren={\n                <PopperCard\n                    open={isFocused}\n                    anchorElement={thumbReference.current}\n                    popperProps={{\n                        disablePortal: true,\n                        modifiers: {\n                            preventOverflow: {\n                                boundariesElement: 'viewport'\n                            },\n                            hide: {\n                                enabled: false\n                            }\n                        }\n                    }}\n                    {...popperCardProps}\n                >\n                    {localValue}\n                </PopperCard>\n            }\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}