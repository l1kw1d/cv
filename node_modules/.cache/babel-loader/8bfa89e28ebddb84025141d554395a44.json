{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/languages/languages_back/languages_back.jsx\";\nimport React, { memo, useMemo } from 'react';\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\nimport chroma from 'chroma-js';\nimport { ProfileCardAnimatedBack } from '../../../../commons/profile_card/profile_card_animated_back/profile_card_animated_back';\nimport { LanguageColumn } from './language_column/language_column';\nimport { getColorsFromCardVariant, getHexFromPaletteColor } from '../../../../../utils/styles/styles_utils';\nimport { useCardVariant } from '../../../../hooks/profile_card_hooks/use_card_variant';\nimport { LANGUAGES_COLUMN_TRANSITIONS_SPRING_PROPS } from './languages_back_spring_props';\nimport { styles } from './languages_back_styles';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoLanguage } from './no_language/no_language';\nconst useStyles = createUseStyles(styles);\n\nconst LanguagesBackComponent = ({\n  data,\n  handleAddButtonClick\n}) => {\n  var _data$languages$lengt, _data$languages;\n\n  const classes = useStyles({\n    itemSize: (_data$languages$lengt = (_data$languages = data.languages) === null || _data$languages === void 0 ? void 0 : _data$languages.length) !== null && _data$languages$lengt !== void 0 ? _data$languages$lengt : 0\n  });\n  return /*#__PURE__*/React.createElement(ProfileCardAnimatedBack, {\n    title: \"Languages\",\n    customClasses: {\n      content: classes.content,\n      contentAnimated: classes.contentAnimated,\n      title: classes.cardTitle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Content, Object.assign({\n    data,\n    handleAddButtonClick,\n    classes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  })));\n};\n\nconst Content = ({\n  data,\n  handleAddButtonClick,\n  classes\n}) => {\n  var _data$languages2, _data$languages3;\n\n  const theme = useTheme();\n  const [variant] = useCardVariant();\n  const transitions = useTransition((_data$languages2 = data.languages) !== null && _data$languages2 !== void 0 ? _data$languages2 : [], ({\n    id\n  }) => `language_column_${id}`, { ...LANGUAGES_COLUMN_TRANSITIONS_SPRING_PROPS,\n    trail: 175 * 3 / ((_data$languages3 = data === null || data === void 0 ? void 0 : data.languages) !== null && _data$languages3 !== void 0 ? _data$languages3 : []).length\n  });\n  const {\n    backColor,\n    backBackgroundColor\n  } = useMemo(() => ({\n    backColor: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).backColor),\n    backBackgroundColor: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).backBackgroundColor)\n  }), [theme, variant]);\n  const colorPalette = useMemo(() => {\n    var _data$languages$lengt2, _data$languages4;\n\n    return Array.from({\n      length: (_data$languages$lengt2 = (_data$languages4 = data.languages) === null || _data$languages4 === void 0 ? void 0 : _data$languages4.length) !== null && _data$languages$lengt2 !== void 0 ? _data$languages$lengt2 : 0\n    }, (v, k) => chroma.mix(backColor, backBackgroundColor, 2 * k / 15).hex());\n  }, [backColor, backBackgroundColor]);\n  const hasLanguage = useMemo(() => existsAndNotEmpty(data === null || data === void 0 ? void 0 : data.languages), [data]);\n\n  if (!hasLanguage) {\n    return /*#__PURE__*/React.createElement(NoLanguage, {\n      handleAddButtonClick: handleAddButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.columnsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, transitions.map(({\n    item,\n    key,\n    props\n  }, index) => {\n    var _data$languages$lengt3, _data$languages5, _item$language;\n\n    return /*#__PURE__*/React.createElement(LanguageColumn, {\n      itemsSize: (_data$languages$lengt3 = (_data$languages5 = data.languages) === null || _data$languages5 === void 0 ? void 0 : _data$languages5.length) !== null && _data$languages$lengt3 !== void 0 ? _data$languages$lengt3 : 0,\n      key: key,\n      component: animated.div,\n      item: item,\n      style: { ...props,\n        backgroundColor: colorPalette[index],\n        color: backColor\n      },\n      cardVariant: variant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: classes.languageLettersButton,\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, (_item$language = item.language) === null || _item$language === void 0 ? void 0 : _item$language.substring(0, 2).toUpperCase()));\n  }));\n};\n\nexport const LanguagesBack = memo(LanguagesBackComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/languages/languages_back/languages_back.jsx"],"names":["React","memo","useMemo","createUseStyles","useTheme","animated","useTransition","chroma","ProfileCardAnimatedBack","LanguageColumn","getColorsFromCardVariant","getHexFromPaletteColor","useCardVariant","LANGUAGES_COLUMN_TRANSITIONS_SPRING_PROPS","styles","existsAndNotEmpty","NoLanguage","useStyles","LanguagesBackComponent","data","handleAddButtonClick","classes","itemSize","languages","length","content","contentAnimated","title","cardTitle","Content","theme","variant","transitions","id","trail","backColor","backBackgroundColor","colorPalette","Array","from","v","k","mix","hex","hasLanguage","columnsContainer","map","item","key","props","index","div","backgroundColor","color","languageLettersButton","language","substring","toUpperCase","LanguagesBack"],"mappings":"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","sourcesContent":["import React, { memo, useMemo } from 'react';\n\nimport { createUseStyles, useTheme } from 'react-jss';\nimport { animated, useTransition } from 'react-spring';\nimport chroma from 'chroma-js';\n\nimport { ProfileCardAnimatedBack } from '../../../../commons/profile_card/profile_card_animated_back/profile_card_animated_back';\nimport { LanguageColumn } from './language_column/language_column';\n\nimport { getColorsFromCardVariant, getHexFromPaletteColor } from '../../../../../utils/styles/styles_utils';\n\nimport { useCardVariant } from '../../../../hooks/profile_card_hooks/use_card_variant';\nimport { LANGUAGES_COLUMN_TRANSITIONS_SPRING_PROPS } from './languages_back_spring_props';\n\nimport { styles } from './languages_back_styles';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoLanguage } from './no_language/no_language';\n\nconst useStyles = createUseStyles(styles);\n\nconst LanguagesBackComponent = ({ data, handleAddButtonClick }) => {\n    const classes = useStyles({ itemSize: data.languages?.length ?? 0 });\n\n    return (\n        <ProfileCardAnimatedBack\n            title=\"Languages\"\n            customClasses={{\n                content: classes.content,\n                contentAnimated: classes.contentAnimated,\n                title: classes.cardTitle\n            }}\n        >\n            <Content {...{ data, handleAddButtonClick, classes }} />\n        </ProfileCardAnimatedBack>\n    );\n};\n\nconst Content = ({ data, handleAddButtonClick, classes }) => {\n    const theme = useTheme();\n    const [variant] = useCardVariant();\n    const transitions = useTransition(data.languages ?? [], ({ id }) => `language_column_${id}`, {\n        ...LANGUAGES_COLUMN_TRANSITIONS_SPRING_PROPS,\n        trail: (175 * 3) / (data?.languages ?? []).length\n    });\n\n    const { backColor, backBackgroundColor } = useMemo(\n        () => ({\n            backColor: getHexFromPaletteColor(theme, getColorsFromCardVariant(theme, variant).backColor),\n            backBackgroundColor: getHexFromPaletteColor(\n                theme,\n                getColorsFromCardVariant(theme, variant).backBackgroundColor\n            )\n        }),\n        [theme, variant]\n    );\n\n    const colorPalette = useMemo(\n        () =>\n            Array.from({ length: data.languages?.length ?? 0 }, (v, k) =>\n                chroma.mix(backColor, backBackgroundColor, (2 * k) / 15).hex()),\n        [backColor, backBackgroundColor]\n    );\n    const hasLanguage = useMemo(() => existsAndNotEmpty(data?.languages), [data]);\n\n    if (!hasLanguage) {\n        return <NoLanguage handleAddButtonClick={handleAddButtonClick} />;\n    }\n    return (\n        <div className={classes.columnsContainer}>\n            {transitions.map(({ item, key, props }, index) => (\n                <LanguageColumn\n                    itemsSize={data.languages?.length ?? 0}\n                    key={key}\n                    component={animated.div}\n                    item={item}\n                    style={{\n                        ...props,\n                        backgroundColor: colorPalette[index],\n                        color: backColor\n                    }}\n                    cardVariant={variant}\n                >\n                    <button className={classes.languageLettersButton} type=\"button\">\n                        {item.language?.substring(0, 2).toUpperCase()}\n                    </button>\n                </LanguageColumn>\n            ))}\n        </div>\n    );\n};\n\nexport const LanguagesBack = memo(LanguagesBackComponent);\n"]},"metadata":{},"sourceType":"module"}