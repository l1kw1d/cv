{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/soundtrack/edit_dialog/soundtrack_card_edit_dialog.jsx\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage } from 'react-intl';\nimport { useFormikContext } from 'formik';\nimport { useDebounce } from 'use-debounce';\nimport { TextField } from '@wld/ui';\nimport { EditDialog } from '../../../../commons/edit_dialog/edit_dialog';\nimport { EditDialogField } from '../../../../commons/edit_dialog_field/edit_dialog_field';\nimport { LoadingSpinner } from '../../../../commons/loading_spinner/loading_spinner';\nimport { hashCode } from '../../../../../utils/string_utils';\nimport { styles } from './soundtrack_card_edit_dialog_styles';\nconst useStyles = createUseStyles(styles);\nconst URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;\nconst SPOTIFY_DOMAIN = 'https://open.spotify.com';\nexport const SoundtrackCardEditDialog = ({\n  open,\n  onClose,\n  data,\n  onEdit,\n  isEditing\n}) => /*#__PURE__*/React.createElement(EditDialog, {\n  data: data,\n  onEdit: onEdit,\n  onClose: onClose,\n  isEditing: isEditing,\n  open: open,\n  title: /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Sountrack.editDialog.title\",\n    defaultMessage: \"Embed your musical tastes in your profile.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }\n}, helpers => /*#__PURE__*/React.createElement(Content, {\n  helpers: helpers,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 21\n  }\n}));\n\nconst Content = ({\n  helpers: {\n    fullScreen,\n    isMobile\n  }\n}) => {\n  const classes = useStyles({\n    fullScreen,\n    isMobile\n  });\n  const {\n    values,\n    errors,\n    setFieldValue\n  } = useFormikContext();\n  const {\n    embedUrl\n  } = values;\n  const [iframeUrl] = useDebounce(embedUrl, 1000);\n  const frameHashCode = useMemo(() => hashCode(iframeUrl), [iframeUrl]);\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const handleLoad = useCallback(() => setHasLoaded(true), []);\n  const handleFieldChange = useCallback(event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n\n    if (!URL_REGEX.test(value) || !value.startsWith(SPOTIFY_DOMAIN)) {\n      return;\n    }\n\n    let finalValue = value;\n\n    if (!value.includes('/embed')) {\n      finalValue = `${value.substring(0, SPOTIFY_DOMAIN.length)}/embed/${value.substring(SPOTIFY_DOMAIN.length + 1, value.length)}`;\n    }\n\n    setFieldValue('embedUrl', finalValue);\n  }, [setFieldValue, embedUrl]);\n  const clearField = useCallback(() => {\n    setFieldValue('embedUrl', '');\n  }, [setFieldValue]);\n  const isValidUrl = useMemo(() => URL_REGEX.test(iframeUrl) && (iframeUrl === null || iframeUrl === void 0 ? void 0 : iframeUrl.includes('/embed')), [iframeUrl]);\n  useEffect(() => {\n    if (isValidUrl) {\n      setHasLoaded(null);\n    }\n  }, [isValidUrl]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(EditDialogField, {\n    classes: {\n      container: classes.field\n    },\n    error: errors.codingReason,\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Soundtrack.editDialog.embedUrl.title\",\n      defaultMessage: \"Enter a Spotify embed URL.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }),\n    subtitle: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Soundtrack.editDialog.embedUrl.subtitle\",\n      defaultMessage: \"Ex: https://open.spotify.com/embed/album/79dL7FLiJFOO0EoehUHQBv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    onChange: handleFieldChange,\n    name: \"embedUrl\",\n    value: embedUrl,\n    variant: \"flat\",\n    onClick: clearField,\n    onFocus: clearField,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.iframeContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, hasLoaded === null && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 40\n    }\n  }), iframeUrl && /*#__PURE__*/React.createElement(\"iframe\", {\n    className: classes.iframe,\n    key: frameHashCode,\n    title: \"Soundtrack\",\n    src: iframeUrl,\n    height: \"100%\",\n    width: 600,\n    frameBorder: \"0\",\n    allow: \"encrypted-media\",\n    onLoad: handleLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  })));\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/soundtrack/edit_dialog/soundtrack_card_edit_dialog.jsx"],"names":["React","useCallback","useEffect","useMemo","useState","createUseStyles","FormattedMessage","useFormikContext","useDebounce","TextField","EditDialog","EditDialogField","LoadingSpinner","hashCode","styles","useStyles","URL_REGEX","SPOTIFY_DOMAIN","SoundtrackCardEditDialog","open","onClose","data","onEdit","isEditing","helpers","Content","fullScreen","isMobile","classes","values","errors","setFieldValue","embedUrl","iframeUrl","frameHashCode","hasLoaded","setHasLoaded","handleLoad","handleFieldChange","event","target","value","test","startsWith","finalValue","includes","substring","length","clearField","isValidUrl","container","field","codingReason","divider","iframeContainer","iframe"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { createUseStyles } from 'react-jss';\nimport { FormattedMessage } from 'react-intl';\nimport { useFormikContext } from 'formik';\nimport { useDebounce } from 'use-debounce';\n\nimport { TextField } from '@wld/ui';\n\nimport { EditDialog } from '../../../../commons/edit_dialog/edit_dialog';\nimport { EditDialogField } from '../../../../commons/edit_dialog_field/edit_dialog_field';\nimport { LoadingSpinner } from '../../../../commons/loading_spinner/loading_spinner';\n\nimport { hashCode } from '../../../../../utils/string_utils';\n\nimport { styles } from './soundtrack_card_edit_dialog_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/g;\nconst SPOTIFY_DOMAIN = 'https://open.spotify.com';\n\nexport const SoundtrackCardEditDialog = ({ open, onClose, data, onEdit, isEditing }) => (\n    <EditDialog\n        data={data}\n        onEdit={onEdit}\n        onClose={onClose}\n        isEditing={isEditing}\n        open={open}\n        title={\n            <FormattedMessage\n                id=\"Sountrack.editDialog.title\"\n                defaultMessage=\"Embed your musical tastes in your profile.\"\n            />\n        }\n    >\n        {helpers => <Content helpers={helpers} />}\n    </EditDialog>\n);\n\nconst Content = ({ helpers: { fullScreen, isMobile } }) => {\n    const classes = useStyles({ fullScreen, isMobile });\n    const { values, errors, setFieldValue } = useFormikContext();\n    const { embedUrl } = values;\n    const [iframeUrl] = useDebounce(embedUrl, 1000);\n    const frameHashCode = useMemo(() => hashCode(iframeUrl), [iframeUrl]);\n\n    const [hasLoaded, setHasLoaded] = useState(false);\n    const handleLoad = useCallback(() => setHasLoaded(true), []);\n\n    const handleFieldChange = useCallback(\n        event => {\n            const {\n                target: { value }\n            } = event;\n            if (!URL_REGEX.test(value) || !value.startsWith(SPOTIFY_DOMAIN)) {\n                return;\n            }\n            let finalValue = value;\n            if (!value.includes('/embed')) {\n                finalValue = `${value.substring(0, SPOTIFY_DOMAIN.length)}/embed/${value.substring(\n                    SPOTIFY_DOMAIN.length + 1,\n                    value.length\n                )}`;\n            }\n            setFieldValue('embedUrl', finalValue);\n        },\n        [setFieldValue, embedUrl]\n    );\n\n    const clearField = useCallback(() => {\n        setFieldValue('embedUrl', '');\n    }, [setFieldValue]);\n\n    const isValidUrl = useMemo(() => URL_REGEX.test(iframeUrl) && iframeUrl?.includes('/embed'), [iframeUrl]);\n\n    useEffect(() => {\n        if (isValidUrl) {\n            setHasLoaded(null);\n        }\n    }, [isValidUrl]);\n\n    return (\n        <div className={classes.container}>\n            <EditDialogField\n                classes={{ container: classes.field }}\n                error={errors.codingReason}\n                title={\n                    <FormattedMessage\n                        id=\"Soundtrack.editDialog.embedUrl.title\"\n                        defaultMessage=\"Enter a Spotify embed URL.\"\n                    />\n                }\n                subtitle={\n                    <FormattedMessage\n                        id=\"Soundtrack.editDialog.embedUrl.subtitle\"\n                        defaultMessage=\"Ex: https://open.spotify.com/embed/album/79dL7FLiJFOO0EoehUHQBv\"\n                    />\n                }\n            >\n                <TextField\n                    onChange={handleFieldChange}\n                    name=\"embedUrl\"\n                    value={embedUrl}\n                    variant=\"flat\"\n                    onClick={clearField}\n                    onFocus={clearField}\n                    fullWidth\n                />\n            </EditDialogField>\n            <div className={classes.divider} />\n            <div className={classes.iframeContainer}>\n                {hasLoaded === null && <LoadingSpinner />}\n                {iframeUrl && (\n                    <iframe\n                        className={classes.iframe}\n                        key={frameHashCode}\n                        title=\"Soundtrack\"\n                        src={iframeUrl}\n                        height=\"100%\"\n                        width={600}\n                        frameBorder=\"0\"\n                        allow=\"encrypted-media\"\n                        onLoad={handleLoad}\n                    />\n                )}\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}