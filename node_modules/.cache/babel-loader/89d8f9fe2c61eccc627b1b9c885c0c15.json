{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/gifs/gifs_edit_dialog/gifs_edit_form/gif_card/gif_card.jsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { Button, Card, PopperCardActions, TextField, Typography } from '@wld/ui';\nimport { BouncingRoundButton } from '../../../../../../commons/bouncing_round_button/bouncing_round_button';\nimport { styles } from './gif_card_styles';\nconst useStyles = createUseStyles(styles);\n\nconst GifCardComponent = ({\n  name,\n  gifUrl,\n  imageEditable,\n  additionalActions,\n  onImageEditClick,\n  onChange,\n  onRemove,\n  error\n}) => {\n  const classes = useStyles();\n  const [input, setInput] = useState(name);\n  const handleTextFieldChange = useCallback(event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setInput(value);\n    onChange('name')(value);\n  }, []);\n  useEffect(() => setInput(name), [name]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, (imageEditable || additionalActions) && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, imageEditable && gifUrl && /*#__PURE__*/React.createElement(BouncingRoundButton, {\n    title: /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"GifsEditDialog.gifCard.changeGif\",\n      defaultMessage: \"Changer this gif\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 37\n      }\n    }),\n    onClick: onImageEditClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 29\n    }\n  }), additionalActions), /*#__PURE__*/React.createElement(CardTopHalf, {\n    error: error,\n    gifUrl: gifUrl,\n    name: name,\n    onImageEditClick: onImageEditClick,\n    classes: classes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    customClasses: {\n      container: classes.textField\n    },\n    fullWidth: true,\n    placeholder: \"Gif's name\",\n    variant: \"flat\",\n    value: input,\n    onChange: handleTextFieldChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }), (error === null || error === void 0 ? void 0 : error.name) && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    component: \"div\",\n    variant: \"helper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, error === null || error === void 0 ? void 0 : error.name)), /*#__PURE__*/React.createElement(PopperCardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"danger\",\n    size: \"small\",\n    onClick: onRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Main.lang.remove\",\n    defaultMessage: \"Remove\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  })))));\n};\n\nconst CardTopHalf = ({\n  error,\n  gifUrl,\n  classes,\n  name,\n  onImageEditClick\n}) => {\n  if (!gifUrl) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.addGifButtonContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      customClasses: {\n        container: classes.addGifButton\n      },\n      color: \"primary\",\n      variant: \"outlined\",\n      onClick: onImageEditClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"GifsEditDialog.gifCard.addGif\",\n      defaultMessage: \"Add a gif\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.imageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, (error === null || error === void 0 ? void 0 : error.gifUrl) && /*#__PURE__*/React.createElement(Typography, {\n    color: \"danger\",\n    variant: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, error === null || error === void 0 ? void 0 : error.gifUrl), /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.image,\n    src: gifUrl,\n    alt: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport const GifCard = GifCardComponent;","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/gifs/gifs_edit_dialog/gifs_edit_form/gif_card/gif_card.jsx"],"names":["React","useCallback","useEffect","useState","FormattedMessage","createUseStyles","Button","Card","PopperCardActions","TextField","Typography","BouncingRoundButton","styles","useStyles","GifCardComponent","name","gifUrl","imageEditable","additionalActions","onImageEditClick","onChange","onRemove","error","classes","input","setInput","handleTextFieldChange","event","target","value","container","actions","content","textField","CardTopHalf","addGifButtonContainer","addGifButton","imageContainer","image","GifCard"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\n\nimport { Button, Card, PopperCardActions, TextField, Typography } from '@wld/ui';\n\nimport { BouncingRoundButton } from '../../../../../../commons/bouncing_round_button/bouncing_round_button';\n\nimport { styles } from './gif_card_styles';\n\nconst useStyles = createUseStyles(styles);\n\nconst GifCardComponent = ({\n    name,\n    gifUrl,\n    imageEditable,\n    additionalActions,\n    onImageEditClick,\n    onChange,\n    onRemove,\n    error\n}) => {\n    const classes = useStyles();\n\n    const [input, setInput] = useState(name);\n\n    const handleTextFieldChange = useCallback(event => {\n        const {\n            target: { value }\n        } = event;\n        setInput(value);\n        onChange('name')(value);\n    }, []);\n\n    useEffect(() => setInput(name), [name]);\n\n    return (\n        <>\n            <Card className={classes.container}>\n                {(imageEditable || additionalActions) && (\n                    <div className={classes.actions}>\n                        {imageEditable && gifUrl && (\n                            <BouncingRoundButton\n                                title={\n                                    <FormattedMessage\n                                        id=\"GifsEditDialog.gifCard.changeGif\"\n                                        defaultMessage=\"Changer this gif\"\n                                    />\n                                }\n                                onClick={onImageEditClick}\n                            />\n                        )}\n                        {additionalActions}\n                    </div>\n                )}\n                <CardTopHalf\n                    error={error}\n                    gifUrl={gifUrl}\n                    name={name}\n                    onImageEditClick={onImageEditClick}\n                    classes={classes}\n                />\n                <div className={classes.content}>\n                    <TextField\n                        customClasses={{ container: classes.textField }}\n                        fullWidth\n                        placeholder=\"Gif's name\"\n                        variant=\"flat\"\n                        value={input}\n                        onChange={handleTextFieldChange}\n                    />\n                    {error?.name && (\n                        <Typography color=\"danger\" component=\"div\" variant=\"helper\">\n                            {error?.name}\n                        </Typography>\n                    )}\n                </div>\n                <PopperCardActions>\n                    <Button color=\"danger\" size=\"small\" onClick={onRemove}>\n                        <FormattedMessage id=\"Main.lang.remove\" defaultMessage=\"Remove\" />\n                    </Button>\n                </PopperCardActions>\n            </Card>\n        </>\n    );\n};\n\nconst CardTopHalf = ({ error, gifUrl, classes, name, onImageEditClick }) => {\n    if (!gifUrl) {\n        return (\n            <div className={classes.addGifButtonContainer}>\n                <Button\n                    customClasses={{\n                        container: classes.addGifButton\n                    }}\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    onClick={onImageEditClick}\n                >\n                    <FormattedMessage id=\"GifsEditDialog.gifCard.addGif\" defaultMessage=\"Add a gif\" />\n                </Button>\n            </div>\n        );\n    }\n    return (\n        <div className={classes.imageContainer}>\n            {error?.gifUrl && (\n                <Typography color=\"danger\" variant=\"p\">\n                    {error?.gifUrl}\n                </Typography>\n            )}\n            <img className={classes.image} src={gifUrl} alt={name} />\n        </div>\n    );\n};\n\nexport const GifCard = GifCardComponent;\n"]},"metadata":{},"sourceType":"module"}