{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/footer/share_links/share_links.jsx\";\nimport React, { memo, useEffect, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { useIntl } from 'react-intl';\nimport { animated, config, useSpring } from 'react-spring';\nimport { Tooltip } from '@wld/ui';\nimport { SHARE_LINKS_DATA } from './share_links_data';\nimport { BACKGROUND_LINE_SPRING_PROPS } from './share_links_spring_props';\nimport { styles } from './share_links_styles';\nimport { translations } from './share_links_translations';\nconst useStyles = createUseStyles(styles);\n\nconst ShareLinksComponent = ({\n  useSmallLayout\n}) => {\n  const classes = useStyles();\n  const {\n    formatMessage\n  } = useIntl();\n  const [link, setLink] = useState();\n  const [backgroundLineSpringProps, setBackgroundLineSpringProps] = useSpring(() => ({ ...BACKGROUND_LINE_SPRING_PROPS.default,\n    config: config.slow\n  }));\n  useEffect(() => {\n    var _location;\n\n    setLink((_location = (typeof window === 'undefined' ? {} : window).location) === null || _location === void 0 ? void 0 : _location.href);\n  }, []);\n  const translatedMessage = useMemo(() => formatMessage(translations.linkMessage, {\n    link\n  }), [link]);\n  useEffect(() => {\n    if (!('IntersectionObserver' in (typeof window !== 'undefined' ? window : {}))) {\n      return;\n    } // eslint-disable-next-line no-undef\n\n\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting === true) {\n        setBackgroundLineSpringProps(BACKGROUND_LINE_SPRING_PROPS.active);\n      } else {\n        setBackgroundLineSpringProps(BACKGROUND_LINE_SPRING_PROPS.default);\n      }\n    }, {\n      threshold: [0]\n    });\n    observer.observe(document.querySelector('#footer-share-links'));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"footer-share-links\",\n    className: cn(classes.container, useSmallLayout && classes.smallLayoutContainer),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, !useSmallLayout && /*#__PURE__*/React.createElement(animated.div, {\n    className: classes.backgroundLine,\n    style: backgroundLineSpringProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.icons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, Object.entries(SHARE_LINKS_DATA).map(([entryId, {\n    getLink,\n    icon: Icon,\n    tooltipTranslation\n  }]) => {\n    let content = /*#__PURE__*/React.createElement(Icon, {\n      key: `share_link_icon_${entryId}`,\n      className: classes.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 35\n      }\n    });\n\n    if (typeof getLink === 'function') {\n      content = /*#__PURE__*/React.createElement(\"a\", {\n        key: `share_link_link_${entryId}`,\n        className: classes.link,\n        href: getLink({\n          link,\n          translatedMessage\n        }),\n        target: \"_blank\",\n        rel: \"noreferrer noopener\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }\n      }, content);\n    }\n\n    if (tooltipTranslation) {\n      content = /*#__PURE__*/React.createElement(Tooltip, {\n        key: `share_link_tooltip_${entryId}`,\n        title: tooltipTranslation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: classes.button,\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 33\n        }\n      }, content));\n    }\n\n    return content;\n  })));\n};\n\nexport const ShareLinks = memo(ShareLinksComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/footer/share_links/share_links.jsx"],"names":["React","memo","useEffect","useMemo","useState","cn","createUseStyles","useIntl","animated","config","useSpring","Tooltip","SHARE_LINKS_DATA","BACKGROUND_LINE_SPRING_PROPS","styles","translations","useStyles","ShareLinksComponent","useSmallLayout","classes","formatMessage","link","setLink","backgroundLineSpringProps","setBackgroundLineSpringProps","default","slow","window","location","href","translatedMessage","linkMessage","observer","IntersectionObserver","entries","isIntersecting","active","threshold","observe","document","querySelector","container","smallLayoutContainer","backgroundLine","icons","Object","map","entryId","getLink","icon","Icon","tooltipTranslation","content","button","ShareLinks"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,cAA5C;AAEA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,4BAAT,QAA6C,4BAA7C;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA,MAAMC,SAAS,GAAGV,eAAe,CAACQ,MAAD,CAAjC;;AAEA,MAAMG,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAChD,QAAMC,OAAO,GAAGH,SAAS,EAAzB;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAoBb,OAAO,EAAjC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,EAAhC;AAEA,QAAM,CAACmB,yBAAD,EAA4BC,4BAA5B,IAA4Dd,SAAS,CAAC,OAAO,EAC/E,GAAGG,4BAA4B,CAACY,OAD+C;AAE/EhB,IAAAA,MAAM,EAAEA,MAAM,CAACiB;AAFgE,GAAP,CAAD,CAA3E;AAKAxB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZoB,IAAAA,OAAO,cAAC,CAAC,OAAOK,MAAP,KAAkB,WAAlB,GAAgC,EAAhC,GAAqCA,MAAtC,EAA8CC,QAA/C,8CAAC,UAAwDC,IAAzD,CAAP;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMC,iBAAiB,GAAG3B,OAAO,CAAC,MAAMiB,aAAa,CAACL,YAAY,CAACgB,WAAd,EAA2B;AAAEV,IAAAA;AAAF,GAA3B,CAApB,EAA0D,CAACA,IAAD,CAA1D,CAAjC;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,EAAE,2BAA2B,OAAOyB,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,EAApE,CAAF,CAAJ,EAAgF;AAC5E;AACH,KAHW,CAIZ;;;AACA,UAAMK,QAAQ,GAAG,IAAIC,oBAAJ,CACbC,OAAO,IAAI;AACP,UAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,KAA8B,IAAlC,EAAwC;AACpCX,QAAAA,4BAA4B,CAACX,4BAA4B,CAACuB,MAA9B,CAA5B;AACH,OAFD,MAEO;AACHZ,QAAAA,4BAA4B,CAACX,4BAA4B,CAACY,OAA9B,CAA5B;AACH;AACJ,KAPY,EAQb;AAAEY,MAAAA,SAAS,EAAE,CAAC,CAAD;AAAb,KARa,CAAjB;AAUAL,IAAAA,QAAQ,CAACM,OAAT,CAAiBC,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,CAAjB;AACH,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACI;AAAK,IAAA,EAAE,EAAC,oBAAR;AAA6B,IAAA,SAAS,EAAEnC,EAAE,CAACc,OAAO,CAACsB,SAAT,EAAoBvB,cAAc,IAAIC,OAAO,CAACuB,oBAA9C,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACxB,cAAD,iBAAmB,oBAAC,QAAD,CAAU,GAAV;AAAc,IAAA,SAAS,EAAEC,OAAO,CAACwB,cAAjC;AAAiD,IAAA,KAAK,EAAEpB,yBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxB,eAEI;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACyB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,MAAM,CAACX,OAAP,CAAetB,gBAAf,EAAiCkC,GAAjC,CAAqC,CAAC,CAACC,OAAD,EAAU;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC,IAAjB;AAAuBC,IAAAA;AAAvB,GAAV,CAAD,KAA4D;AAC9F,QAAIC,OAAO,gBAAG,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAG,mBAAkBL,OAAQ,EAAtC;AAAyC,MAAA,SAAS,EAAE5B,OAAO,CAAC8B,IAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;;AACA,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AAC/BI,MAAAA,OAAO,gBACH;AACI,QAAA,GAAG,EAAG,mBAAkBL,OAAQ,EADpC;AAEI,QAAA,SAAS,EAAE5B,OAAO,CAACE,IAFvB;AAGI,QAAA,IAAI,EAAE2B,OAAO,CAAC;AACV3B,UAAAA,IADU;AAEVS,UAAAA;AAFU,SAAD,CAHjB;AAOI,QAAA,MAAM,EAAC,QAPX;AAQI,QAAA,GAAG,EAAC,qBARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUKsB,OAVL,CADJ;AAcH;;AACD,QAAID,kBAAJ,EAAwB;AACpBC,MAAAA,OAAO,gBACH,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAG,sBAAqBL,OAAQ,EAA5C;AAA+C,QAAA,KAAK,EAAEI,kBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,SAAS,EAAEhC,OAAO,CAACkC,MAA3B;AAAmC,QAAA,IAAI,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,OADL,CADJ,CADJ;AAOH;;AACD,WAAOA,OAAP;AACH,GA5BA,CADL,CAFJ,CADJ;AAoCH,CAtED;;AAwEA,OAAO,MAAME,UAAU,GAAGrD,IAAI,CAACgB,mBAAD,CAAvB","sourcesContent":["import React, { memo, useEffect, useMemo, useState } from 'react';\n\nimport cn from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { useIntl } from 'react-intl';\nimport { animated, config, useSpring } from 'react-spring';\n\nimport { Tooltip } from '@wld/ui';\nimport { SHARE_LINKS_DATA } from './share_links_data';\nimport { BACKGROUND_LINE_SPRING_PROPS } from './share_links_spring_props';\n\nimport { styles } from './share_links_styles';\nimport { translations } from './share_links_translations';\n\nconst useStyles = createUseStyles(styles);\n\nconst ShareLinksComponent = ({ useSmallLayout }) => {\n    const classes = useStyles();\n    const { formatMessage } = useIntl();\n    const [link, setLink] = useState();\n\n    const [backgroundLineSpringProps, setBackgroundLineSpringProps] = useSpring(() => ({\n        ...BACKGROUND_LINE_SPRING_PROPS.default,\n        config: config.slow\n    }));\n\n    useEffect(() => {\n        setLink((typeof window === 'undefined' ? {} : window).location?.href);\n    }, []);\n\n    const translatedMessage = useMemo(() => formatMessage(translations.linkMessage, { link }), [link]);\n\n    useEffect(() => {\n        if (!('IntersectionObserver' in (typeof window !== 'undefined' ? window : {}))) {\n            return;\n        }\n        // eslint-disable-next-line no-undef\n        const observer = new IntersectionObserver(\n            entries => {\n                if (entries[0].isIntersecting === true) {\n                    setBackgroundLineSpringProps(BACKGROUND_LINE_SPRING_PROPS.active);\n                } else {\n                    setBackgroundLineSpringProps(BACKGROUND_LINE_SPRING_PROPS.default);\n                }\n            },\n            { threshold: [0] }\n        );\n        observer.observe(document.querySelector('#footer-share-links'));\n    }, []);\n\n    return (\n        <div id=\"footer-share-links\" className={cn(classes.container, useSmallLayout && classes.smallLayoutContainer)}>\n            {!useSmallLayout && <animated.div className={classes.backgroundLine} style={backgroundLineSpringProps} />}\n            <div className={classes.icons}>\n                {Object.entries(SHARE_LINKS_DATA).map(([entryId, { getLink, icon: Icon, tooltipTranslation }]) => {\n                    let content = <Icon key={`share_link_icon_${entryId}`} className={classes.icon} />;\n                    if (typeof getLink === 'function') {\n                        content = (\n                            <a\n                                key={`share_link_link_${entryId}`}\n                                className={classes.link}\n                                href={getLink({\n                                    link,\n                                    translatedMessage\n                                })}\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                            >\n                                {content}\n                            </a>\n                        );\n                    }\n                    if (tooltipTranslation) {\n                        content = (\n                            <Tooltip key={`share_link_tooltip_${entryId}`} title={tooltipTranslation}>\n                                <button className={classes.button} type=\"button\">\n                                    {content}\n                                </button>\n                            </Tooltip>\n                        );\n                    }\n                    return content;\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport const ShareLinks = memo(ShareLinksComponent);\n"]},"metadata":{},"sourceType":"module"}