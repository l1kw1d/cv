{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/basics/basics_front/basics_front.jsx\";\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { CenterContentContainer } from '../../../../commons/center_content_container/center_content_container';\nimport { ProfileCardActions } from '../../../../commons/profile_card/profile_card_actions/profile_card_actions';\nimport { ProfileCardButton } from '../../../../commons/profile_card/profile_card_button/profile_card_button';\nimport { ProfileCardPaddedFront } from '../../../../commons/profile_card/profile_card_padded_front/profile_card_padding_front';\nimport { ProfileCardFrontTypography } from '../../../../commons/profile_card/profile_card_front_typography/profile_card_front_typography';\nimport { ReactComponent as LocationIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../../../assets/icons/location.svg\";\nimport { useCardSide } from '../../../../hooks/profile_card_hooks/use_card_side';\nimport { useCardVariant } from '../../../../hooks/profile_card_hooks/use_card_variant';\nimport { SIDES } from '../../../../commons/profile_card/profile_card_side/side';\nimport { styles } from './basics_front_styles';\nimport { NoDataButton } from '../../../../commons/no_data_button/no_data_button';\nimport { useMode } from '../../../../hooks/use_mode';\nconst useStyles = createUseStyles(styles);\n\nconst BasicsFrontComponent = ({\n  data,\n  handleAddButtonClick\n}) => {\n  var _data$currentCity, _data$currentCity2;\n\n  const [mode] = useMode();\n  const [variant] = useCardVariant();\n  const classes = useStyles({\n    variant\n  });\n  const [side, setSide] = useCardSide();\n  const handleButtonClick = useCallback(() => setSide(side === SIDES.FRONT ? SIDES.BACK : SIDES.FRONT), [side, setSide]);\n  const [isMainTypographyTruncated, setIsMainTypographyTruncated] = useState(true);\n  const mainTypographyReference = useRef();\n  useEffect(() => {\n    const element = mainTypographyReference.current;\n\n    if ((element === null || element === void 0 ? void 0 : element.offsetHeight) > (element === null || element === void 0 ? void 0 : element.scrollHeight) - 1) {\n      setIsMainTypographyTruncated(false);\n    }\n  }, []);\n  const currentCityName = data === null || data === void 0 ? void 0 : (_data$currentCity = data.currentCity) === null || _data$currentCity === void 0 ? void 0 : _data$currentCity.name;\n  return /*#__PURE__*/React.createElement(ProfileCardPaddedFront, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CenterContentContainer, {\n    customClasses: {\n      container: classes.container\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.texts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardFrontTypography, {\n    component: \"div\",\n    ref: mainTypographyReference,\n    classes: {\n      container: cn(classes.mainTypography, isMainTypographyTruncated && classes.truncatedMainTypography)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, data.summary), currentCityName && /*#__PURE__*/React.createElement(ProfileCardFrontTypography, {\n    variant: \"h4\",\n    component: \"h3\",\n    classes: {\n      container: classes.location\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(LocationIcon, {\n    className: classes.locationIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }), data === null || data === void 0 ? void 0 : (_data$currentCity2 = data.currentCity) === null || _data$currentCity2 === void 0 ? void 0 : _data$currentCity2.name)), !(data === null || data === void 0 ? void 0 : data.personalDescription) && mode === 'edit' && /*#__PURE__*/React.createElement(NoDataButton, {\n    handleAddButtonClick: handleAddButtonClick,\n    classes: {\n      container: classes.addButton\n    },\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Basics.noDescription.buttonLabel\",\n    defaultMessage: \"Ajouter une description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(ProfileCardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardButton, {\n    onClick: handleButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Basics.front.action\",\n    defaultMessage: \"More about me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport const BasicsFront = memo(BasicsFrontComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/basics/basics_front/basics_front.jsx"],"names":["React","memo","useCallback","useEffect","useRef","useState","cn","FormattedMessage","createUseStyles","CenterContentContainer","ProfileCardActions","ProfileCardButton","ProfileCardPaddedFront","ProfileCardFrontTypography","useCardSide","useCardVariant","SIDES","styles","NoDataButton","useMode","useStyles","BasicsFrontComponent","data","handleAddButtonClick","mode","variant","classes","side","setSide","handleButtonClick","FRONT","BACK","isMainTypographyTruncated","setIsMainTypographyTruncated","mainTypographyReference","element","current","offsetHeight","scrollHeight","currentCityName","currentCity","name","container","texts","mainTypography","truncatedMainTypography","summary","location","locationIcon","personalDescription","addButton","BasicsFront"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\n\nimport cn from 'classnames';\n\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\n\nimport { CenterContentContainer } from '../../../../commons/center_content_container/center_content_container';\nimport { ProfileCardActions } from '../../../../commons/profile_card/profile_card_actions/profile_card_actions';\nimport { ProfileCardButton } from '../../../../commons/profile_card/profile_card_button/profile_card_button';\nimport { ProfileCardPaddedFront } from '../../../../commons/profile_card/profile_card_padded_front/profile_card_padding_front';\nimport { ProfileCardFrontTypography } from '../../../../commons/profile_card/profile_card_front_typography/profile_card_front_typography';\n\nimport { ReactComponent as LocationIcon } from '../../../../../assets/icons/location.svg';\n\nimport { useCardSide } from '../../../../hooks/profile_card_hooks/use_card_side';\nimport { useCardVariant } from '../../../../hooks/profile_card_hooks/use_card_variant';\nimport { SIDES } from '../../../../commons/profile_card/profile_card_side/side';\n\nimport { styles } from './basics_front_styles';\nimport { NoDataButton } from '../../../../commons/no_data_button/no_data_button';\nimport { useMode } from '../../../../hooks/use_mode';\n\nconst useStyles = createUseStyles(styles);\n\nconst BasicsFrontComponent = ({ data, handleAddButtonClick }) => {\n    const [mode] = useMode();\n    const [variant] = useCardVariant();\n\n    const classes = useStyles({ variant });\n\n    const [side, setSide] = useCardSide();\n\n    const handleButtonClick = useCallback(() => setSide(side === SIDES.FRONT ? SIDES.BACK : SIDES.FRONT), [\n        side,\n        setSide\n    ]);\n\n    const [isMainTypographyTruncated, setIsMainTypographyTruncated] = useState(true);\n    const mainTypographyReference = useRef();\n\n    useEffect(() => {\n        const element = mainTypographyReference.current;\n        if (element?.offsetHeight > element?.scrollHeight - 1) {\n            setIsMainTypographyTruncated(false);\n        }\n    }, []);\n\n    const currentCityName = data?.currentCity?.name;\n\n    return (\n        <ProfileCardPaddedFront>\n            <CenterContentContainer customClasses={{ container: classes.container }}>\n                <div className={classes.texts}>\n                    <ProfileCardFrontTypography\n                        component=\"div\"\n                        ref={mainTypographyReference}\n                        classes={{\n                            container: cn(\n                                classes.mainTypography,\n                                isMainTypographyTruncated && classes.truncatedMainTypography\n                            )\n                        }}\n                    >\n                        {data.summary}\n                    </ProfileCardFrontTypography>\n                    {currentCityName && (\n                        <ProfileCardFrontTypography\n                            variant=\"h4\"\n                            component=\"h3\"\n                            classes={{ container: classes.location }}\n                        >\n                            <LocationIcon className={classes.locationIcon} />\n                            {data?.currentCity?.name}\n                        </ProfileCardFrontTypography>\n                    )}\n                </div>\n                {!data?.personalDescription && mode === 'edit' && (\n                    <NoDataButton\n                        handleAddButtonClick={handleAddButtonClick}\n                        classes={{\n                            container: classes.addButton\n                        }}\n                        color=\"secondary\"\n                    >\n                        <FormattedMessage\n                            id=\"Basics.noDescription.buttonLabel\"\n                            defaultMessage=\"Ajouter une description\"\n                        />\n                    </NoDataButton>\n                )}\n            </CenterContentContainer>\n            <ProfileCardActions>\n                <ProfileCardButton onClick={handleButtonClick}>\n                    <FormattedMessage id=\"Basics.front.action\" defaultMessage=\"More about me\" />\n                </ProfileCardButton>\n            </ProfileCardActions>\n        </ProfileCardPaddedFront>\n    );\n};\n\nexport const BasicsFront = memo(BasicsFrontComponent);\n"]},"metadata":{},"sourceType":"module"}