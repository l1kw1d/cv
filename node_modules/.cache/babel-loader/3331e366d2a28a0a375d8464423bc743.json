{"ast":null,"code":"import { useContext, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { StaticDataContext } from '../../../utils/context/contexts';\nconst GIPHY_API_ENDPOINT = 'https://api.giphy.com/v1/gifs/search?';\nexport const useGiphyResults = (input, page = 0, limit = 20, timeout = 800) => {\n  const debounceSearch = useRef();\n  const {\n    locale\n  } = useIntl();\n  const {\n    apiKeys\n  } = useContext(StaticDataContext);\n  const [lastLoaded, setLastLoaded] = useState(false);\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!input || !apiKeys.giphy) {\n      setResults([]);\n      return;\n    }\n\n    if (input === (lastLoaded === null || lastLoaded === void 0 ? void 0 : lastLoaded.input) && page === (lastLoaded === null || lastLoaded === void 0 ? void 0 : lastLoaded.page)) {\n      return;\n    }\n\n    setError(null);\n\n    if (debounceSearch.current) {\n      clearTimeout(debounceSearch.current);\n    }\n\n    debounceSearch.current = setTimeout(() => {\n      setLoading(true);\n      const params = {\n        lang: locale,\n        apiKey: apiKeys.giphy,\n        q: input,\n        offset: page * limit,\n        limit\n      }; // eslint-disable-next-line no-undef\n\n      fetch(encodeURI(GIPHY_API_ENDPOINT + Object.entries(params).map(([key, value]) => `${key}=${value}`).join('&'))).then(res => {\n        if (res.status.toString().startsWith('2')) {\n          return res.json();\n        }\n\n        throw new Error(`${res.status} ${res.statusText}`);\n      }).then(({\n        data\n      }) => {\n        setResults(data.map(({\n          id,\n          title,\n          images\n        }) => {\n          var _images$downsized;\n\n          return {\n            id,\n            url: images === null || images === void 0 ? void 0 : (_images$downsized = images.downsized) === null || _images$downsized === void 0 ? void 0 : _images$downsized.url,\n            title\n          };\n        }));\n      }).catch(e => {\n        console.warn('Failed to fecth from giphy', e.message);\n        setError(e.message);\n      }).finally(() => {\n        setLastLoaded({\n          input,\n          page\n        });\n        debounceSearch.current = null;\n        setLoading(false);\n      });\n    }, timeout);\n  }, [input, lastLoaded, page]);\n  return {\n    gifs: results,\n    loading,\n    error\n  };\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/hooks/giphy/use_giphy_results.js"],"names":["useContext","useEffect","useRef","useState","useIntl","StaticDataContext","GIPHY_API_ENDPOINT","useGiphyResults","input","page","limit","timeout","debounceSearch","locale","apiKeys","lastLoaded","setLastLoaded","results","setResults","loading","setLoading","error","setError","giphy","current","clearTimeout","setTimeout","params","lang","apiKey","q","offset","fetch","encodeURI","Object","entries","map","key","value","join","then","res","status","toString","startsWith","json","Error","statusText","data","id","title","images","url","downsized","catch","e","console","warn","message","finally","gifs"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { StaticDataContext } from '../../../utils/context/contexts';\n\nconst GIPHY_API_ENDPOINT = 'https://api.giphy.com/v1/gifs/search?';\n\nexport const useGiphyResults = (input, page = 0, limit = 20, timeout = 800) => {\n    const debounceSearch = useRef();\n    const { locale } = useIntl();\n    const { apiKeys } = useContext(StaticDataContext);\n    const [lastLoaded, setLastLoaded] = useState(false);\n    const [results, setResults] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        if (!input || !apiKeys.giphy) {\n            setResults([]);\n            return;\n        }\n        if (input === lastLoaded?.input && page === lastLoaded?.page) {\n            return;\n        }\n        setError(null);\n        if (debounceSearch.current) {\n            clearTimeout(debounceSearch.current);\n        }\n        debounceSearch.current = setTimeout(() => {\n            setLoading(true);\n            const params = {\n                lang: locale,\n                apiKey: apiKeys.giphy,\n                q: input,\n                offset: page * limit,\n                limit\n            };\n\n            // eslint-disable-next-line no-undef\n            fetch(\n                encodeURI(\n                    GIPHY_API_ENDPOINT +\n                    Object.entries(params)\n                        .map(([key, value]) => `${key}=${value}`)\n                        .join('&')\n                )\n            )\n                .then(res => {\n                    if (res.status.toString().startsWith('2')) {\n                        return res.json();\n                    }\n                    throw new Error(`${res.status} ${res.statusText}`);\n                })\n                .then(({ data }) => {\n                    setResults(\n                        data.map(({ id, title, images }) => ({\n                            id,\n                            url: images?.downsized?.url,\n                            title\n                        }))\n                    );\n                })\n                .catch(e => {\n                    console.warn('Failed to fecth from giphy', e.message);\n                    setError(e.message);\n                })\n                .finally(() => {\n                    setLastLoaded({ input, page });\n                    debounceSearch.current = null;\n                    setLoading(false);\n                });\n        }, timeout);\n    }, [input, lastLoaded, page]);\n\n    return { gifs: results, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}