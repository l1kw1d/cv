{"ast":null,"code":"import { useContext, useEffect, useRef, useState } from 'react';\nimport { StaticDataContext } from '../../../utils/context/contexts';\nconst UNSPLASH_API = 'https://api.unsplash.com/search/photos?';\nexport const useUnsplashResults = (input, page = 0, limit = 12, timeout = 800) => {\n  const debounceSearch = useRef();\n  const {\n    endpoints\n  } = useContext(StaticDataContext);\n  const [lastLoaded, setLastLoaded] = useState(false);\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!input || !endpoints.unsplashProxy) {\n      setResults([]);\n      return;\n    }\n\n    if (input === (lastLoaded === null || lastLoaded === void 0 ? void 0 : lastLoaded.input) && page === (lastLoaded === null || lastLoaded === void 0 ? void 0 : lastLoaded.page)) {\n      return;\n    }\n\n    setError(null);\n\n    if (debounceSearch.current) {\n      clearTimeout(debounceSearch.current);\n    }\n\n    debounceSearch.current = setTimeout(() => {\n      setLoading(true);\n      const params = {\n        query: input,\n        page: page * limit,\n        per_page: limit\n      };\n      const url = encodeURI(UNSPLASH_API + Object.entries(params).map(([key, value]) => `${key}=${value}`).join('&')); // eslint-disable-next-line no-undef\n\n      fetch(`${endpoints.unsplashProxy}?url=${url}`, {\n        method: 'GET'\n      }).then(async res => {\n        if (`${res.status}`.startsWith('2')) {\n          const functionResult = await res.json();\n\n          if (`${functionResult === null || functionResult === void 0 ? void 0 : functionResult.unsplashStatus}`.startsWith('2')) {\n            return functionResult;\n          }\n\n          throw new Error(`${functionResult.unsplashStatus}`);\n        }\n\n        throw new Error(`${res.status} ${res.statusText}`);\n      }).then(res => {\n        var _res$data;\n\n        setResults(res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.results.map(({\n          id,\n          user,\n          description,\n          urls,\n          links\n        }) => ({\n          id,\n          urls,\n          user,\n          description,\n          links\n        })));\n      }).catch(e => {\n        console.warn('Failed to fetch from unsplash', e.message);\n        setError(e.message);\n      }).finally(() => {\n        setLastLoaded({\n          input,\n          page\n        });\n        debounceSearch.current = null;\n        setLoading(false);\n      });\n    }, timeout);\n  }, [input, lastLoaded, page]);\n  return {\n    results,\n    loading,\n    error\n  };\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/hooks/unsplash/use_unsplash_results.js"],"names":["useContext","useEffect","useRef","useState","StaticDataContext","UNSPLASH_API","useUnsplashResults","input","page","limit","timeout","debounceSearch","endpoints","lastLoaded","setLastLoaded","results","setResults","loading","setLoading","error","setError","unsplashProxy","current","clearTimeout","setTimeout","params","query","per_page","url","encodeURI","Object","entries","map","key","value","join","fetch","method","then","res","status","startsWith","functionResult","json","unsplashStatus","Error","statusText","data","id","user","description","urls","links","catch","e","console","warn","message","finally"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useRef, useState } from 'react';\n\nimport { StaticDataContext } from '../../../utils/context/contexts';\n\nconst UNSPLASH_API = 'https://api.unsplash.com/search/photos?';\n\nexport const useUnsplashResults = (input, page = 0, limit = 12, timeout = 800) => {\n    const debounceSearch = useRef();\n    const { endpoints } = useContext(StaticDataContext);\n    const [lastLoaded, setLastLoaded] = useState(false);\n    const [results, setResults] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        if (!input || !endpoints.unsplashProxy) {\n            setResults([]);\n            return;\n        }\n        if (input === lastLoaded?.input && page === lastLoaded?.page) {\n            return;\n        }\n        setError(null);\n        if (debounceSearch.current) {\n            clearTimeout(debounceSearch.current);\n        }\n        debounceSearch.current = setTimeout(() => {\n            setLoading(true);\n            const params = {\n                query: input,\n                page: page * limit,\n                per_page: limit\n            };\n            const url = encodeURI(\n                UNSPLASH_API +\n                    Object.entries(params)\n                        .map(([key, value]) => `${key}=${value}`)\n                        .join('&')\n            );\n            // eslint-disable-next-line no-undef\n            fetch(`${endpoints.unsplashProxy}?url=${url}`, {\n                method: 'GET'\n            })\n                .then(async res => {\n                    if (`${res.status}`.startsWith('2')) {\n                        const functionResult = await res.json();\n                        if (`${functionResult?.unsplashStatus}`.startsWith('2')) {\n                            return functionResult;\n                        }\n                        throw new Error(`${functionResult.unsplashStatus}`);\n                    }\n                    throw new Error(`${res.status} ${res.statusText}`);\n                })\n                .then(res => {\n                    setResults(\n                        res?.data?.results.map(({ id, user, description, urls, links }) => ({\n                            id,\n                            urls,\n                            user,\n                            description,\n                            links\n                        }))\n                    );\n                })\n                .catch(e => {\n                    console.warn('Failed to fetch from unsplash', e.message);\n                    setError(e.message);\n                })\n                .finally(() => {\n                    setLastLoaded({ input, page });\n                    debounceSearch.current = null;\n                    setLoading(false);\n                });\n        }, timeout);\n    }, [input, lastLoaded, page]);\n\n    return { results, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}