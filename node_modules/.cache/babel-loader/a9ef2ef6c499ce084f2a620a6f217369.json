{"ast":null,"code":"var _jsxFileName = \"/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/gifs/gifs_front/gifs_front.jsx\";\nimport React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\nimport { Typography } from '@wld/ui';\nimport { ProfileCardActions } from '../../../../commons/profile_card/profile_card_actions/profile_card_actions';\nimport { ProfileCardButton } from '../../../../commons/profile_card/profile_card_button/profile_card_button';\nimport { GifsSidesCommons } from '../gifs_sides_commons/gifs_sides_commons';\nimport { useCardSide } from '../../../../hooks/profile_card_hooks/use_card_side';\nimport { ProfileCardFrontTypography } from '../../../../commons/profile_card/profile_card_front_typography/profile_card_front_typography';\nimport { ProfileCardPaddedFront } from '../../../../commons/profile_card/profile_card_padded_front/profile_card_padding_front';\nimport { SIDES } from '../../../../commons/profile_card/profile_card_side/side';\nimport { styles } from './gifs_front_styles';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoDataButton } from '../../../../commons/no_data_button/no_data_button';\nconst useStyles = createUseStyles(styles);\n\nconst GifsFrontComponent = ({\n  data,\n  handleAddButtonClick\n}) => {\n  var _data$interests$, _data$interests;\n\n  const classes = useStyles();\n  const [side, setSide] = useCardSide();\n  const handleButtonClick = useCallback(() => setSide(side === SIDES.FRONT ? SIDES.BACK : SIDES.FRONT), [side, setSide]);\n  const {\n    gifUrl,\n    name\n  } = (_data$interests$ = (_data$interests = data.interests) === null || _data$interests === void 0 ? void 0 : _data$interests[0]) !== null && _data$interests$ !== void 0 ? _data$interests$ : {};\n  const hasHobby = useMemo(() => existsAndNotEmpty(data === null || data === void 0 ? void 0 : data.interests), [data]);\n  return /*#__PURE__*/React.createElement(GifsSidesCommons, {\n    classes: {\n      container: classes.container\n    },\n    underLayer: gifUrl && /*#__PURE__*/React.createElement(\"img\", {\n      className: classes.image,\n      src: gifUrl,\n      alt: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 35\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, !gifUrl && /*#__PURE__*/React.createElement(ProfileCardPaddedFront, {\n    customClasses: {\n      container: classes.paddedFront\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Content, Object.assign({\n    hasHobby,\n    name,\n    handleAddButtonClick,\n    classes\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }))), hasHobby && /*#__PURE__*/React.createElement(ProfileCardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ProfileCardButton, {\n    onClick: handleButtonClick,\n    overrideColor: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"Gifs.front.action\",\n    defaultMessage: \"See all hobbies\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }))));\n};\n\nconst Content = ({\n  hasHobby,\n  name,\n  handleAddButtonClick,\n  classes\n}) => {\n  const [isTypographyTruncated, setIsTypographyTruncated] = useState(true);\n  const typographyReference = useRef();\n  useEffect(() => {\n    const element = typographyReference.current;\n\n    if (!element) {\n      return;\n    }\n\n    if ((element === null || element === void 0 ? void 0 : element.offsetHeight) > (element === null || element === void 0 ? void 0 : element.scrollHeight) - 1) {\n      setIsTypographyTruncated(false);\n    }\n  }, []);\n\n  if (!hasHobby) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.noHobby,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h3\",\n      component: \"h3\",\n      customClasses: {\n        container: classes.noHobbyTypography\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Gifs.front.noHobby\",\n      defaultMessage: \"Vous n'avez pas encore ajout\\xE9 de hobbies !\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(NoDataButton, {\n      handleAddButtonClick: handleAddButtonClick,\n      classes: {\n        container: classes.addButton\n      },\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"Gifs.noHobby.buttonLabel\",\n      defaultMessage: \"Ajouter un hobby\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(ProfileCardFrontTypography, {\n    ref: typographyReference,\n    classes: {\n      container: cn(classes.withoutGifTypography, isTypographyTruncated && classes.truncatedTypography)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, name);\n};\n\nexport const GifsFront = memo(GifsFrontComponent);","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/gifs/gifs_front/gifs_front.jsx"],"names":["React","memo","useCallback","useEffect","useMemo","useRef","useState","cn","FormattedMessage","createUseStyles","Typography","ProfileCardActions","ProfileCardButton","GifsSidesCommons","useCardSide","ProfileCardFrontTypography","ProfileCardPaddedFront","SIDES","styles","existsAndNotEmpty","NoDataButton","useStyles","GifsFrontComponent","data","handleAddButtonClick","classes","side","setSide","handleButtonClick","FRONT","BACK","gifUrl","name","interests","hasHobby","container","image","paddedFront","Content","isTypographyTruncated","setIsTypographyTruncated","typographyReference","element","current","offsetHeight","scrollHeight","noHobby","noHobbyTypography","addButton","withoutGifTypography","truncatedTypography","GifsFront"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport cn from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { createUseStyles } from 'react-jss';\n\nimport { Typography } from '@wld/ui';\nimport { ProfileCardActions } from '../../../../commons/profile_card/profile_card_actions/profile_card_actions';\nimport { ProfileCardButton } from '../../../../commons/profile_card/profile_card_button/profile_card_button';\nimport { GifsSidesCommons } from '../gifs_sides_commons/gifs_sides_commons';\n\nimport { useCardSide } from '../../../../hooks/profile_card_hooks/use_card_side';\n\nimport { ProfileCardFrontTypography } from '../../../../commons/profile_card/profile_card_front_typography/profile_card_front_typography';\nimport { ProfileCardPaddedFront } from '../../../../commons/profile_card/profile_card_padded_front/profile_card_padding_front';\nimport { SIDES } from '../../../../commons/profile_card/profile_card_side/side';\n\nimport { styles } from './gifs_front_styles';\nimport { existsAndNotEmpty } from '../../../utils/exists_and_not_empty';\nimport { NoDataButton } from '../../../../commons/no_data_button/no_data_button';\n\nconst useStyles = createUseStyles(styles);\n\nconst GifsFrontComponent = ({ data, handleAddButtonClick }) => {\n    const classes = useStyles();\n    const [side, setSide] = useCardSide();\n\n    const handleButtonClick = useCallback(() => setSide(side === SIDES.FRONT ? SIDES.BACK : SIDES.FRONT), [\n        side,\n        setSide\n    ]);\n\n    const { gifUrl, name } = data.interests?.[0] ?? {};\n\n    const hasHobby = useMemo(() => existsAndNotEmpty(data?.interests), [data]);\n\n    return (\n        <GifsSidesCommons\n            classes={{\n                container: classes.container\n            }}\n            underLayer={gifUrl && <img className={classes.image} src={gifUrl} alt={name} />}\n        >\n            {!gifUrl && (\n                <ProfileCardPaddedFront customClasses={{ container: classes.paddedFront }}>\n                    <Content {...{ hasHobby, name, handleAddButtonClick, classes }} />\n                </ProfileCardPaddedFront>\n            )}\n            {hasHobby && (\n                <ProfileCardActions>\n                    <ProfileCardButton onClick={handleButtonClick} overrideColor=\"light\">\n                        <FormattedMessage id=\"Gifs.front.action\" defaultMessage=\"See all hobbies\" />\n                    </ProfileCardButton>\n                </ProfileCardActions>\n            )}\n        </GifsSidesCommons>\n    );\n};\n\nconst Content = ({ hasHobby, name, handleAddButtonClick, classes }) => {\n    const [isTypographyTruncated, setIsTypographyTruncated] = useState(true);\n    const typographyReference = useRef();\n\n    useEffect(() => {\n        const element = typographyReference.current;\n        if (!element) {\n            return;\n        }\n        if (element?.offsetHeight > element?.scrollHeight - 1) {\n            setIsTypographyTruncated(false);\n        }\n    }, []);\n\n    if (!hasHobby) {\n        return (\n            <div className={classes.noHobby}>\n                <Typography variant=\"h3\" component=\"h3\" customClasses={{ container: classes.noHobbyTypography }}>\n                    <FormattedMessage\n                        id=\"Gifs.front.noHobby\"\n                        defaultMessage=\"Vous n'avez pas encore ajouté de hobbies !\"\n                    />\n                </Typography>\n                <NoDataButton\n                    handleAddButtonClick={handleAddButtonClick}\n                    classes={{\n                        container: classes.addButton\n                    }}\n                    color=\"secondary\"\n                >\n                    <FormattedMessage id=\"Gifs.noHobby.buttonLabel\" defaultMessage=\"Ajouter un hobby\" />\n                </NoDataButton>\n            </div>\n        );\n    }\n\n    return (\n        <ProfileCardFrontTypography\n            ref={typographyReference}\n            classes={{\n                container: cn(classes.withoutGifTypography, isTypographyTruncated && classes.truncatedTypography)\n            }}\n        >\n            {name}\n        </ProfileCardFrontTypography>\n    );\n};\n\nexport const GifsFront = memo(GifsFrontComponent);\n"]},"metadata":{},"sourceType":"module"}