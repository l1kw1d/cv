{"ast":null,"code":"import * as Yup from 'yup';\nimport { validationTranslations } from '../../../../../utils/validation_translations';\nimport { dreamjobValidationTranslations } from './validator_translations';\nexport const DreamJobValidationSchema = formatMessage => Yup.object({\n  places: Yup.array().of(Yup.object().shape({\n    name: Yup.string().min(5, formatMessage(validationTranslations.min, {\n      min: 5\n    })).required(formatMessage(validationTranslations.required))\n  })),\n  contractTypes: Yup.array().test('is-not-empty', formatMessage(dreamjobValidationTranslations.atLeastOneContractType), value => !!(value || []).length).test('is-exclusif', formatMessage(dreamjobValidationTranslations.selectByGroup), value => !(['permanent', 'fixedTerm', 'freelance'].filter(val => value.includes(val)).length && ['apprenticeship', 'internship'].filter(val => value.includes(val)).length)),\n  salary: Yup.number().min(1, formatMessage(validationTranslations.min, {\n    min: 1\n  }))\n});\nexport const validateDreamjobComplete = data => {\n  try {\n    Yup.object({\n      places: Yup.array().required(),\n      contractTypes: Yup.array().required()\n    }).validateSync(data);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/root/Desktop/Good-fordev/site-perso/src/package/components/cards/cards_types/dream_job/data/validator.js"],"names":["Yup","validationTranslations","dreamjobValidationTranslations","DreamJobValidationSchema","formatMessage","object","places","array","of","shape","name","string","min","required","contractTypes","test","atLeastOneContractType","value","length","selectByGroup","filter","val","includes","salary","number","validateDreamjobComplete","data","validateSync","e"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAASC,sBAAT,QAAuC,8CAAvC;AACA,SAASC,8BAAT,QAA+C,0BAA/C;AAEA,OAAO,MAAMC,wBAAwB,GAAGC,aAAa,IACjDJ,GAAG,CAACK,MAAJ,CAAW;AACPC,EAAAA,MAAM,EAAEN,GAAG,CAACO,KAAJ,GAAYC,EAAZ,CACJR,GAAG,CAACK,MAAJ,GAAaI,KAAb,CAAmB;AACfC,IAAAA,IAAI,EAAEV,GAAG,CAACW,MAAJ,GACDC,GADC,CACG,CADH,EACMR,aAAa,CAACH,sBAAsB,CAACW,GAAxB,EAA6B;AAAEA,MAAAA,GAAG,EAAE;AAAP,KAA7B,CADnB,EAEDC,QAFC,CAEQT,aAAa,CAACH,sBAAsB,CAACY,QAAxB,CAFrB;AADS,GAAnB,CADI,CADD;AAQPC,EAAAA,aAAa,EAAEd,GAAG,CAACO,KAAJ,GACVQ,IADU,CAEP,cAFO,EAGPX,aAAa,CAACF,8BAA8B,CAACc,sBAAhC,CAHN,EAIPC,KAAK,IAAI,CAAC,CAAC,CAACA,KAAK,IAAI,EAAV,EAAcC,MAJlB,EAMVH,IANU,CAOP,aAPO,EAQPX,aAAa,CAACF,8BAA8B,CAACiB,aAAhC,CARN,EASPF,KAAK,IACD,EACI,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwCG,MAAxC,CAA+CC,GAAG,IAAIJ,KAAK,CAACK,QAAN,CAAeD,GAAf,CAAtD,EAA2EH,MAA3E,IACA,CAAC,gBAAD,EAAmB,YAAnB,EAAiCE,MAAjC,CAAwCC,GAAG,IAAIJ,KAAK,CAACK,QAAN,CAAeD,GAAf,CAA/C,EAAoEH,MAFxE,CAVG,CARR;AAuBPK,EAAAA,MAAM,EAAEvB,GAAG,CAACwB,MAAJ,GAAaZ,GAAb,CAAiB,CAAjB,EAAoBR,aAAa,CAACH,sBAAsB,CAACW,GAAxB,EAA6B;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAA7B,CAAjC;AAvBD,CAAX,CADG;AA2BP,OAAO,MAAMa,wBAAwB,GAAGC,IAAI,IAAI;AAC5C,MAAI;AACA1B,IAAAA,GAAG,CAACK,MAAJ,CAAW;AACPC,MAAAA,MAAM,EAAEN,GAAG,CAACO,KAAJ,GAAYM,QAAZ,EADD;AAEPC,MAAAA,aAAa,EAAEd,GAAG,CAACO,KAAJ,GAAYM,QAAZ;AAFR,KAAX,EAGGc,YAHH,CAGgBD,IAHhB;AAIH,GALD,CAKE,OAAOE,CAAP,EAAU;AACR,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CAVM","sourcesContent":["import * as Yup from 'yup';\nimport { validationTranslations } from '../../../../../utils/validation_translations';\nimport { dreamjobValidationTranslations } from './validator_translations';\n\nexport const DreamJobValidationSchema = formatMessage =>\n    Yup.object({\n        places: Yup.array().of(\n            Yup.object().shape({\n                name: Yup.string()\n                    .min(5, formatMessage(validationTranslations.min, { min: 5 }))\n                    .required(formatMessage(validationTranslations.required))\n            })\n        ),\n        contractTypes: Yup.array()\n            .test(\n                'is-not-empty',\n                formatMessage(dreamjobValidationTranslations.atLeastOneContractType),\n                value => !!(value || []).length\n            )\n            .test(\n                'is-exclusif',\n                formatMessage(dreamjobValidationTranslations.selectByGroup),\n                value =>\n                    !(\n                        ['permanent', 'fixedTerm', 'freelance'].filter(val => value.includes(val)).length &&\n                        ['apprenticeship', 'internship'].filter(val => value.includes(val)).length\n                    )\n            ),\n        salary: Yup.number().min(1, formatMessage(validationTranslations.min, { min: 1 }))\n    });\n\nexport const validateDreamjobComplete = data => {\n    try {\n        Yup.object({\n            places: Yup.array().required(),\n            contractTypes: Yup.array().required()\n        }).validateSync(data);\n    } catch (e) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"module"}